{
    "docs": [
        {
            "location": "/", 
            "text": "RxJS\n\n\n JavaScript\u7684ReactiveX\u5e93.\n\n\nRxJS\u662f\u4e00\u4e2a\u4f7f\u7528Observables\u8fdb\u884c\u53cd\u5e94\u5f0f\u7f16\u7a0b\u7684\u5e93\uff0c\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u7f16\u5199\u5f02\u6b65\u6216\u57fa\u4e8e\u56de\u8c03\u7684\u4ee3\u7801\u3002\n\u8be5\u9879\u76ee\u91cd\u5199\u4e86\nReactive-Extensions/RxJS\n\uff0c\u5177\u6709\u66f4\u597d\u7684\u6027\u80fd\uff0c\u66f4\u597d\u7684\u6a21\u5757\u6027\uff0c\u66f4\u597d\u7684\u53ef\u8c03\u8bd5\u8c03\u7528\u5806\u6808\uff0c\u540c\u65f6\u4fdd\u6301\u5927\u591a\u6570\u5411\u540e\u517c\u5bb9\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u7a81\u7834\u6027\u7684\u6539\u53d8\u51cf\u5c11\u4e86API\u8868\u9762\u3002\n\n\n\u00bb \u5b89\u88c5\u5b83\n\n\n\u5982\u4f55\u901a\u8fc7npm\u6216CDN\u5b89\u88c5RxJS\n\n\n\u00bb \u5b66\u4e60\u5b83\n\n\n\u9605\u8bfb\u89c2\u5bdf\u8005\uff0c\u89c2\u5bdf\u8005\uff0c\u4e3b\u9898\u7b49\u624b\u518c\n\n\n\u00bb \u5145\u5206\u53c2\u8003\n\n\n\u9605\u8bfb\u6bcf\u4e2a\u64cd\u4f5c\u7b26\u7684\u8be6\u7ec6\u6587\u6863\n\n\n\u00bb \u67e5\u770b\u793a\u4f8b\n\n\n\u9605\u8bfb\u6211\u4eec\u6709\u5173\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528RxJS\u7684\u6559\u7a0b\n\n\n\n\n\u627e\u5230\u5408\u9002\u7684\u64cd\u4f5c\u7b26\n\n\n\n\n\n\u6697\u793a: \u6253\u5f00\u4f60\u7684DevTools\u6765\u8bd5\u9a8cRxJS\u3002", 
            "title": "\u524d\u8a00"
        }, 
        {
            "location": "/#rxjs", 
            "text": "JavaScript\u7684ReactiveX\u5e93.  RxJS\u662f\u4e00\u4e2a\u4f7f\u7528Observables\u8fdb\u884c\u53cd\u5e94\u5f0f\u7f16\u7a0b\u7684\u5e93\uff0c\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u7f16\u5199\u5f02\u6b65\u6216\u57fa\u4e8e\u56de\u8c03\u7684\u4ee3\u7801\u3002\n\u8be5\u9879\u76ee\u91cd\u5199\u4e86 Reactive-Extensions/RxJS \uff0c\u5177\u6709\u66f4\u597d\u7684\u6027\u80fd\uff0c\u66f4\u597d\u7684\u6a21\u5757\u6027\uff0c\u66f4\u597d\u7684\u53ef\u8c03\u8bd5\u8c03\u7528\u5806\u6808\uff0c\u540c\u65f6\u4fdd\u6301\u5927\u591a\u6570\u5411\u540e\u517c\u5bb9\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u7a81\u7834\u6027\u7684\u6539\u53d8\u51cf\u5c11\u4e86API\u8868\u9762\u3002", 
            "title": "RxJS"
        }, 
        {
            "location": "/#_1", 
            "text": "\u5982\u4f55\u901a\u8fc7npm\u6216CDN\u5b89\u88c5RxJS", 
            "title": "\u00bb \u5b89\u88c5\u5b83"
        }, 
        {
            "location": "/#_2", 
            "text": "\u9605\u8bfb\u89c2\u5bdf\u8005\uff0c\u89c2\u5bdf\u8005\uff0c\u4e3b\u9898\u7b49\u624b\u518c", 
            "title": "\u00bb \u5b66\u4e60\u5b83"
        }, 
        {
            "location": "/#_3", 
            "text": "\u9605\u8bfb\u6bcf\u4e2a\u64cd\u4f5c\u7b26\u7684\u8be6\u7ec6\u6587\u6863", 
            "title": "\u00bb \u5145\u5206\u53c2\u8003"
        }, 
        {
            "location": "/#_4", 
            "text": "\u9605\u8bfb\u6211\u4eec\u6709\u5173\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u4f7f\u7528RxJS\u7684\u6559\u7a0b", 
            "title": "\u00bb \u67e5\u770b\u793a\u4f8b"
        }, 
        {
            "location": "/#_5", 
            "text": "\u6697\u793a: \u6253\u5f00\u4f60\u7684DevTools\u6765\u8bd5\u9a8cRxJS\u3002", 
            "title": "\u627e\u5230\u5408\u9002\u7684\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/ReactiveX/intro/", 
            "text": "ReactiveX\n\n\nReactiveX\u662f\u4e00\u4e2a\u901a\u8fc7\u4f7f\u7528\u53ef\u89c2\u5bdf\u5e8f\u5217\u6765\u7f16\u5199\u5f02\u6b65\u548c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u7a0b\u5e8f\u7684\u5e93\u3002\n\n\n\u5b83\u6269\u5c55\u4e86\u89c2\u5bdf\u8005\u6a21\u5f0f\u4ee5\u652f\u6301\u6570\u636e\u548c/\u6216\u4e8b\u4ef6\u5e8f\u5217\uff0c\u5e76\u589e\u52a0\u4e86\u8fd0\u7b97\u7b26\uff0c\u4f7f\u60a8\u53ef\u4ee5\u58f0\u660e\u6027\u5730\u7ec4\u5408\u5e8f\u5217\uff0c\u540c\u65f6\u62bd\u8c61\u51fa\u5bf9\u4f4e\u7ea7\u7ebf\u7a0b\uff0c\u540c\u6b65\uff0c\u7ebf\u7a0b\u5b89\u5168\u6027\uff0c\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u548c\u975e\u7ebf\u7a0b\u7b49\u4e8b\u7269\u7684\u62c5\u5fe7\u3002,\u963b\u6b62I/O\u3002\n\n\n\u89c2\u5bdf\u8005\u901a\u8fc7\u6210\u4e3a\u8bbf\u95ee\u591a\u4e2a\u9879\u76ee\u7684\u5f02\u6b65\u5e8f\u5217\u7684\u7406\u60f3\u65b9\u5f0f\u586b\u8865\u4e86\u7a7a\u767d\n\n\n\n\n\n\n\n\n\n\n\u5355\u4e2a\u9879\u76ee\n\n\n\u591a\u4e2a\u9879\u76ee\n\n\n\n\n\n\n\n\n\n\n\u540c\u6b65\n\n\nT getData()\n\n\nIterable\nT\n getData()\n\n\n\n\n\n\n\u5f02\u6b65\n\n\nFuture\nT\n getData()\n\n\nObservable\nT\n getData()\n\n\n\n\n\n\n\n\n\u5b83\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u529f\u80fd\u6027\u54cd\u5e94\u5f0f\u7f16\u7a0b\u201d\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u8bef\u7528\u3002\nReactiveX\u53ef\u80fd\u662f\u529f\u80fd\u6027\u7684\uff0c\u5b83\u53ef\u80fd\u662f\u53cd\u5e94\u6027\u7684\uff0c\u4f46\u201c\u529f\u80fd\u6027\u53cd\u5e94\u6027\u7a0b\u5e8f\u8bbe\u8ba1\u201d\u662f\u4e0d\u540c\u7684\u52a8\u7269\u3002\n\u5176\u4e2d\u4e00\u4e2a\u4e3b\u8981\u533a\u522b\u662f\uff0c\u529f\u80fd\u6027\u54cd\u5e94\u5f0f\u7f16\u7a0b\u5bf9\u968f\u65f6\u95f4\u800c\u8fde\u7eed\u53d8\u5316\u7684\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u800cReactiveX\u5219\u5bf9\u968f\u7740\u65f6\u95f4\u53d1\u51fa\u7684\u79bb\u6563\u503c\u8fdb\u884c\u64cd\u4f5c\u3002\n(\u8bf7\u53c2\u9605Conal Elliott\u7684\u6709\u5173\u529f\u80fd\u6027\u54cd\u5e94\u5f0f\u7f16\u7a0b\u7684\u66f4\u7cbe\u786e\u4fe1\u606f\u3002)\n\n\n\u4e3a\u4ec0\u4e48\u4f7f\u7528\u53ef\u89c2\u5bdf\u70b9?\n\n\nReactiveX Observable\u6a21\u578b\u5141\u8bb8\u60a8\u4f7f\u7528\u4e0e\u7528\u4e8e\u6570\u7ec4\u9879\u76ee\u96c6\u5408\u7684\u76f8\u540c\u7c7b\u578b\u7684\u7b80\u5355\u53ef\u7ec4\u5408\u64cd\u4f5c\u6765\u5904\u7406\u5f02\u6b65\u4e8b\u4ef6\u6d41\u3002\n\u5b83\u5c06\u60a8\u4ece\u7ea0\u7ed3\u7684\u7f51\u7edc\u4e2d\u89e3\u653e\u51fa\u6765\uff0c\u4ece\u800c\u4f7f\u60a8\u7684\u4ee3\u7801\u66f4\u5177\u53ef\u8bfb\u6027\uff0c\u5e76\u4e14\u4e0d\u6613\u51fa\u73b0\u9519\u8bef\u3002\n\n\n\u89c2\u5bdf\u70b9\u662f\u53ef\u7ec4\u5408\u7684\n\n\n\u50cfJava Futures\u8fd9\u6837\u7684\u6280\u672f\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8e\u5355\u4e00\u7ea7\u522b\u7684\u5f02\u6b65\u6267\u884c\uff0c\u4f46\u662f\u5f53\u5b83\u4eec\u5d4c\u5957\u65f6\uff0c\u5b83\u4eec\u5f00\u59cb\u589e\u52a0\u4e0d\u5e73\u51e1\u7684\u590d\u6742\u6027\u3002\n\n\n\u4f7f\u7528Futures\u96be\u4ee5\u4f18\u5316\u7ec4\u5408\u6761\u4ef6\u5f02\u6b65\u6267\u884c\u6d41\u7a0b\uff08\u6216\u8005\u4e0d\u53ef\u80fd\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u5ef6\u8fdf\u5728\u8fd0\u884c\u65f6\u4f1a\u6709\u6240\u4e0d\u540c\uff09\u3002\n\u5f53\u7136\uff0c\u8fd9\u53ef\u4ee5\u5b8c\u6210\uff0c\u4f46\u5b83\u5f88\u5feb\u53d8\u5f97\u590d\u6742\uff08\u5e76\u4e14\u5bb9\u6613\u51fa\u9519\uff09\uff0c\u6216\u8005\u5b83\u8fc7\u65e9\u5730\u963b\u585e\u4e86Future.get\uff08\uff09\uff0c\u8fd9\u6d88\u9664\u4e86\u5f02\u6b65\u6267\u884c\u7684\u597d\u5904\u3002\n\n\n\u53e6\u4e00\u65b9\u9762\uff0cReactiveX Observables\u65e8\u5728\u7528\u4e8e\u7f16\u5199\u5f02\u6b65\u6570\u636e\u7684\u6d41\u7a0b\u548c\u5e8f\u5217\u3002\n\n\n\u89c2\u5bdf\u70b9\u662f\u7075\u6d3b\u7684\n\n\nReactiveX Observable\u4e0d\u4ec5\u652f\u6301\u5355\u4e2a\u6807\u91cf\u503c\uff08\u5982\u671f\u8d27\uff09\u7684\u6392\u653e\uff0c\u8fd8\u652f\u6301\u503c\u5e8f\u5217\u6216\u751a\u81f3\u65e0\u9650\u6d41\u3002\nObservable\u662f\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u8fd9\u4e9b\u7528\u4f8b\u7684\u5355\u4e2a\u62bd\u8c61\u3002\nObservable\u5177\u6709\u4e0e\u5b83\u7684\u955c\u50cf\u8868\u5144Iterable\u76f8\u5173\u7684\u6240\u6709\u7075\u6d3b\u6027\u548c\u4f18\u96c5\u6027\u3002\n\n\nObservable\u662f\u540c\u6b65/\u62c9Iterable\u7684\u5f02\u6b65/\u63a8\u201c\u53cc\u201d\n\n\n\n\n\n\n\n\nevent\n\n\n\u53ef\u8fed\u4ee3 (pull)\n\n\n\u53ef\u89c2\u5bdf (push)\n\n\n\n\n\n\n\n\n\n\nretrieve data\n\n\nT next()\n\n\nonNext(T)\n\n\n\n\n\n\ndiscover error\n\n\nthrows Exception\n\n\nonError(Exception)\n\n\n\n\n\n\ncomplete\n\n\n!hasNext()\n\n\nonCompleted()\n\n\n\n\n\n\n\n\n\u89c2\u5bdf\u8005\u7684\u610f\u89c1\u8f83\u5c11\n\n\nReactiveX\u4e0d\u504f\u5411\u67d0\u4e9b\u7279\u5b9a\u7684\u5e76\u53d1\u6216\u5f02\u6b65\u6765\u6e90\u3002\n\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u6c60\uff0c\u4e8b\u4ef6\u5faa\u73af\uff0c\u975e\u963b\u585eI / O\uff0c\u6f14\u5458\uff08\u5982\u6765\u81eaAkka\uff09\u6216\u4efb\u4f55\u9002\u5408\u60a8\u7684\u9700\u6c42\uff0c\u98ce\u683c\u6216\u4e13\u4e1a\u77e5\u8bc6\u7684\u5b9e\u73b0\u6765\u5b9e\u73b0\u89c2\u5bdf\u5bf9\u8c61\u3002\n\u5ba2\u6237\u7aef\u4ee3\u7801\u5c06\u5176\u4e0eObservables\u7684\u6240\u6709\u4ea4\u4e92\u89c6\u4e3a\u5f02\u6b65\uff0c\u65e0\u8bba\u60a8\u7684\u5e95\u5c42\u5b9e\u73b0\u662f\u963b\u585e\u8fd8\u662f\u975e\u963b\u585e\uff0c\u5e76\u4e14\u60a8\u9009\u62e9\u5b9e\u73b0\u5b83\u3002\n\n\n\u8fd9\u4e2aObservable\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\n\n\npublic Observable\ndata\n getData();\n\n\n\n\n\u5b83\u662f\u5426\u4e0e\u547c\u53eb\u8005\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e0a\u540c\u6b65\u5de5\u4f5c\uff1f\n\n\n\u5b83\u662f\u5426\u5728\u5f02\u6b65\u7ebf\u7a0b\u4e0a\u5f02\u6b65\u5de5\u4f5c\uff1f\n\n\n\u5b83\u662f\u5426\u5c06\u5176\u5de5\u4f5c\u5206\u6210\u591a\u4e2a\u53ef\u80fd\u4ee5\u4efb\u4f55\u987a\u5e8f\u5c06\u6570\u636e\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u7ebf\u7a0b\uff1f\n\n\n\u5b83\u662f\u5426\u4f7f\u7528Actor\uff08\u6216\u591a\u4e2aActor\uff09\u800c\u4e0d\u662f\u7ebf\u7a0b\u6c60\uff1f\n\n\n\u5b83\u662f\u5426\u4f7f\u7528\u5e26\u4e8b\u4ef6\u5faa\u73af\u7684NIO\u6765\u6267\u884c\u5f02\u6b65\u7f51\u7edc\u8bbf\u95ee\uff1f\n\n\n\u5b83\u662f\u5426\u4f7f\u7528\u4e8b\u4ef6\u5faa\u73af\u5c06\u5de5\u4f5c\u7ebf\u7a0b\u4ece\u56de\u8c03\u7ebf\u7a0b\u4e2d\u5206\u79bb\u51fa\u6765\uff1f\n\n\n\n\n\u4ece\u89c2\u5bdf\u8005\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u5e76\u4e0d\u91cd\u8981\uff01\n\n\n\u800c\u4e14\u91cd\u8981\u7684\u662f\uff1a\u901a\u8fc7\u4f7f\u7528ReactiveX\uff0c\u60a8\u53ef\u4ee5\u7a0d\u540e\u6539\u53d8\u4e3b\u610f\uff0c\u4ece\u6839\u672c\u4e0a\u6539\u53d8Observable\u5b9e\u73b0\u7684\u57fa\u672c\u6027\u8d28\uff0c\u800c\u4e0d\u4f1a\u6253\u7834Observable\u7684\u6d88\u8d39\u8005\u3002\n\n\n\u56de\u8c03\u6709\u81ea\u5df1\u7684\u95ee\u9898\n\n\n\u56de\u8c03\u901a\u8fc7\u4e0d\u5141\u8bb8\u4efb\u4f55\u4e1c\u897f\u963b\u585e\u6765\u89e3\u51b3Future.get\uff08\uff09\u8fc7\u65e9\u963b\u585e\u7684\u95ee\u9898\u3002\n\u5b83\u4eec\u81ea\u7136\u9ad8\u6548\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u54cd\u5e94\u51c6\u5907\u5c31\u7eea\u65f6\u6267\u884c\u3002\n\n\n\u4f46\u662f\u4e0eFutures\u4e00\u6837\uff0c\u867d\u7136\u56de\u8c03\u5f88\u5bb9\u6613\u4e0e\u5355\u4e00\u7ea7\u522b\u7684\u5f02\u6b65\u6267\u884c\u4e00\u8d77\u4f7f\u7528\uff0c\u4f46\u662f\u5d4c\u5957\u7ec4\u5408\u4f1a\u53d8\u5f97\u7b28\u62d9\u3002\n\n\nReactiveX\u662f\u4e00\u4e2a\u591a\u8bed\u8a00\u5e94\u7528\u7a0b\u5e8f\n\n\nReactiveX\u76ee\u524d\u4ee5\u5404\u79cd\u8bed\u8a00\u5b9e\u73b0\uff0c\u5176\u65b9\u5f0f\u9075\u5faa\u8fd9\u4e9b\u8bed\u8a00\u7684\u4e60\u60ef\u7528\u6cd5\uff0c\u5e76\u4e14\u5728\u5feb\u901f\u526a\u8f91\u4e2d\u6dfb\u52a0\u66f4\u591a\u8bed\u8a00\u3002\n\n\n\u54cd\u5e94\u5f0f\u7a0b\u5e8f\n\n\nReactiveX\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u64cd\u4f5c\u7b26\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u7b5b\u9009\uff0c\u9009\u62e9\uff0c\u8f6c\u6362\uff0c\u7ec4\u5408\u548c\u7ec4\u5408\u89c2\u5bdf\u503c\u3002\n\u8fd9\u5141\u8bb8\u6709\u6548\u7684\u6267\u884c\u548c\u7ec4\u5408\u3002\n\n\n\u60a8\u53ef\u4ee5\u5c06Observable\u7c7b\u89c6\u4e3a\u4e0e\u201cIterable\u201d\u7b49\u6548\u7684\u201c\u63a8\u9001\u201d\uff0c\u5373\u201c\u62c9\u201d\u3002\u4f7f\u7528Iterable\uff0c\u6d88\u8d39\u8005\u4ece\u751f\u4ea7\u8005\u548c\u7ebf\u7a0b\u5757\u4e2d\u63d0\u53d6\u503c\uff0c\u76f4\u5230\u8fd9\u4e9b\u503c\u5230\u8fbe\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u53ea\u8981\u6709\u53ef\u7528\u503c\uff0c\u751f\u4ea7\u8005\u901a\u8fc7Observable\u5c06\u503c\u63a8\u9001\u7ed9\u6d88\u8d39\u8005\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u66f4\u52a0\u7075\u6d3b\uff0c\u56e0\u4e3a\u503c\u53ef\u4ee5\u540c\u6b65\u6216\u5f02\u6b65\u5230\u8fbe\u3002\n\n\n\u793a\u4f8b\u4ee3\u7801\u663e\u793a\u4e86\u5982\u4f55\u5c06\u76f8\u4f3c\u7684\u9ad8\u9636\u51fd\u6570\u5e94\u7528\u4e8eIterable\u548cObservable\n\n\n\u53ef\u8fed\u4ee3\n\n\ngetDataFromLocalMemory\n()\n\n  \n.\nskip\n(\n10\n)\n\n  \n.\ntake\n(\n5\n)\n\n  \n.\nmap\n({\n \ns\n \n-\n \nreturn\n \ns\n \n+\n \n transformed\n \n})\n\n  \n.\nforEach\n({\n \nprintln\n \nnext =\n \n \n+\n \nit\n \n})\n\n\n\n\n\n\u53ef\u89c2\u5bdf\n\n\ngetDataFromNetwork\n()\n\n  \n.\nskip\n(\n10\n)\n\n  \n.\ntake\n(\n5\n)\n\n  \n.\nmap\n({\n \ns\n \n-\n \nreturn\n \ns\n \n+\n \n transformed\n \n})\n\n  \n.\nsubscribe\n({\n \nprintln\n \nonNext =\n \n \n+\n \nit\n \n})\n\n\n\n\n\nObservable\u7c7b\u578b\u4e3aGang of Four\u7684\u89c2\u5bdf\u8005\u6a21\u5f0f\u6dfb\u52a0\u4e86\u4e24\u4e2a\u7f3a\u5c11\u7684\u8bed\u4e49\uff0c\u4ee5\u5339\u914d\u90a3\u4e9b\u53ef\u7528\u4e8eIterable\u7c7b\u578b\u7684\u8bed\u4e49\uff1a\n\n\n\n\n\u751f\u4ea7\u8005\u5411\u6d88\u8d39\u8005\u53d1\u4fe1\u53f7\u8868\u660e\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53ef\u7528\u7684\u80fd\u529b\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cIterable\u4e0a\u7684foreach\u5faa\u73af\u5b8c\u6210\u5e76\u6b63\u5e38\u8fd4\u56de; Observable\u8c03\u7528\u5176\u89c2\u5bdf\u8005\u7684onCompleted\u65b9\u6cd5\uff09\n\n\n\u751f\u4ea7\u8005\u5411\u6d88\u8d39\u8005\u53d1\u51fa\u9519\u8bef\u5df2\u7ecf\u53d1\u751f\u7684\u80fd\u529b\uff08\u5982\u679c\u5728\u8fed\u4ee3\u671f\u95f4\u53d1\u751f\u9519\u8bef\uff0c\u5219Iterable\u4f1a\u629b\u51fa\u5f02\u5e38; Observable\u4f1a\u8c03\u7528\u5176\u89c2\u5bdf\u8005\u7684onError\u65b9\u6cd5\uff09\n\n\n\n\n\u6709\u4e86\u8fd9\u4e9b\u8865\u5145\uff0cReactiveX\u534f\u8c03\u4e86Iterable\u548cObservable\u7c7b\u578b\u3002\n\u5b83\u4eec\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u5c31\u662f\u6570\u636e\u6d41\u5411\u7684\u65b9\u5411\u3002\n\u8fd9\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u73b0\u5728\u60a8\u53ef\u4ee5\u5728Iterable\u4e0a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5728Observable\u4e0a\u6267\u884c\u64cd\u4f5c\u3002", 
            "title": "ReactiveX"
        }, 
        {
            "location": "/ReactiveX/intro/#reactivex", 
            "text": "ReactiveX\u662f\u4e00\u4e2a\u901a\u8fc7\u4f7f\u7528\u53ef\u89c2\u5bdf\u5e8f\u5217\u6765\u7f16\u5199\u5f02\u6b65\u548c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u7a0b\u5e8f\u7684\u5e93\u3002  \u5b83\u6269\u5c55\u4e86\u89c2\u5bdf\u8005\u6a21\u5f0f\u4ee5\u652f\u6301\u6570\u636e\u548c/\u6216\u4e8b\u4ef6\u5e8f\u5217\uff0c\u5e76\u589e\u52a0\u4e86\u8fd0\u7b97\u7b26\uff0c\u4f7f\u60a8\u53ef\u4ee5\u58f0\u660e\u6027\u5730\u7ec4\u5408\u5e8f\u5217\uff0c\u540c\u65f6\u62bd\u8c61\u51fa\u5bf9\u4f4e\u7ea7\u7ebf\u7a0b\uff0c\u540c\u6b65\uff0c\u7ebf\u7a0b\u5b89\u5168\u6027\uff0c\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u548c\u975e\u7ebf\u7a0b\u7b49\u4e8b\u7269\u7684\u62c5\u5fe7\u3002,\u963b\u6b62I/O\u3002  \u89c2\u5bdf\u8005\u901a\u8fc7\u6210\u4e3a\u8bbf\u95ee\u591a\u4e2a\u9879\u76ee\u7684\u5f02\u6b65\u5e8f\u5217\u7684\u7406\u60f3\u65b9\u5f0f\u586b\u8865\u4e86\u7a7a\u767d      \u5355\u4e2a\u9879\u76ee  \u591a\u4e2a\u9879\u76ee      \u540c\u6b65  T getData()  Iterable T  getData()    \u5f02\u6b65  Future T  getData()  Observable T  getData()     \u5b83\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u529f\u80fd\u6027\u54cd\u5e94\u5f0f\u7f16\u7a0b\u201d\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u8bef\u7528\u3002\nReactiveX\u53ef\u80fd\u662f\u529f\u80fd\u6027\u7684\uff0c\u5b83\u53ef\u80fd\u662f\u53cd\u5e94\u6027\u7684\uff0c\u4f46\u201c\u529f\u80fd\u6027\u53cd\u5e94\u6027\u7a0b\u5e8f\u8bbe\u8ba1\u201d\u662f\u4e0d\u540c\u7684\u52a8\u7269\u3002\n\u5176\u4e2d\u4e00\u4e2a\u4e3b\u8981\u533a\u522b\u662f\uff0c\u529f\u80fd\u6027\u54cd\u5e94\u5f0f\u7f16\u7a0b\u5bf9\u968f\u65f6\u95f4\u800c\u8fde\u7eed\u53d8\u5316\u7684\u503c\u8fdb\u884c\u64cd\u4f5c\uff0c\u800cReactiveX\u5219\u5bf9\u968f\u7740\u65f6\u95f4\u53d1\u51fa\u7684\u79bb\u6563\u503c\u8fdb\u884c\u64cd\u4f5c\u3002\n(\u8bf7\u53c2\u9605Conal Elliott\u7684\u6709\u5173\u529f\u80fd\u6027\u54cd\u5e94\u5f0f\u7f16\u7a0b\u7684\u66f4\u7cbe\u786e\u4fe1\u606f\u3002)", 
            "title": "ReactiveX"
        }, 
        {
            "location": "/ReactiveX/intro/#_1", 
            "text": "ReactiveX Observable\u6a21\u578b\u5141\u8bb8\u60a8\u4f7f\u7528\u4e0e\u7528\u4e8e\u6570\u7ec4\u9879\u76ee\u96c6\u5408\u7684\u76f8\u540c\u7c7b\u578b\u7684\u7b80\u5355\u53ef\u7ec4\u5408\u64cd\u4f5c\u6765\u5904\u7406\u5f02\u6b65\u4e8b\u4ef6\u6d41\u3002\n\u5b83\u5c06\u60a8\u4ece\u7ea0\u7ed3\u7684\u7f51\u7edc\u4e2d\u89e3\u653e\u51fa\u6765\uff0c\u4ece\u800c\u4f7f\u60a8\u7684\u4ee3\u7801\u66f4\u5177\u53ef\u8bfb\u6027\uff0c\u5e76\u4e14\u4e0d\u6613\u51fa\u73b0\u9519\u8bef\u3002", 
            "title": "\u4e3a\u4ec0\u4e48\u4f7f\u7528\u53ef\u89c2\u5bdf\u70b9?"
        }, 
        {
            "location": "/ReactiveX/intro/#_2", 
            "text": "\u50cfJava Futures\u8fd9\u6837\u7684\u6280\u672f\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8e\u5355\u4e00\u7ea7\u522b\u7684\u5f02\u6b65\u6267\u884c\uff0c\u4f46\u662f\u5f53\u5b83\u4eec\u5d4c\u5957\u65f6\uff0c\u5b83\u4eec\u5f00\u59cb\u589e\u52a0\u4e0d\u5e73\u51e1\u7684\u590d\u6742\u6027\u3002  \u4f7f\u7528Futures\u96be\u4ee5\u4f18\u5316\u7ec4\u5408\u6761\u4ef6\u5f02\u6b65\u6267\u884c\u6d41\u7a0b\uff08\u6216\u8005\u4e0d\u53ef\u80fd\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u5ef6\u8fdf\u5728\u8fd0\u884c\u65f6\u4f1a\u6709\u6240\u4e0d\u540c\uff09\u3002\n\u5f53\u7136\uff0c\u8fd9\u53ef\u4ee5\u5b8c\u6210\uff0c\u4f46\u5b83\u5f88\u5feb\u53d8\u5f97\u590d\u6742\uff08\u5e76\u4e14\u5bb9\u6613\u51fa\u9519\uff09\uff0c\u6216\u8005\u5b83\u8fc7\u65e9\u5730\u963b\u585e\u4e86Future.get\uff08\uff09\uff0c\u8fd9\u6d88\u9664\u4e86\u5f02\u6b65\u6267\u884c\u7684\u597d\u5904\u3002  \u53e6\u4e00\u65b9\u9762\uff0cReactiveX Observables\u65e8\u5728\u7528\u4e8e\u7f16\u5199\u5f02\u6b65\u6570\u636e\u7684\u6d41\u7a0b\u548c\u5e8f\u5217\u3002", 
            "title": "\u89c2\u5bdf\u70b9\u662f\u53ef\u7ec4\u5408\u7684"
        }, 
        {
            "location": "/ReactiveX/intro/#_3", 
            "text": "ReactiveX Observable\u4e0d\u4ec5\u652f\u6301\u5355\u4e2a\u6807\u91cf\u503c\uff08\u5982\u671f\u8d27\uff09\u7684\u6392\u653e\uff0c\u8fd8\u652f\u6301\u503c\u5e8f\u5217\u6216\u751a\u81f3\u65e0\u9650\u6d41\u3002\nObservable\u662f\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u8fd9\u4e9b\u7528\u4f8b\u7684\u5355\u4e2a\u62bd\u8c61\u3002\nObservable\u5177\u6709\u4e0e\u5b83\u7684\u955c\u50cf\u8868\u5144Iterable\u76f8\u5173\u7684\u6240\u6709\u7075\u6d3b\u6027\u548c\u4f18\u96c5\u6027\u3002  Observable\u662f\u540c\u6b65/\u62c9Iterable\u7684\u5f02\u6b65/\u63a8\u201c\u53cc\u201d     event  \u53ef\u8fed\u4ee3 (pull)  \u53ef\u89c2\u5bdf (push)      retrieve data  T next()  onNext(T)    discover error  throws Exception  onError(Exception)    complete  !hasNext()  onCompleted()", 
            "title": "\u89c2\u5bdf\u70b9\u662f\u7075\u6d3b\u7684"
        }, 
        {
            "location": "/ReactiveX/intro/#_4", 
            "text": "ReactiveX\u4e0d\u504f\u5411\u67d0\u4e9b\u7279\u5b9a\u7684\u5e76\u53d1\u6216\u5f02\u6b65\u6765\u6e90\u3002\n\u53ef\u4ee5\u4f7f\u7528\u7ebf\u7a0b\u6c60\uff0c\u4e8b\u4ef6\u5faa\u73af\uff0c\u975e\u963b\u585eI / O\uff0c\u6f14\u5458\uff08\u5982\u6765\u81eaAkka\uff09\u6216\u4efb\u4f55\u9002\u5408\u60a8\u7684\u9700\u6c42\uff0c\u98ce\u683c\u6216\u4e13\u4e1a\u77e5\u8bc6\u7684\u5b9e\u73b0\u6765\u5b9e\u73b0\u89c2\u5bdf\u5bf9\u8c61\u3002\n\u5ba2\u6237\u7aef\u4ee3\u7801\u5c06\u5176\u4e0eObservables\u7684\u6240\u6709\u4ea4\u4e92\u89c6\u4e3a\u5f02\u6b65\uff0c\u65e0\u8bba\u60a8\u7684\u5e95\u5c42\u5b9e\u73b0\u662f\u963b\u585e\u8fd8\u662f\u975e\u963b\u585e\uff0c\u5e76\u4e14\u60a8\u9009\u62e9\u5b9e\u73b0\u5b83\u3002  \u8fd9\u4e2aObservable\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f  public Observable data  getData();   \u5b83\u662f\u5426\u4e0e\u547c\u53eb\u8005\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e0a\u540c\u6b65\u5de5\u4f5c\uff1f  \u5b83\u662f\u5426\u5728\u5f02\u6b65\u7ebf\u7a0b\u4e0a\u5f02\u6b65\u5de5\u4f5c\uff1f  \u5b83\u662f\u5426\u5c06\u5176\u5de5\u4f5c\u5206\u6210\u591a\u4e2a\u53ef\u80fd\u4ee5\u4efb\u4f55\u987a\u5e8f\u5c06\u6570\u636e\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u7ebf\u7a0b\uff1f  \u5b83\u662f\u5426\u4f7f\u7528Actor\uff08\u6216\u591a\u4e2aActor\uff09\u800c\u4e0d\u662f\u7ebf\u7a0b\u6c60\uff1f  \u5b83\u662f\u5426\u4f7f\u7528\u5e26\u4e8b\u4ef6\u5faa\u73af\u7684NIO\u6765\u6267\u884c\u5f02\u6b65\u7f51\u7edc\u8bbf\u95ee\uff1f  \u5b83\u662f\u5426\u4f7f\u7528\u4e8b\u4ef6\u5faa\u73af\u5c06\u5de5\u4f5c\u7ebf\u7a0b\u4ece\u56de\u8c03\u7ebf\u7a0b\u4e2d\u5206\u79bb\u51fa\u6765\uff1f   \u4ece\u89c2\u5bdf\u8005\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u5e76\u4e0d\u91cd\u8981\uff01  \u800c\u4e14\u91cd\u8981\u7684\u662f\uff1a\u901a\u8fc7\u4f7f\u7528ReactiveX\uff0c\u60a8\u53ef\u4ee5\u7a0d\u540e\u6539\u53d8\u4e3b\u610f\uff0c\u4ece\u6839\u672c\u4e0a\u6539\u53d8Observable\u5b9e\u73b0\u7684\u57fa\u672c\u6027\u8d28\uff0c\u800c\u4e0d\u4f1a\u6253\u7834Observable\u7684\u6d88\u8d39\u8005\u3002", 
            "title": "\u89c2\u5bdf\u8005\u7684\u610f\u89c1\u8f83\u5c11"
        }, 
        {
            "location": "/ReactiveX/intro/#_5", 
            "text": "\u56de\u8c03\u901a\u8fc7\u4e0d\u5141\u8bb8\u4efb\u4f55\u4e1c\u897f\u963b\u585e\u6765\u89e3\u51b3Future.get\uff08\uff09\u8fc7\u65e9\u963b\u585e\u7684\u95ee\u9898\u3002\n\u5b83\u4eec\u81ea\u7136\u9ad8\u6548\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u54cd\u5e94\u51c6\u5907\u5c31\u7eea\u65f6\u6267\u884c\u3002  \u4f46\u662f\u4e0eFutures\u4e00\u6837\uff0c\u867d\u7136\u56de\u8c03\u5f88\u5bb9\u6613\u4e0e\u5355\u4e00\u7ea7\u522b\u7684\u5f02\u6b65\u6267\u884c\u4e00\u8d77\u4f7f\u7528\uff0c\u4f46\u662f\u5d4c\u5957\u7ec4\u5408\u4f1a\u53d8\u5f97\u7b28\u62d9\u3002", 
            "title": "\u56de\u8c03\u6709\u81ea\u5df1\u7684\u95ee\u9898"
        }, 
        {
            "location": "/ReactiveX/intro/#reactivex_1", 
            "text": "ReactiveX\u76ee\u524d\u4ee5\u5404\u79cd\u8bed\u8a00\u5b9e\u73b0\uff0c\u5176\u65b9\u5f0f\u9075\u5faa\u8fd9\u4e9b\u8bed\u8a00\u7684\u4e60\u60ef\u7528\u6cd5\uff0c\u5e76\u4e14\u5728\u5feb\u901f\u526a\u8f91\u4e2d\u6dfb\u52a0\u66f4\u591a\u8bed\u8a00\u3002", 
            "title": "ReactiveX\u662f\u4e00\u4e2a\u591a\u8bed\u8a00\u5e94\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/ReactiveX/intro/#_6", 
            "text": "ReactiveX\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u64cd\u4f5c\u7b26\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u6765\u7b5b\u9009\uff0c\u9009\u62e9\uff0c\u8f6c\u6362\uff0c\u7ec4\u5408\u548c\u7ec4\u5408\u89c2\u5bdf\u503c\u3002\n\u8fd9\u5141\u8bb8\u6709\u6548\u7684\u6267\u884c\u548c\u7ec4\u5408\u3002  \u60a8\u53ef\u4ee5\u5c06Observable\u7c7b\u89c6\u4e3a\u4e0e\u201cIterable\u201d\u7b49\u6548\u7684\u201c\u63a8\u9001\u201d\uff0c\u5373\u201c\u62c9\u201d\u3002\u4f7f\u7528Iterable\uff0c\u6d88\u8d39\u8005\u4ece\u751f\u4ea7\u8005\u548c\u7ebf\u7a0b\u5757\u4e2d\u63d0\u53d6\u503c\uff0c\u76f4\u5230\u8fd9\u4e9b\u503c\u5230\u8fbe\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u53ea\u8981\u6709\u53ef\u7528\u503c\uff0c\u751f\u4ea7\u8005\u901a\u8fc7Observable\u5c06\u503c\u63a8\u9001\u7ed9\u6d88\u8d39\u8005\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u66f4\u52a0\u7075\u6d3b\uff0c\u56e0\u4e3a\u503c\u53ef\u4ee5\u540c\u6b65\u6216\u5f02\u6b65\u5230\u8fbe\u3002  \u793a\u4f8b\u4ee3\u7801\u663e\u793a\u4e86\u5982\u4f55\u5c06\u76f8\u4f3c\u7684\u9ad8\u9636\u51fd\u6570\u5e94\u7528\u4e8eIterable\u548cObservable  \u53ef\u8fed\u4ee3  getDataFromLocalMemory () \n   . skip ( 10 ) \n   . take ( 5 ) \n   . map ({   s   -   return   s   +    transformed   }) \n   . forEach ({   println   next =     +   it   })   \u53ef\u89c2\u5bdf  getDataFromNetwork () \n   . skip ( 10 ) \n   . take ( 5 ) \n   . map ({   s   -   return   s   +    transformed   }) \n   . subscribe ({   println   onNext =     +   it   })   Observable\u7c7b\u578b\u4e3aGang of Four\u7684\u89c2\u5bdf\u8005\u6a21\u5f0f\u6dfb\u52a0\u4e86\u4e24\u4e2a\u7f3a\u5c11\u7684\u8bed\u4e49\uff0c\u4ee5\u5339\u914d\u90a3\u4e9b\u53ef\u7528\u4e8eIterable\u7c7b\u578b\u7684\u8bed\u4e49\uff1a   \u751f\u4ea7\u8005\u5411\u6d88\u8d39\u8005\u53d1\u4fe1\u53f7\u8868\u660e\u6ca1\u6709\u66f4\u591a\u6570\u636e\u53ef\u7528\u7684\u80fd\u529b\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cIterable\u4e0a\u7684foreach\u5faa\u73af\u5b8c\u6210\u5e76\u6b63\u5e38\u8fd4\u56de; Observable\u8c03\u7528\u5176\u89c2\u5bdf\u8005\u7684onCompleted\u65b9\u6cd5\uff09  \u751f\u4ea7\u8005\u5411\u6d88\u8d39\u8005\u53d1\u51fa\u9519\u8bef\u5df2\u7ecf\u53d1\u751f\u7684\u80fd\u529b\uff08\u5982\u679c\u5728\u8fed\u4ee3\u671f\u95f4\u53d1\u751f\u9519\u8bef\uff0c\u5219Iterable\u4f1a\u629b\u51fa\u5f02\u5e38; Observable\u4f1a\u8c03\u7528\u5176\u89c2\u5bdf\u8005\u7684onError\u65b9\u6cd5\uff09   \u6709\u4e86\u8fd9\u4e9b\u8865\u5145\uff0cReactiveX\u534f\u8c03\u4e86Iterable\u548cObservable\u7c7b\u578b\u3002\n\u5b83\u4eec\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u5c31\u662f\u6570\u636e\u6d41\u5411\u7684\u65b9\u5411\u3002\n\u8fd9\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u73b0\u5728\u60a8\u53ef\u4ee5\u5728Iterable\u4e0a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5728Observable\u4e0a\u6267\u884c\u64cd\u4f5c\u3002", 
            "title": "\u54cd\u5e94\u5f0f\u7a0b\u5e8f"
        }, 
        {
            "location": "/ReactiveX/Observable/", 
            "text": "\u89c2\u5bdf\u70b9\n\n\n\u5728ReactiveX\u4e2d\uff0c\u89c2\u5bdf\u8005\u8ba2\u9605\u89c2\u5bdf\u70b9\u3002\n\u7136\u540e\u8be5\u89c2\u5bdf\u8005\u5bf9\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u4efb\u4f55\u9879\u76ee\u6216\u9879\u76ee\u5e8f\u5217\u4f5c\u51fa\u53cd\u5e94\u3002\n\u8fd9\u79cd\u6a21\u5f0f\u6709\u5229\u4e8e\u5e76\u53d1\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u5728\u7b49\u5f85\u89c2\u5bdf\u70b9\u53d1\u9001\u5bf9\u8c61\u65f6\u4e0d\u9700\u8981\u963b\u585e\uff0c\u800c\u662f\u4ee5\u89c2\u5bdf\u8005\u7684\u5f62\u5f0f\u521b\u5efa\u4e00\u4e2a\u54e8\u5175\uff0c\u968f\u65f6\u51c6\u5907\u5728\u89c2\u5bdf\u70b9\u5c06\u6765\u7684\u4efb\u4f55\u65f6\u95f4\u4f5c\u51fa\u9002\u5f53\u7684\u53cd\u5e94\u3002\n\n\n\u8fd9\u4e2a\u9875\u9762\u89e3\u91ca\u4e86\u88ab\u52a8\u6a21\u5f0f\u662f\u4ec0\u4e48\u4ee5\u53ca\u89c2\u5bdf\u8005\u548c\u89c2\u5bdf\u70b9\u662f\u4ec0\u4e48\uff08\u4ee5\u53ca\u89c2\u5bdf\u8005\u5982\u4f55\u8ba2\u9605\u89c2\u5bdf\u70b9\uff09\u3002\n\u5176\u4ed6\u9875\u9762\u663e\u793a\u5982\u4f55\u4f7f\u7528\u5404\u79cd\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u5c06\u89c2\u5bdf\u70b9\u94fe\u63a5\u5728\u4e00\u8d77\u5e76\u66f4\u6539\u5176\u884c\u4e3a\u3002\n\n\n\u8fd9\u4e2a\u6587\u6863\u4f34\u968f\u7740\u201c\u5927\u7406\u77f3\u56fe\u201d\u7684\u89e3\u91ca\u3002\u4e0b\u9762\u662f\u5927\u7406\u77f3\u56fe\u4ee3\u8868\u53ef\u89c2\u5bdf\u70b9\u548c\u89c2\u5bdf\u70b9\u7684\u53d8\u6362\uff1a\n\n\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b\n\n\n\n\nSingle \u2014 \u89c2\u5bdf\u70b9\u7684\u4e00\u4e2a\u4e13\u95e8\u7248\u672c\uff0c\u53ea\u53d1\u5e03\u4e00\u4e2a\u5355\u4e00\u7684\u9879\u76ee\n\n\nRx Workshop: \u4ecb\u7ecd\n\n\nRx\u7b80\u4ecb\uff1aIObservable\n\n\n\u638c\u63e1\u89c2\u5bdf\u5bf9\u8c61\uff08\u6765\u81eaCouchbase\u670d\u52a1\u5668\u6587\u6863\uff09\n\n\nAndre Staltz\u5bf9Rx\u76842\u5206\u949f\u4ecb\u7ecd\uff08\u201c\u5c06\u4e00\u4e2a\u89c2\u5bdf\u70b9\u60f3\u8c61\u6210\u4e00\u4e2a\u5f02\u6b65\u4e0d\u53ef\u53d8\u6570\u7ec4\u201d\uff09\n\n\nJafar Husain\u4ecb\u7ecd\u89c2\u5bdf\u70b9\uff08JavaScript\u89c6\u9891\u6559\u7a0b\uff09\n\n\nDennis Stoyanov\u7684\u53ef\u89c2\u5bdf\u70b9\u4f53\uff08RxJS\uff09\n\n\n\u5c06\u56de\u8c03\u53d8\u6210@afterecho\u7684Rx \u89c2\u5bdf\u70b9\n\n\n\n\n\u80cc\u666f\n\n\n\u5728\u8bb8\u591a\u8f6f\u4ef6\u7f16\u7a0b\u4efb\u52a1\u4e2d\uff0c\u60a8\u6216\u591a\u6216\u5c11\u5730\u671f\u671b\u60a8\u7f16\u5199\u7684\u6307\u4ee4\u5c06\u6309\u7167\u60a8\u7f16\u5199\u7684\u987a\u5e8f\u9010\u4e2a\u6267\u884c\u5e76\u9010\u6b65\u5b8c\u6210\u3002\n\u4f46\u662f\u5728ReactiveX\u4e2d\uff0c\u8bb8\u591a\u6307\u4ee4\u53ef\u80fd\u4f1a\u5e76\u884c\u6267\u884c\uff0c\u5176\u7ed3\u679c\u7a0d\u540e\u4f1a\u4ee5\u201c\u89c2\u5bdf\u8005\u201d\u7684\u4efb\u610f\u987a\u5e8f\u6355\u83b7\u3002\n\u60a8\u4e0d\u662f\u8c03\u7528\u67d0\u4e2a\u65b9\u6cd5\uff0c\u800c\u662f\u4ee5\u201c\u89c2\u5bdf\u70b9\u201d\u7684\u5f62\u5f0f\u5b9a\u4e49\u4e00\u4e2a\u68c0\u7d22\u548c\u8f6c\u6362\u6570\u636e\u7684\u673a\u5236\uff0c\u7136\u540e\u8ba2\u9605\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0c\u6b64\u65f6\uff0c\u5148\u524d\u5b9a\u4e49\u7684\u673a\u5236\u89e6\u53d1\u89c2\u5bdf\u5458\u7ad9\u5c97,\u5728\u51c6\u5907\u5c31\u7eea\u65f6\u6355\u6349\u548c\u56de\u5e94\u6392\u653e\u91cf\u3002\n\n\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\uff0c\u5f53\u4f60\u6709\u5f88\u591a\u4e0d\u76f8\u4e92\u4f9d\u8d56\u7684\u4efb\u52a1\u65f6\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u542f\u52a8\u6240\u6709\u7684\u4efb\u52a1\uff0c\u800c\u4e0d\u5fc5\u7b49\u5230\u6bcf\u4e2a\u4efb\u52a1\u5b8c\u6210\u540e\u518d\u5f00\u59cb\u4e0b\u4e00\u4e2a\u4efb\u52a1 - \u8fd9\u6837\uff0c\u4f60\u7684\u6574\u4e2a\u4efb\u52a1,\u6346\u7ed1\u4efb\u52a1\u53ea\u9700\u8981\u5f88\u957f\u65f6\u95f4\u5c31\u53ef\u4ee5\u5b8c\u6210\u6346\u7ed1\u4e2d\u6700\u957f\u7684\u4efb\u52a1\u3002\n\n\n\u6709\u5f88\u591a\u672f\u8bed\u7528\u4e8e\u63cf\u8ff0\u8fd9\u79cd\u5f02\u6b65\u7f16\u7a0b\u548c\u8bbe\u8ba1\u6a21\u578b\u3002\n\u672c\u6587\u6863\u5c06\u4f7f\u7528\u4ee5\u4e0b\u672f\u8bed\uff1a\u89c2\u5bdf\u8005\u8ba2\u9605\u89c2\u5bdf\u70b9\u3002\n\u89c2\u5bdf\u70b9\u901a\u8fc7\u8c03\u7528\u89c2\u5bdf\u8005\u7684\u65b9\u6cd5\u6765\u53d1\u5c04\u9879\u76ee\u6216\u5411\u89c2\u5bdf\u8005\u53d1\u9001\u901a\u77e5\u3002\n\n\n\u5728\u5176\u4ed6\u6587\u4ef6\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u6240\u79f0\u7684\u201c\u89c2\u5bdf\u5458\u201d\u6709\u65f6\u79f0\u4e3a\u201c\u7528\u6237\u201d\uff0c\u201c\u89c2\u5bdf\u5458\u201d\u6216\u201c\u54cd\u5e94\u8005\u201d\u3002\n\u901a\u5e38\u8fd9\u79cd\u6a21\u5f0f\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u54cd\u5e94\u8005\u6a21\u5f0f\u201d\u3002\n\n\n\u5efa\u7acb\u89c2\u5bdf\u5458\n\n\n\u8be5\u9875\u9762\u4f7f\u7528\u7c7b\u4f3cGroovy\u7684\u4f2a\u4ee3\u7801\u4f5c\u4e3a\u793a\u4f8b\uff0c\u4f46\u5728\u8bb8\u591a\u8bed\u8a00\u4e2d\u90fd\u6709ReactiveX\u5b9e\u73b0\u3002\n\n\n\u5728\u666e\u901a\u7684\u65b9\u6cd5\u8c03\u7528\u4e2d - \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u662fReactiveX\u4e2d\u5178\u578b\u7684\u5f02\u6b65\u5e76\u884c\u8c03\u7528 - \u6d41\u7a0b\u5982\u4e0b\u6240\u793a\uff1a\n\n\n\n\n\u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u3002\n\n\n\u5c06\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5b58\u50a8\u5728\u4e00\u4e2a\u53d8\u91cf\u4e2d\u3002\n\n\n\u4f7f\u7528\u8be5\u53d8\u91cf\u53ca\u5176\u65b0\u503c\u6765\u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u60c5\u3002\n\n\n\n\n\u6216\u8005\uff0c\u50cf\u8fd9\u6837\u7684\u4e1c\u897f\uff1a\n\n\n// \u8fdb\u884c\u8c03\u7528\uff0c\u5c06\u5176\u8fd4\u56de\u503c\u5206\u914d\u7ed9`returnVal`\n\n\nreturnVal\n \n=\n \nsomeMethod\n(\nitsParameters\n);\n\n\n// \u7528returnVal\u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u60c5\n\n\n\n\n\n\u5728\u5f02\u6b65\u6a21\u578b\u4e2d\uff0c\u6d41\u7a0b\u66f4\u50cf\u8fd9\u6837\uff1a\n\n\n\n\n\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5bf9\u5f02\u6b65\u8c03\u7528\u7684\u8fd4\u56de\u503c\u505a\u4e00\u4e9b\u6709\u7528\u7684\u64cd\u4f5c;,\u8fd9\u4e2a\u65b9\u6cd5\u662f\u89c2\u5bdf\u8005\u7684\u4e00\u90e8\u5206\u3002\n\n\n\u5c06\u5f02\u6b65\u8c03\u7528\u672c\u8eab\u5b9a\u4e49\u4e3a\u89c2\u5bdf\u70b9\u3002\n\n\n\u901a\u8fc7\u8ba2\u9605\u5c06\u89c2\u5bdf\u8005\u9644\u52a0\u5230\u8be5\u89c2\u5bdf\u70b9\uff08\u8fd9\u4e5f\u542f\u52a8\u89c2\u5bdf\u70b9\u7684\u884c\u4e3a\uff09\u3002\n\n\n\u7ee7\u7eed\u4f60\u7684\u4e8b\u4e1a;,\u6bcf\u5f53\u8c03\u7528\u8fd4\u56de\u65f6\uff0c\u89c2\u5bdf\u8005\u7684\u65b9\u6cd5\u5c06\u5f00\u59cb\u4ee5\u5176\u8fd4\u56de\u503c\u6216\u503c\uff08\u7531\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u9879\u76ee\uff09\u8fdb\u884c\u64cd\u4f5c\u3002\n\n\n\n\n\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n\n\n// \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n\n\n// (\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u89c2\u5bdf\u8005\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u6709\u4e00\u4e2aonNext\u5904\u7406\u7a0b\u5e8f)\n\n\ndef\n \nmyOnNext\n \n=\n \n{\n \nit\n \n-\n \ndo\n \nsomething\n \nuseful\n \nwith\n \nit\n \n};\n\n\n// \u5b9a\u4e49\u4f46\u4e0d\u8c03\u7528\u89c2\u5bdf\u70b9\n\n\ndef\n \nmyObservable\n \n=\n \nsomeObservable\n(\nitsParameters\n);\n\n\n// \u8ba2\u9605\u8ba2\u6237\u5230\u89c2\u5bdf\u70b9\uff0c\u5e76\u8c03\u7528\u89c2\u5bdf\u70b9\n\n\nmyObservable\n.\nsubscribe\n(\nmyOnNext\n);\n\n\n// \u7ee7\u7eed\u5173\u4e8e\u6211\u7684\u751f\u610f\n\n\n\n\n\nonNext, onCompleted, \u548c onError\n\n\nSubscribe\u65b9\u6cd5\u662f\u60a8\u5982\u4f55\u5c06\u89c2\u5bdf\u8005\u8fde\u63a5\u5230\u89c2\u5bdf\u70b9\u3002\n\u60a8\u7684\u89c2\u5bdf\u8005\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u65b9\u6cd5\u7684\u4e00\u4e9b\u5b50\u96c6\uff1a\n\n\nonNext\n\n\n\u53ea\u8981\u89c2\u5bdf\u70b9\u53d1\u5c04\u4e00\u4e2a\u9879\u76ee\uff0c\u89c2\u5bdf\u70b9\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\u6b64\u65b9\u6cd5\u5c06\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u9879\u76ee\u4f5c\u4e3a\u53c2\u6570\u3002\n\n\nonError\n\n\n\u89c2\u5bdf\u70b9\u8c03\u7528\u6b64\u65b9\u6cd5\u6765\u6307\u793a\u5b83\u672a\u80fd\u751f\u6210\u9884\u671f\u6570\u636e\u6216\u9047\u5230\u5176\u4ed6\u4e00\u4e9b\u9519\u8bef\u3002\n\u5b83\u4e0d\u4f1a\u8fdb\u4e00\u6b65\u8c03\u7528onNext\u6216onCompleted\u3002\nonError\u65b9\u6cd5\u4ee5\u5176\u53c2\u6570\u4f5c\u4e3a\u5bfc\u81f4\u9519\u8bef\u7684\u6307\u793a\u3002\n\n\nonCompleted\n\n\n\u5982\u679c\u89c2\u5bdf\u70b9\u6ca1\u6709\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u5b83\u4f1a\u5728\u6700\u540e\u4e00\u6b21\u8c03\u7528onNext\u4e4b\u540e\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n\u6839\u636e\u89c2\u5bdf\u70b9\u5951\u7ea6\u7684\u6761\u6b3e\uff0c\u5b83\u53ef\u80fd\u4f1a\u8c03\u7528onNext\u96f6\u6b21\u6216\u591a\u6b21\uff0c\u7136\u540e\u53ef\u80fd\u4f1a\u901a\u8fc7\u8c03\u7528onCompleted\u6216onError\u800c\u4e0d\u662f\u4e24\u6b21\uff0c\u8fd9\u5c06\u662f\u5b83\u7684\u6700\u540e\u4e00\u6b21\u8c03\u7528\u3002\n\u6309\u7167\u60ef\u4f8b\uff0c\u5728\u672c\u6587\u6863\u4e2d\uff0c\u5bf9onNext\u7684\u8c03\u7528\u901a\u5e38\u79f0\u4e3a\u9879\u76ee\u7684\u201c\u6392\u653e\u201d\uff0c\u800c\u5bf9onCompleted\u6216onError\u7684\u8c03\u7528\u79f0\u4e3a\u201c\u901a\u77e5\u201d\u3002\n\n\n\u66f4\u5b8c\u6574\u7684\u8ba2\u9605\u8c03\u7528\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a\n\n\ndef\n \nmyOnNext\n     \n=\n \n{\n \nitem\n \n-\n \n/* do something useful with item */\n \n};\n\n\ndef\n \nmyError\n      \n=\n \n{\n \nthrowable\n \n-\n \n/* react sensibly to a failed call */\n \n};\n\n\ndef\n \nmyComplete\n   \n=\n \n{\n \n/* clean up after the final response */\n \n};\n\n\ndef\n \nmyObservable\n \n=\n \nsomeMethod\n(\nitsParameters\n);\n\n\nmyObservable\n.\nsubscribe\n(\nmyOnNext\n,\n \nmyError\n,\n \nmyComplete\n);\n\n\n// go on about my business\n\n\n\n\n\n\u53e6\u8bf7\u53c2\u89c1Rx\uff1aIObserver\u7b80\u4ecb\n\n\n\u9000\u8ba2\n\n\n\u5728\u4e00\u4e9bReactiveX\u5b9e\u73b0\u4e2d\uff0c\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u89c2\u5bdf\u200b\u200b\u8005\u63a5\u53e3Subscriber\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53d6\u6d88\u8ba2\u9605\u65b9\u6cd5\u3002\n\u60a8\u53ef\u4ee5\u8c03\u7528\u6b64\u65b9\u6cd5\u6765\u6307\u793a\u8ba2\u9605\u8005\u4e0d\u518d\u5bf9\u5176\u5f53\u524d\u8ba2\u9605\u7684\u4efb\u4f55\u89c2\u5bdf\u5bf9\u8c61\u611f\u5174\u8da3\u3002\n\u90a3\u4e9b\u89c2\u5bdf\u8005\u53ef\u4ee5\uff08\u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u5176\u4ed6\u611f\u5174\u8da3\u7684\u89c2\u5bdf\u8005\uff09\u9009\u62e9\u505c\u6b62\u4ea7\u751f\u65b0\u7684\u9879\u76ee\u53d1\u5c04\u3002\n\n\n\u8fd9\u4e2a\u53d6\u6d88\u8ba2\u9605\u7684\u7ed3\u679c\u5c06\u901a\u8fc7\u9002\u7528\u4e8e\u89c2\u5bdf\u8005\u8ba2\u9605\u7684\u89c2\u5bdf\u70b9\u7684\u64cd\u4f5c\u7b26\u94fe\u7ea7\u8054\u56de\u6765\uff0c\u8fd9\u5c06\u5bfc\u81f4\u94fe\u4e2d\u7684\u6bcf\u4e2a\u94fe\u63a5\u505c\u6b62\u53d1\u9001\u9879\u76ee\u3002\n\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u7acb\u5373\u53d1\u751f\uff0c\u5373\u4f7f\u5728\u6ca1\u6709\u89c2\u5bdf\u8005\u7559\u4e0b\u6765\u89c2\u5bdf\u8fd9\u4e9b\u6392\u653e\u7684\u60c5\u51b5\u4e0b\uff0c\u89c2\u5bdf\u70b9\u4e5f\u6709\u53ef\u80fd\u4ea7\u751f\u5e76\u5c1d\u8bd5\u6392\u653e\u7269\u54c1\u3002\n\n\n\u5173\u4e8e\u547d\u540d\u7ea6\u5b9a\u7684\u4e00\u4e9b\u6ce8\u8bb0\n\n\nReactiveX\u7684\u6bcf\u4e2a\u8bed\u8a00\u7279\u5b9a\u5b9e\u73b0\u90fd\u6709\u5176\u81ea\u5df1\u7684\u547d\u540d\u602a\u7656\u3002\n\u6ca1\u6709\u89c4\u8303\u7684\u547d\u540d\u6807\u51c6\uff0c\u4f46\u5b9e\u73b0\u4e4b\u95f4\u6709\u8bb8\u591a\u5171\u540c\u4e4b\u5904\u3002\n\n\n\u6b64\u5916\uff0c\u5176\u4e2d\u4e00\u4e9b\u540d\u79f0\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u5177\u6709\u4e0d\u540c\u542b\u4e49\uff0c\u6216\u8005\u5728\u67d0\u79cd\u7279\u5b9a\u5b9e\u65bd\u8bed\u8a00\u7684\u4e60\u60ef\u7528\u8bed\u4e2d\u770b\u8d77\u6765\u5f88\u5c34\u5c2c\u3002\n\n\n\u4f8b\u5982\uff0c\u6709onEvent\u547d\u540d\u6a21\u5f0f\uff08\u4f8b\u5982onNext\uff0conCompleted\uff0conError\uff09\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u540d\u79f0\u5c06\u6307\u793a\u901a\u8fc7\u54ea\u4e9b\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u6ce8\u518c\u7684\u65b9\u6cd5\u3002\n\u4f46\u662f\uff0c\u5728ReactiveX\u4e2d\uff0c\u5b83\u4eec\u81ea\u5df1\u547d\u540d\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002\n\n\n\u201c\u70ed\u201d\u548c\u201c\u51b7\u201d\u89c2\u5bdf\u7269\n\n\n\u89c2\u5bdf\u70b9\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u53d1\u5c04\u5b83\u7684\u5e8f\u5217\uff1f,\u8fd9\u53d6\u51b3\u4e8e\u89c2\u5bdf\u70b9\u3002\n\u4e00\u4e2a\u201c\u70ed\u201d\u89c2\u5bdf\u70b9\u53ef\u80fd\u4f1a\u5728\u5b83\u521b\u5efa\u540e\u7acb\u5373\u5f00\u59cb\u53d1\u5e03\uff0c\u56e0\u6b64\u4efb\u4f55\u7a0d\u540e\u8ba2\u9605\u8be5\u89c2\u5bdf\u70b9\u7684\u89c2\u5bdf\u8005\u90fd\u53ef\u80fd\u5f00\u59cb\u89c2\u5bdf\u4e2d\u95f4\u67d0\u5904\u7684\u5e8f\u5217\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u201c\u51b7\u201d\u89c2\u5bdf\u8005\u7b49\u5f85\u89c2\u5bdf\u8005\u5728\u5f00\u59cb\u53d1\u5c04\u7269\u54c1\u4e4b\u524d\u8ba2\u9605\u5b83\uff0c\u56e0\u6b64\u8fd9\u6837\u7684\u89c2\u5bdf\u8005\u4fdd\u8bc1\u4ece\u5934\u770b\u5230\u6574\u4e2a\u5e8f\u5217\u3002\n\n\n\u5728ReactiveX\u7684\u4e00\u4e9b\u5b9e\u73b0\u4e2d\uff0c\u8fd8\u6709\u4e00\u4e9b\u79f0\u4e3a\u201c\u53ef\u8fde\u63a5\u201d\u89c2\u5bdf\u70b9\u7684\u4e1c\u897f\u3002\n\u8fd9\u6837\u4e00\u4e2a\u89c2\u5bdf\u70b9\u4e0d\u4f1a\u5f00\u59cb\u53d1\u5c04\u9879\u76ee\uff0c\u76f4\u5230\u5b83\u7684Connect\u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u65e0\u8bba\u89c2\u5bdf\u8005\u662f\u5426\u8ba2\u9605\u4e86\u5b83\u3002\n\n\n\u901a\u8fc7\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u7ec4\u5408\n\n\n\u89c2\u5bdf\u8005\u548c\u89c2\u5bdf\u8005\u53ea\u662fReactiveX\u7684\u5f00\u59cb\u3002\n\u5b83\u4eec\u672c\u8eab\u53ea\u4e0d\u8fc7\u662f\u6807\u51c6\u89c2\u5bdf\u8005\u6a21\u5f0f\u7684\u8f7b\u5fae\u6269\u5c55\uff0c\u66f4\u9002\u5408\u5904\u7406\u4e00\u7cfb\u5217\u4e8b\u4ef6\u800c\u4e0d\u662f\u5355\u4e2a\u56de\u8c03\u3002\n\n\n\u771f\u6b63\u7684\u529b\u91cf\u6765\u81ea\u201c\u53cd\u5e94\u6027\u6269\u5c55\u201d\uff08\u56e0\u6b64\u79f0\u4e3a\u201cReactiveX\u201d\uff09 - \u5141\u8bb8\u60a8\u8f6c\u6362\uff0c\u7ec4\u5408\uff0c\u64cd\u4f5c\u548c\u4f7f\u7528\u89c2\u5bdf\u70b9\u53d1\u5c04\u7684\u7269\u54c1\u5e8f\u5217\u7684\u64cd\u4f5c\u7b26\u3002\n\n\n\u8fd9\u4e9bRx\u64cd\u4f5c\u7b26\u5141\u8bb8\u60a8\u4ee5\u58f0\u660e\u65b9\u5f0f\u4e00\u8d77\u7ec4\u5408\u5f02\u6b65\u5e8f\u5217\uff0c\u5e76\u5177\u6709\u56de\u8c03\u7684\u6240\u6709\u6548\u7387\u4f18\u52bf\uff0c\u4f46\u6ca1\u6709\u901a\u5e38\u4e0e\u5f02\u6b65\u7cfb\u7edf\u5173\u8054\u7684\u5d4c\u5957\u56de\u8c03\u5904\u7406\u7a0b\u5e8f\u7684\u7f3a\u70b9\u3002\n\n\n\u672c\u6587\u6863\u5c06\u6709\u5173\u5404\u79cd\u64cd\u4f5c\u7b26\u7684\u4fe1\u606f\u53ca\u5176\u4f7f\u7528\u793a\u4f8b\u5206\u7ec4\u5230\u4ee5\u4e0b\u9875\u9762\u4e2d\uff1a\n\n\n\u521b\u5efa\u89c2\u5bdf\u70b9\n\n\nCreate, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, and Timer\n\n\n\u8f6c\u6362\u89c2\u5bdf\u70b9\u9879\u76ee\n\n\nBuffer, FlatMap, GroupBy, Map, Scan, and Window\n\n\n\u8fc7\u6ee4\u89c2\u5bdf\u70b9\n\n\nDebounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, and TakeLast\n\n\n\u805a\u5408\u89c2\u5bdf\u70b9\n\n\nAnd/Then/When, CombineLatest, Join, Merge, StartWith, Switch, and Zip\n\n\n\u9519\u8bef\u5904\u7406\u64cd\u4f5c\u7b26\n\n\nCatch and Retry\n\n\n\u6548\u7528\u64cd\u4f5c\u7b26\n\n\nDelay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, and Using\n\n\n\u6761\u4ef6\u548c\u5e03\u5c14\u64cd\u4f5c\u7b26\n\n\nAll, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, and TakeWhile\n\n\n\u6570\u5b66\u4e0e\u96c6\u5408\u8fd0\u7b97\n\n\nAverage, Concat, Count, Max, Min, Reduce, and Sum\n\n\n\u8f6c\u6362\u89c2\u5bdf\u503c\n\n\nTo\n\n\n\u53ef\u8fde\u63a5\u7684\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\n\n\nConnect, Publish, RefCount, and Replay\n\n\n\u80cc\u538b\u64cd\u4f5c\u5458\n\n\n\u5404\u79cd\u6267\u884c\u7279\u5b9a\u6d41\u91cf\u63a7\u5236\u7b56\u7565\u7684\u64cd\u4f5c\u7b26\n\n\n\u8fd9\u4e9b\u9875\u9762\u5305\u542b\u6709\u5173\u4e00\u4e9b\u64cd\u4f5c\u7b26\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u4e0d\u5c5e\u4e8eReactiveX\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u8bed\u8a00\u7279\u5b9a\u7684\u5b9e\u73b0\u548c/\u6216\u53ef\u9009\u6a21\u5757\u4e2d\u5b9e\u73b0\u3002\n\n\n\u64cd\u4f5c\u94fe\n\n\n\u5927\u591a\u6570\u64cd\u4f5c\u5458\u4f7f\u7528\u89c2\u5bdf\u70b9\u8fdb\u884c\u64cd\u4f5c\u5e76\u8fd4\u56de\u89c2\u5bdf\u70b9\u3002\n\u8fd9\u5141\u8bb8\u60a8\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5e94\u7528\u5728\u4e00\u4e2a\u94fe\u4e2d\u3002\n\u94fe\u4e2d\u7684\u6bcf\u4e2a\u64cd\u4f5c\u7b26\u90fd\u4f1a\u4fee\u6539\u7531\u524d\u4e00\u4e2a\u64cd\u4f5c\u7b26\u7684\u64cd\u4f5c\u5bfc\u81f4\u7684\u89c2\u5bdf\u70b9\u3002\n\n\n\u8fd8\u6709\u5176\u4ed6\u6a21\u5f0f\uff0c\u6bd4\u5982Builder\u6a21\u5f0f\uff0c\u5176\u4e2d\u4e00\u4e2a\u7279\u5b9a\u7c7b\u7684\u5404\u79cd\u65b9\u6cd5\u901a\u8fc7\u5bf9\u8be5\u65b9\u6cd5\u7684\u64cd\u4f5c\u4fee\u6539\u8be5\u5bf9\u8c61\u6765\u64cd\u4f5c\u8be5\u7c7b\u7684\u4e00\u4e2a\u9879\u76ee\u3002\n\u8fd9\u4e9b\u6a21\u5f0f\u8fd8\u5141\u8bb8\u60a8\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u94fe\u63a5\u65b9\u6cd5\u3002\n\u4f46\u662f\u5728Builder\u6a21\u5f0f\u4e2d\uff0c\u94fe\u4e2d\u65b9\u6cd5\u51fa\u73b0\u7684\u987a\u5e8f\u901a\u5e38\u5e76\u4e0d\u91cd\u8981\uff0c\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u6392\u5e8f\u5f88\u91cd\u8981\u3002\n\n\n\u4e00\u8fde\u4e32\u7684\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u5e76\u4e0d\u72ec\u7acb\u4e8e\u6e90\u81ea\u94fe\u7684\u539f\u59cb\u89c2\u5bdf\u70b9\uff0c\u800c\u662f\u4f9d\u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u4f9d\u8d56\u4e8e\u94fe\u4e2d\u524d\u4e00\u4e2a\u64cd\u4f5c\u7b26\u751f\u6210\u7684\u89c2\u5bdf\u70b9", 
            "title": "Observable(\u89c2\u5bdf\u70b9)"
        }, 
        {
            "location": "/ReactiveX/Observable/#_1", 
            "text": "\u5728ReactiveX\u4e2d\uff0c\u89c2\u5bdf\u8005\u8ba2\u9605\u89c2\u5bdf\u70b9\u3002\n\u7136\u540e\u8be5\u89c2\u5bdf\u8005\u5bf9\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u4efb\u4f55\u9879\u76ee\u6216\u9879\u76ee\u5e8f\u5217\u4f5c\u51fa\u53cd\u5e94\u3002\n\u8fd9\u79cd\u6a21\u5f0f\u6709\u5229\u4e8e\u5e76\u53d1\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u5728\u7b49\u5f85\u89c2\u5bdf\u70b9\u53d1\u9001\u5bf9\u8c61\u65f6\u4e0d\u9700\u8981\u963b\u585e\uff0c\u800c\u662f\u4ee5\u89c2\u5bdf\u8005\u7684\u5f62\u5f0f\u521b\u5efa\u4e00\u4e2a\u54e8\u5175\uff0c\u968f\u65f6\u51c6\u5907\u5728\u89c2\u5bdf\u70b9\u5c06\u6765\u7684\u4efb\u4f55\u65f6\u95f4\u4f5c\u51fa\u9002\u5f53\u7684\u53cd\u5e94\u3002  \u8fd9\u4e2a\u9875\u9762\u89e3\u91ca\u4e86\u88ab\u52a8\u6a21\u5f0f\u662f\u4ec0\u4e48\u4ee5\u53ca\u89c2\u5bdf\u8005\u548c\u89c2\u5bdf\u70b9\u662f\u4ec0\u4e48\uff08\u4ee5\u53ca\u89c2\u5bdf\u8005\u5982\u4f55\u8ba2\u9605\u89c2\u5bdf\u70b9\uff09\u3002\n\u5176\u4ed6\u9875\u9762\u663e\u793a\u5982\u4f55\u4f7f\u7528\u5404\u79cd\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u5c06\u89c2\u5bdf\u70b9\u94fe\u63a5\u5728\u4e00\u8d77\u5e76\u66f4\u6539\u5176\u884c\u4e3a\u3002  \u8fd9\u4e2a\u6587\u6863\u4f34\u968f\u7740\u201c\u5927\u7406\u77f3\u56fe\u201d\u7684\u89e3\u91ca\u3002\u4e0b\u9762\u662f\u5927\u7406\u77f3\u56fe\u4ee3\u8868\u53ef\u89c2\u5bdf\u70b9\u548c\u89c2\u5bdf\u70b9\u7684\u53d8\u6362\uff1a   \u4e5f\u53ef\u4ee5\u770b\u770b   Single \u2014 \u89c2\u5bdf\u70b9\u7684\u4e00\u4e2a\u4e13\u95e8\u7248\u672c\uff0c\u53ea\u53d1\u5e03\u4e00\u4e2a\u5355\u4e00\u7684\u9879\u76ee  Rx Workshop: \u4ecb\u7ecd  Rx\u7b80\u4ecb\uff1aIObservable  \u638c\u63e1\u89c2\u5bdf\u5bf9\u8c61\uff08\u6765\u81eaCouchbase\u670d\u52a1\u5668\u6587\u6863\uff09  Andre Staltz\u5bf9Rx\u76842\u5206\u949f\u4ecb\u7ecd\uff08\u201c\u5c06\u4e00\u4e2a\u89c2\u5bdf\u70b9\u60f3\u8c61\u6210\u4e00\u4e2a\u5f02\u6b65\u4e0d\u53ef\u53d8\u6570\u7ec4\u201d\uff09  Jafar Husain\u4ecb\u7ecd\u89c2\u5bdf\u70b9\uff08JavaScript\u89c6\u9891\u6559\u7a0b\uff09  Dennis Stoyanov\u7684\u53ef\u89c2\u5bdf\u70b9\u4f53\uff08RxJS\uff09  \u5c06\u56de\u8c03\u53d8\u6210@afterecho\u7684Rx \u89c2\u5bdf\u70b9", 
            "title": "\u89c2\u5bdf\u70b9"
        }, 
        {
            "location": "/ReactiveX/Observable/#_2", 
            "text": "\u5728\u8bb8\u591a\u8f6f\u4ef6\u7f16\u7a0b\u4efb\u52a1\u4e2d\uff0c\u60a8\u6216\u591a\u6216\u5c11\u5730\u671f\u671b\u60a8\u7f16\u5199\u7684\u6307\u4ee4\u5c06\u6309\u7167\u60a8\u7f16\u5199\u7684\u987a\u5e8f\u9010\u4e2a\u6267\u884c\u5e76\u9010\u6b65\u5b8c\u6210\u3002\n\u4f46\u662f\u5728ReactiveX\u4e2d\uff0c\u8bb8\u591a\u6307\u4ee4\u53ef\u80fd\u4f1a\u5e76\u884c\u6267\u884c\uff0c\u5176\u7ed3\u679c\u7a0d\u540e\u4f1a\u4ee5\u201c\u89c2\u5bdf\u8005\u201d\u7684\u4efb\u610f\u987a\u5e8f\u6355\u83b7\u3002\n\u60a8\u4e0d\u662f\u8c03\u7528\u67d0\u4e2a\u65b9\u6cd5\uff0c\u800c\u662f\u4ee5\u201c\u89c2\u5bdf\u70b9\u201d\u7684\u5f62\u5f0f\u5b9a\u4e49\u4e00\u4e2a\u68c0\u7d22\u548c\u8f6c\u6362\u6570\u636e\u7684\u673a\u5236\uff0c\u7136\u540e\u8ba2\u9605\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0c\u6b64\u65f6\uff0c\u5148\u524d\u5b9a\u4e49\u7684\u673a\u5236\u89e6\u53d1\u89c2\u5bdf\u5458\u7ad9\u5c97,\u5728\u51c6\u5907\u5c31\u7eea\u65f6\u6355\u6349\u548c\u56de\u5e94\u6392\u653e\u91cf\u3002  \u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u4f18\u70b9\u662f\uff0c\u5f53\u4f60\u6709\u5f88\u591a\u4e0d\u76f8\u4e92\u4f9d\u8d56\u7684\u4efb\u52a1\u65f6\uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u542f\u52a8\u6240\u6709\u7684\u4efb\u52a1\uff0c\u800c\u4e0d\u5fc5\u7b49\u5230\u6bcf\u4e2a\u4efb\u52a1\u5b8c\u6210\u540e\u518d\u5f00\u59cb\u4e0b\u4e00\u4e2a\u4efb\u52a1 - \u8fd9\u6837\uff0c\u4f60\u7684\u6574\u4e2a\u4efb\u52a1,\u6346\u7ed1\u4efb\u52a1\u53ea\u9700\u8981\u5f88\u957f\u65f6\u95f4\u5c31\u53ef\u4ee5\u5b8c\u6210\u6346\u7ed1\u4e2d\u6700\u957f\u7684\u4efb\u52a1\u3002  \u6709\u5f88\u591a\u672f\u8bed\u7528\u4e8e\u63cf\u8ff0\u8fd9\u79cd\u5f02\u6b65\u7f16\u7a0b\u548c\u8bbe\u8ba1\u6a21\u578b\u3002\n\u672c\u6587\u6863\u5c06\u4f7f\u7528\u4ee5\u4e0b\u672f\u8bed\uff1a\u89c2\u5bdf\u8005\u8ba2\u9605\u89c2\u5bdf\u70b9\u3002\n\u89c2\u5bdf\u70b9\u901a\u8fc7\u8c03\u7528\u89c2\u5bdf\u8005\u7684\u65b9\u6cd5\u6765\u53d1\u5c04\u9879\u76ee\u6216\u5411\u89c2\u5bdf\u8005\u53d1\u9001\u901a\u77e5\u3002  \u5728\u5176\u4ed6\u6587\u4ef6\u548c\u5176\u4ed6\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u6240\u79f0\u7684\u201c\u89c2\u5bdf\u5458\u201d\u6709\u65f6\u79f0\u4e3a\u201c\u7528\u6237\u201d\uff0c\u201c\u89c2\u5bdf\u5458\u201d\u6216\u201c\u54cd\u5e94\u8005\u201d\u3002\n\u901a\u5e38\u8fd9\u79cd\u6a21\u5f0f\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u54cd\u5e94\u8005\u6a21\u5f0f\u201d\u3002", 
            "title": "\u80cc\u666f"
        }, 
        {
            "location": "/ReactiveX/Observable/#_3", 
            "text": "\u8be5\u9875\u9762\u4f7f\u7528\u7c7b\u4f3cGroovy\u7684\u4f2a\u4ee3\u7801\u4f5c\u4e3a\u793a\u4f8b\uff0c\u4f46\u5728\u8bb8\u591a\u8bed\u8a00\u4e2d\u90fd\u6709ReactiveX\u5b9e\u73b0\u3002  \u5728\u666e\u901a\u7684\u65b9\u6cd5\u8c03\u7528\u4e2d - \u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u662fReactiveX\u4e2d\u5178\u578b\u7684\u5f02\u6b65\u5e76\u884c\u8c03\u7528 - \u6d41\u7a0b\u5982\u4e0b\u6240\u793a\uff1a   \u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u3002  \u5c06\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u5b58\u50a8\u5728\u4e00\u4e2a\u53d8\u91cf\u4e2d\u3002  \u4f7f\u7528\u8be5\u53d8\u91cf\u53ca\u5176\u65b0\u503c\u6765\u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u60c5\u3002   \u6216\u8005\uff0c\u50cf\u8fd9\u6837\u7684\u4e1c\u897f\uff1a  // \u8fdb\u884c\u8c03\u7528\uff0c\u5c06\u5176\u8fd4\u56de\u503c\u5206\u914d\u7ed9`returnVal`  returnVal   =   someMethod ( itsParameters );  // \u7528returnVal\u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u60c5   \u5728\u5f02\u6b65\u6a21\u578b\u4e2d\uff0c\u6d41\u7a0b\u66f4\u50cf\u8fd9\u6837\uff1a   \u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5bf9\u5f02\u6b65\u8c03\u7528\u7684\u8fd4\u56de\u503c\u505a\u4e00\u4e9b\u6709\u7528\u7684\u64cd\u4f5c;,\u8fd9\u4e2a\u65b9\u6cd5\u662f\u89c2\u5bdf\u8005\u7684\u4e00\u90e8\u5206\u3002  \u5c06\u5f02\u6b65\u8c03\u7528\u672c\u8eab\u5b9a\u4e49\u4e3a\u89c2\u5bdf\u70b9\u3002  \u901a\u8fc7\u8ba2\u9605\u5c06\u89c2\u5bdf\u8005\u9644\u52a0\u5230\u8be5\u89c2\u5bdf\u70b9\uff08\u8fd9\u4e5f\u542f\u52a8\u89c2\u5bdf\u70b9\u7684\u884c\u4e3a\uff09\u3002  \u7ee7\u7eed\u4f60\u7684\u4e8b\u4e1a;,\u6bcf\u5f53\u8c03\u7528\u8fd4\u56de\u65f6\uff0c\u89c2\u5bdf\u8005\u7684\u65b9\u6cd5\u5c06\u5f00\u59cb\u4ee5\u5176\u8fd4\u56de\u503c\u6216\u503c\uff08\u7531\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u9879\u76ee\uff09\u8fdb\u884c\u64cd\u4f5c\u3002   \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a  // \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a  // (\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u89c2\u5bdf\u8005\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u6709\u4e00\u4e2aonNext\u5904\u7406\u7a0b\u5e8f)  def   myOnNext   =   {   it   -   do   something   useful   with   it   };  // \u5b9a\u4e49\u4f46\u4e0d\u8c03\u7528\u89c2\u5bdf\u70b9  def   myObservable   =   someObservable ( itsParameters );  // \u8ba2\u9605\u8ba2\u6237\u5230\u89c2\u5bdf\u70b9\uff0c\u5e76\u8c03\u7528\u89c2\u5bdf\u70b9  myObservable . subscribe ( myOnNext );  // \u7ee7\u7eed\u5173\u4e8e\u6211\u7684\u751f\u610f", 
            "title": "\u5efa\u7acb\u89c2\u5bdf\u5458"
        }, 
        {
            "location": "/ReactiveX/Observable/#onnext-oncompleted-onerror", 
            "text": "Subscribe\u65b9\u6cd5\u662f\u60a8\u5982\u4f55\u5c06\u89c2\u5bdf\u8005\u8fde\u63a5\u5230\u89c2\u5bdf\u70b9\u3002\n\u60a8\u7684\u89c2\u5bdf\u8005\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u65b9\u6cd5\u7684\u4e00\u4e9b\u5b50\u96c6\uff1a  onNext  \u53ea\u8981\u89c2\u5bdf\u70b9\u53d1\u5c04\u4e00\u4e2a\u9879\u76ee\uff0c\u89c2\u5bdf\u70b9\u5c31\u4f1a\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002\n\u6b64\u65b9\u6cd5\u5c06\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u9879\u76ee\u4f5c\u4e3a\u53c2\u6570\u3002  onError  \u89c2\u5bdf\u70b9\u8c03\u7528\u6b64\u65b9\u6cd5\u6765\u6307\u793a\u5b83\u672a\u80fd\u751f\u6210\u9884\u671f\u6570\u636e\u6216\u9047\u5230\u5176\u4ed6\u4e00\u4e9b\u9519\u8bef\u3002\n\u5b83\u4e0d\u4f1a\u8fdb\u4e00\u6b65\u8c03\u7528onNext\u6216onCompleted\u3002\nonError\u65b9\u6cd5\u4ee5\u5176\u53c2\u6570\u4f5c\u4e3a\u5bfc\u81f4\u9519\u8bef\u7684\u6307\u793a\u3002  onCompleted  \u5982\u679c\u89c2\u5bdf\u70b9\u6ca1\u6709\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u5b83\u4f1a\u5728\u6700\u540e\u4e00\u6b21\u8c03\u7528onNext\u4e4b\u540e\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\n\u6839\u636e\u89c2\u5bdf\u70b9\u5951\u7ea6\u7684\u6761\u6b3e\uff0c\u5b83\u53ef\u80fd\u4f1a\u8c03\u7528onNext\u96f6\u6b21\u6216\u591a\u6b21\uff0c\u7136\u540e\u53ef\u80fd\u4f1a\u901a\u8fc7\u8c03\u7528onCompleted\u6216onError\u800c\u4e0d\u662f\u4e24\u6b21\uff0c\u8fd9\u5c06\u662f\u5b83\u7684\u6700\u540e\u4e00\u6b21\u8c03\u7528\u3002\n\u6309\u7167\u60ef\u4f8b\uff0c\u5728\u672c\u6587\u6863\u4e2d\uff0c\u5bf9onNext\u7684\u8c03\u7528\u901a\u5e38\u79f0\u4e3a\u9879\u76ee\u7684\u201c\u6392\u653e\u201d\uff0c\u800c\u5bf9onCompleted\u6216onError\u7684\u8c03\u7528\u79f0\u4e3a\u201c\u901a\u77e5\u201d\u3002  \u66f4\u5b8c\u6574\u7684\u8ba2\u9605\u8c03\u7528\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a  def   myOnNext       =   {   item   -   /* do something useful with item */   };  def   myError        =   {   throwable   -   /* react sensibly to a failed call */   };  def   myComplete     =   {   /* clean up after the final response */   };  def   myObservable   =   someMethod ( itsParameters );  myObservable . subscribe ( myOnNext ,   myError ,   myComplete );  // go on about my business   \u53e6\u8bf7\u53c2\u89c1Rx\uff1aIObserver\u7b80\u4ecb", 
            "title": "onNext, onCompleted, \u548c onError"
        }, 
        {
            "location": "/ReactiveX/Observable/#_4", 
            "text": "\u5728\u4e00\u4e9bReactiveX\u5b9e\u73b0\u4e2d\uff0c\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u89c2\u5bdf\u200b\u200b\u8005\u63a5\u53e3Subscriber\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53d6\u6d88\u8ba2\u9605\u65b9\u6cd5\u3002\n\u60a8\u53ef\u4ee5\u8c03\u7528\u6b64\u65b9\u6cd5\u6765\u6307\u793a\u8ba2\u9605\u8005\u4e0d\u518d\u5bf9\u5176\u5f53\u524d\u8ba2\u9605\u7684\u4efb\u4f55\u89c2\u5bdf\u5bf9\u8c61\u611f\u5174\u8da3\u3002\n\u90a3\u4e9b\u89c2\u5bdf\u8005\u53ef\u4ee5\uff08\u5982\u679c\u4ed6\u4eec\u6ca1\u6709\u5176\u4ed6\u611f\u5174\u8da3\u7684\u89c2\u5bdf\u8005\uff09\u9009\u62e9\u505c\u6b62\u4ea7\u751f\u65b0\u7684\u9879\u76ee\u53d1\u5c04\u3002  \u8fd9\u4e2a\u53d6\u6d88\u8ba2\u9605\u7684\u7ed3\u679c\u5c06\u901a\u8fc7\u9002\u7528\u4e8e\u89c2\u5bdf\u8005\u8ba2\u9605\u7684\u89c2\u5bdf\u70b9\u7684\u64cd\u4f5c\u7b26\u94fe\u7ea7\u8054\u56de\u6765\uff0c\u8fd9\u5c06\u5bfc\u81f4\u94fe\u4e2d\u7684\u6bcf\u4e2a\u94fe\u63a5\u505c\u6b62\u53d1\u9001\u9879\u76ee\u3002\n\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u7acb\u5373\u53d1\u751f\uff0c\u5373\u4f7f\u5728\u6ca1\u6709\u89c2\u5bdf\u8005\u7559\u4e0b\u6765\u89c2\u5bdf\u8fd9\u4e9b\u6392\u653e\u7684\u60c5\u51b5\u4e0b\uff0c\u89c2\u5bdf\u70b9\u4e5f\u6709\u53ef\u80fd\u4ea7\u751f\u5e76\u5c1d\u8bd5\u6392\u653e\u7269\u54c1\u3002", 
            "title": "\u9000\u8ba2"
        }, 
        {
            "location": "/ReactiveX/Observable/#_5", 
            "text": "ReactiveX\u7684\u6bcf\u4e2a\u8bed\u8a00\u7279\u5b9a\u5b9e\u73b0\u90fd\u6709\u5176\u81ea\u5df1\u7684\u547d\u540d\u602a\u7656\u3002\n\u6ca1\u6709\u89c4\u8303\u7684\u547d\u540d\u6807\u51c6\uff0c\u4f46\u5b9e\u73b0\u4e4b\u95f4\u6709\u8bb8\u591a\u5171\u540c\u4e4b\u5904\u3002  \u6b64\u5916\uff0c\u5176\u4e2d\u4e00\u4e9b\u540d\u79f0\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u5177\u6709\u4e0d\u540c\u542b\u4e49\uff0c\u6216\u8005\u5728\u67d0\u79cd\u7279\u5b9a\u5b9e\u65bd\u8bed\u8a00\u7684\u4e60\u60ef\u7528\u8bed\u4e2d\u770b\u8d77\u6765\u5f88\u5c34\u5c2c\u3002  \u4f8b\u5982\uff0c\u6709onEvent\u547d\u540d\u6a21\u5f0f\uff08\u4f8b\u5982onNext\uff0conCompleted\uff0conError\uff09\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u540d\u79f0\u5c06\u6307\u793a\u901a\u8fc7\u54ea\u4e9b\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u6ce8\u518c\u7684\u65b9\u6cd5\u3002\n\u4f46\u662f\uff0c\u5728ReactiveX\u4e2d\uff0c\u5b83\u4eec\u81ea\u5df1\u547d\u540d\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002", 
            "title": "\u5173\u4e8e\u547d\u540d\u7ea6\u5b9a\u7684\u4e00\u4e9b\u6ce8\u8bb0"
        }, 
        {
            "location": "/ReactiveX/Observable/#_6", 
            "text": "\u89c2\u5bdf\u70b9\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u53d1\u5c04\u5b83\u7684\u5e8f\u5217\uff1f,\u8fd9\u53d6\u51b3\u4e8e\u89c2\u5bdf\u70b9\u3002\n\u4e00\u4e2a\u201c\u70ed\u201d\u89c2\u5bdf\u70b9\u53ef\u80fd\u4f1a\u5728\u5b83\u521b\u5efa\u540e\u7acb\u5373\u5f00\u59cb\u53d1\u5e03\uff0c\u56e0\u6b64\u4efb\u4f55\u7a0d\u540e\u8ba2\u9605\u8be5\u89c2\u5bdf\u70b9\u7684\u89c2\u5bdf\u8005\u90fd\u53ef\u80fd\u5f00\u59cb\u89c2\u5bdf\u4e2d\u95f4\u67d0\u5904\u7684\u5e8f\u5217\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u201c\u51b7\u201d\u89c2\u5bdf\u8005\u7b49\u5f85\u89c2\u5bdf\u8005\u5728\u5f00\u59cb\u53d1\u5c04\u7269\u54c1\u4e4b\u524d\u8ba2\u9605\u5b83\uff0c\u56e0\u6b64\u8fd9\u6837\u7684\u89c2\u5bdf\u8005\u4fdd\u8bc1\u4ece\u5934\u770b\u5230\u6574\u4e2a\u5e8f\u5217\u3002  \u5728ReactiveX\u7684\u4e00\u4e9b\u5b9e\u73b0\u4e2d\uff0c\u8fd8\u6709\u4e00\u4e9b\u79f0\u4e3a\u201c\u53ef\u8fde\u63a5\u201d\u89c2\u5bdf\u70b9\u7684\u4e1c\u897f\u3002\n\u8fd9\u6837\u4e00\u4e2a\u89c2\u5bdf\u70b9\u4e0d\u4f1a\u5f00\u59cb\u53d1\u5c04\u9879\u76ee\uff0c\u76f4\u5230\u5b83\u7684Connect\u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u65e0\u8bba\u89c2\u5bdf\u8005\u662f\u5426\u8ba2\u9605\u4e86\u5b83\u3002", 
            "title": "\u201c\u70ed\u201d\u548c\u201c\u51b7\u201d\u89c2\u5bdf\u7269"
        }, 
        {
            "location": "/ReactiveX/Observable/#_7", 
            "text": "\u89c2\u5bdf\u8005\u548c\u89c2\u5bdf\u8005\u53ea\u662fReactiveX\u7684\u5f00\u59cb\u3002\n\u5b83\u4eec\u672c\u8eab\u53ea\u4e0d\u8fc7\u662f\u6807\u51c6\u89c2\u5bdf\u8005\u6a21\u5f0f\u7684\u8f7b\u5fae\u6269\u5c55\uff0c\u66f4\u9002\u5408\u5904\u7406\u4e00\u7cfb\u5217\u4e8b\u4ef6\u800c\u4e0d\u662f\u5355\u4e2a\u56de\u8c03\u3002  \u771f\u6b63\u7684\u529b\u91cf\u6765\u81ea\u201c\u53cd\u5e94\u6027\u6269\u5c55\u201d\uff08\u56e0\u6b64\u79f0\u4e3a\u201cReactiveX\u201d\uff09 - \u5141\u8bb8\u60a8\u8f6c\u6362\uff0c\u7ec4\u5408\uff0c\u64cd\u4f5c\u548c\u4f7f\u7528\u89c2\u5bdf\u70b9\u53d1\u5c04\u7684\u7269\u54c1\u5e8f\u5217\u7684\u64cd\u4f5c\u7b26\u3002  \u8fd9\u4e9bRx\u64cd\u4f5c\u7b26\u5141\u8bb8\u60a8\u4ee5\u58f0\u660e\u65b9\u5f0f\u4e00\u8d77\u7ec4\u5408\u5f02\u6b65\u5e8f\u5217\uff0c\u5e76\u5177\u6709\u56de\u8c03\u7684\u6240\u6709\u6548\u7387\u4f18\u52bf\uff0c\u4f46\u6ca1\u6709\u901a\u5e38\u4e0e\u5f02\u6b65\u7cfb\u7edf\u5173\u8054\u7684\u5d4c\u5957\u56de\u8c03\u5904\u7406\u7a0b\u5e8f\u7684\u7f3a\u70b9\u3002  \u672c\u6587\u6863\u5c06\u6709\u5173\u5404\u79cd\u64cd\u4f5c\u7b26\u7684\u4fe1\u606f\u53ca\u5176\u4f7f\u7528\u793a\u4f8b\u5206\u7ec4\u5230\u4ee5\u4e0b\u9875\u9762\u4e2d\uff1a  \u521b\u5efa\u89c2\u5bdf\u70b9  Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, and Timer  \u8f6c\u6362\u89c2\u5bdf\u70b9\u9879\u76ee  Buffer, FlatMap, GroupBy, Map, Scan, and Window  \u8fc7\u6ee4\u89c2\u5bdf\u70b9  Debounce, Distinct, ElementAt, Filter, First, IgnoreElements, Last, Sample, Skip, SkipLast, Take, and TakeLast  \u805a\u5408\u89c2\u5bdf\u70b9  And/Then/When, CombineLatest, Join, Merge, StartWith, Switch, and Zip  \u9519\u8bef\u5904\u7406\u64cd\u4f5c\u7b26  Catch and Retry  \u6548\u7528\u64cd\u4f5c\u7b26  Delay, Do, Materialize/Dematerialize, ObserveOn, Serialize, Subscribe, SubscribeOn, TimeInterval, Timeout, Timestamp, and Using  \u6761\u4ef6\u548c\u5e03\u5c14\u64cd\u4f5c\u7b26  All, Amb, Contains, DefaultIfEmpty, SequenceEqual, SkipUntil, SkipWhile, TakeUntil, and TakeWhile  \u6570\u5b66\u4e0e\u96c6\u5408\u8fd0\u7b97  Average, Concat, Count, Max, Min, Reduce, and Sum  \u8f6c\u6362\u89c2\u5bdf\u503c  To  \u53ef\u8fde\u63a5\u7684\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26  Connect, Publish, RefCount, and Replay  \u80cc\u538b\u64cd\u4f5c\u5458  \u5404\u79cd\u6267\u884c\u7279\u5b9a\u6d41\u91cf\u63a7\u5236\u7b56\u7565\u7684\u64cd\u4f5c\u7b26  \u8fd9\u4e9b\u9875\u9762\u5305\u542b\u6709\u5173\u4e00\u4e9b\u64cd\u4f5c\u7b26\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u4e0d\u5c5e\u4e8eReactiveX\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u4f46\u662f\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u8bed\u8a00\u7279\u5b9a\u7684\u5b9e\u73b0\u548c/\u6216\u53ef\u9009\u6a21\u5757\u4e2d\u5b9e\u73b0\u3002", 
            "title": "\u901a\u8fc7\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u7ec4\u5408"
        }, 
        {
            "location": "/ReactiveX/Observable/#_8", 
            "text": "\u5927\u591a\u6570\u64cd\u4f5c\u5458\u4f7f\u7528\u89c2\u5bdf\u70b9\u8fdb\u884c\u64cd\u4f5c\u5e76\u8fd4\u56de\u89c2\u5bdf\u70b9\u3002\n\u8fd9\u5141\u8bb8\u60a8\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5e94\u7528\u5728\u4e00\u4e2a\u94fe\u4e2d\u3002\n\u94fe\u4e2d\u7684\u6bcf\u4e2a\u64cd\u4f5c\u7b26\u90fd\u4f1a\u4fee\u6539\u7531\u524d\u4e00\u4e2a\u64cd\u4f5c\u7b26\u7684\u64cd\u4f5c\u5bfc\u81f4\u7684\u89c2\u5bdf\u70b9\u3002  \u8fd8\u6709\u5176\u4ed6\u6a21\u5f0f\uff0c\u6bd4\u5982Builder\u6a21\u5f0f\uff0c\u5176\u4e2d\u4e00\u4e2a\u7279\u5b9a\u7c7b\u7684\u5404\u79cd\u65b9\u6cd5\u901a\u8fc7\u5bf9\u8be5\u65b9\u6cd5\u7684\u64cd\u4f5c\u4fee\u6539\u8be5\u5bf9\u8c61\u6765\u64cd\u4f5c\u8be5\u7c7b\u7684\u4e00\u4e2a\u9879\u76ee\u3002\n\u8fd9\u4e9b\u6a21\u5f0f\u8fd8\u5141\u8bb8\u60a8\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u94fe\u63a5\u65b9\u6cd5\u3002\n\u4f46\u662f\u5728Builder\u6a21\u5f0f\u4e2d\uff0c\u94fe\u4e2d\u65b9\u6cd5\u51fa\u73b0\u7684\u987a\u5e8f\u901a\u5e38\u5e76\u4e0d\u91cd\u8981\uff0c\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u6392\u5e8f\u5f88\u91cd\u8981\u3002  \u4e00\u8fde\u4e32\u7684\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u5e76\u4e0d\u72ec\u7acb\u4e8e\u6e90\u81ea\u94fe\u7684\u539f\u59cb\u89c2\u5bdf\u70b9\uff0c\u800c\u662f\u4f9d\u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u4f9d\u8d56\u4e8e\u94fe\u4e2d\u524d\u4e00\u4e2a\u64cd\u4f5c\u7b26\u751f\u6210\u7684\u89c2\u5bdf\u70b9", 
            "title": "\u64cd\u4f5c\u94fe"
        }, 
        {
            "location": "/ReactiveX/Operators/", 
            "text": "\u64cd\u4f5c\u7b26\n\n\n\u4ecb\u7ecd\n\n\nEach language-specific implementation of ReactiveX implements a set of operators. Although there is much overlap between implementations, there are also some operators that are only implemented in certain implementations. Also, each implementation tends to name its operators to resemble those of similar methods that are already familiar from other contexts in that language.\n\n\n\u94fe\u63a5\u64cd\u4f5c\u7b26\n\n\nMost operators operate on an Observable and return an Observable. This allows you to apply these operators one after the other, in a chain. Each operator in the chain modifies the Observable that results from the operation of the previous operator.\n\n\nThere are other patterns, like the Builder Pattern, in which a variety of methods of a particular class operate on an item of that same class by modifying that object through the operation of the method. These patterns also allow you to chain the methods in a similar way. But while in the Builder Pattern, the order in which the methods appear in the chain does not usually matter, with the Observable operators order matters.\n\n\nA chain of Observable operators do not operate independently on the original Observable that originates the chain, but they operate in turn, each one operating on the Observable generated by the operator immediately previous in the chain.\n\n\nReactiveX\u7684\u64cd\u4f5c\u7b26\n\n\nThis page first lists what could be considered the \u201ccore\u201d operators in ReactiveX, and links to pages that have more in-depth information on how these operators work and how particular language-specific ReactiveX versions have implemented these operators.\n\n\nNext is a \u201cdecision tree\u201d that may help you choose the operator that is most appropriate to your use case.\n\n\nFinally, there is an alphabetical list of most of the operators available in the many language-specific implementations of ReactiveX. These link to the page that documents the core operator that most closely resembles the language-specific operator (so, for instance, the Rx.NET \u201cSelectMany\u201d operator links to the documentation of the FlatMap ReactiveX operator, of which \u201cSelectMany\u201d is the Rx.NET implementation).\n\n\nIf you want to implement your own operator, see Implementing Your Own Operators.\n\n\n\u5185\u5bb9\n\n\n\n\n\u5206\u7c7b\u64cd\u4f5c\u7b26\n\n\n\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u7684\u51b3\u7b56\u6811\n\n\n\u4e00\u4e2a\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u53ef\u89c2\u5bdf\u64cd\u4f5c\u7b26\u5217\u8868\n\n\n\n\n\u64cd\u4f5c\u7b26\u5206\u7c7b\n\n\n\u521b\u5efa\u89c2\u5bdf\u70b9\n\n\n\u4ea7\u751f\u65b0\u7684\u89c2\u5bdf\u70b9\u7684\u64cd\u4f5c\u7b26\u3002\n\n\n\n\nCreate \u2014 create an Observable from scratch by calling observer methods programmatically\n\n\nDefer \u2014 do not create the Observable until the observer subscribes, and create a fresh Observable for each observer\n\n\nEmpty/Never/Throw \u2014 create Observables that have very precise and limited behavior\n\n\nFrom \u2014 convert some other object or data structure into an Observable\n\n\nInterval \u2014 create an Observable that emits a sequence of integers spaced by a particular time interval\n\n\nJust \u2014 convert an object or a set of objects into an Observable that emits that or those objects\n\n\nRange \u2014 create an Observable that emits a range of sequential integers\n\n\nRepeat \u2014 create an Observable that emits a particular item or sequence of items repeatedly\n\n\nStart \u2014 create an Observable that emits the return value of a function\n\n\nTimer \u2014 create an Observable that emits a single item after a given delay\n\n\n\n\n\u8f6c\u6362\u89c2\u5bdf\u70b9\n\n\n\u8f6c\u6362\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6570\u636e\u7684\u64cd\u4f5c\u7b26\u3002\n\n\n\n\nBuffer \u2014 periodically gather items from an Observable into bundles and emit these bundles rather than emitting the items one at a time\n\n\nFlatMap \u2014 transform the items emitted by an Observable into Observables, then flatten the emissions from those into a single Observable\n\n\nGroupBy \u2014 divide an Observable into a set of Observables that each emit a different group of items from the original Observable, organized by key\n\n\nMap \u2014 transform the items emitted by an Observable by applying a function to each item\n\n\nScan \u2014 apply a function to each item emitted by an Observable, sequentially, and emit each successive value\n\n\nWindow \u2014 periodically subdivide items from an Observable into Observable windows and emit these windows rather than emitting the items one at a time\n\n\n\n\n\u8fc7\u6ee4\u89c2\u5bdf\u70b9\n\n\n\u6709\u9009\u62e9\u5730\u4ece\u6e90Observable\u53d1\u9001\u6570\u636e\u7684\u8fd0\u7b97\u7b26\u3002\n\n\n\n\nDebounce \u2014 only emit an item from an Observable if a particular timespan has passed without it emitting another item\n\n\nDistinct \u2014 suppress duplicate items emitted by an Observable\n\n\nElementAt \u2014 emit only item n emitted by an Observable\n\n\nFilter \u2014 emit only those items from an Observable that pass a predicate test\n\n\nFirst \u2014 emit only the first item, or the first item that meets a condition, from an Observable\n\n\nIgnoreElements \u2014 do not emit any items from an Observable but mirror its termination notification\n\n\nLast \u2014 emit only the last item emitted by an Observable\n\n\nSample \u2014 emit the most recent item emitted by an Observable within periodic time intervals\n\n\nSkip \u2014 suppress the first n items emitted by an Observable\n\n\nSkipLast \u2014 suppress the last n items emitted by an Observable\n\n\nTake \u2014 emit only the first n items emitted by an Observable\n\n\nTakeLast \u2014 emit only the last n items emitted by an Observable\n\n\n\n\n\u7ed3\u5408\u89c2\u5bdf\n\n\n\u4f7f\u7528\u591a\u4e2a\u6e90Observable\u6765\u521b\u5efa\u5355\u4e2aObservable\u7684\u64cd\u4f5c\u5458\n\n\n\n\nAnd/Then/When \u2014 combine sets of items emitted by two or more Observables by means of Pattern and Plan intermediaries\n\n\nCombineLatest \u2014 when an item is emitted by either of two Observables, combine the latest item emitted by each Observable via a specified function and emit items based on the results of this function\n\n\nJoin \u2014 combine items emitted by two Observables whenever an item from one Observable is emitted during a time window defined according to an item emitted by the other Observable\n\n\nMerge \u2014 combine multiple Observables into one by merging their emissions\n\n\nStartWith \u2014 emit a specified sequence of items before beginning to emit the items from the source Observable\n\n\nSwitch \u2014 convert an Observable that emits Observables into a single Observable that emits the items emitted by the most-recently-emitted of those Observables\n\n\nZip \u2014 combine the emissions of multiple Observables together via a specified function and emit single items for each combination based on the results of this function\n\n\n\n\n\u9519\u8bef\u5904\u7406\u64cd\u4f5c\u7b26\n\n\n\u6709\u52a9\u4e8e\u4eceObservable\u7684\u9519\u8bef\u901a\u77e5\u4e2d\u6062\u590d\u7684\u64cd\u4f5c\u5458\n\n\n\n\nCatch \u2014 recover from an onError notification by continuing the sequence without error\n\n\nRetry \u2014 if a source Observable sends an onError notification, resubscribe to it in the hopes that it will complete without error\n\n\n\n\n\u53ef\u89c2\u5bdf\u7684\u5b9e\u7528\u64cd\u4f5c\u7b26\n\n\n\u4f7f\u7528Observables\u7684\u6709\u7528\u64cd\u4f5c\u7b26\u7684\u5de5\u5177\u7bb1\n\n\n\n\nDelay \u2014 shift the emissions from an Observable forward in time by a particular amount\n\n\nDo \u2014 register an action to take upon a variety of Observable lifecycle events\n\n\nMaterialize/Dematerialize \u2014 represent both the items emitted and the notifications sent as emitted items, or reverse this process\n\n\nObserveOn \u2014 specify the scheduler on which an observer will observe this Observable\n\n\nSerialize \u2014 force an Observable to make serialized calls and to be well-behaved\n\n\nSubscribe \u2014 operate upon the emissions and notifications from an Observable\n\n\nSubscribeOn \u2014 specify the scheduler an Observable should use when it is subscribed to\n\n\nTimeInterval \u2014 convert an Observable that emits items into one that emits indications of the amount of time elapsed between those emissions\n\n\nTimeout \u2014 mirror the source Observable, but issue an error notification if a particular period of time elapses without any emitted items\n\n\nTimestamp \u2014 attach a timestamp to each item emitted by an Observable\n\n\nUsing \u2014 create a disposable resource that has the same lifespan as the Observable\n\n\n\n\n\u6761\u4ef6\u548c\u5e03\u5c14\u8fd0\u7b97\u7b26\n\n\n\u8bc4\u4f30\u4e00\u4e2a\u6216\u591a\u4e2aObservable\u6216Observables\u53d1\u9001\u7684\u6570\u636e\u7684\u64cd\u4f5c\u5458\n\n\n\n\nAll \u2014 determine whether all items emitted by an Observable meet some criteria\n\n\nAmb \u2014 given two or more source Observables, emit all of the items from only the first of these Observables to emit an item\n\n\nContains \u2014 determine whether an Observable emits a particular item or not\n\n\nDefaultIfEmpty \u2014 emit items from the source Observable, or a default item if the source Observable emits nothing\n\n\nSequenceEqual \u2014 determine whether two Observables emit the same sequence of items\n\n\nSkipUntil \u2014 discard items emitted by an Observable until a second Observable emits an item\n\n\nSkipWhile \u2014 discard items emitted by an Observable until a specified condition becomes false\n\n\nTakeUntil \u2014 discard items emitted by an Observable after a second Observable emits an item or terminates\n\n\nTakeWhile \u2014 discard items emitted by an Observable after a specified condition becomes false\n\n\n\n\n\u6570\u5b66\u548c\u96c6\u5408\u8fd0\u7b97\u7b26\n\n\n\u5bf9\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6240\u6709\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u64cd\u4f5c\u7b26\n\n\n\n\nAverage \u2014 calculates the average of numbers emitted by an Observable and emits this average\n\n\nConcat \u2014 emit the emissions from two or more Observables without interleaving them\n\n\nCount \u2014 count the number of items emitted by the source Observable and emit only this value\n\n\nMax \u2014 determine, and emit, the maximum-valued item emitted by an Observable\n\n\nMin \u2014 determine, and emit, the minimum-valued item emitted by an Observable\n\n\nReduce \u2014 apply a function to each item emitted by an Observable, sequentially, and emit the final value\n\n\nSum \u2014 calculate the sum of numbers emitted by an Observable and emit this sum\n\n\n\n\n\u80cc\u538b\u64cd\u4f5c\u7b26\n\n\n\n\nbackpressure operators \u2014 strategies for coping with Observables that produce items more rapidly than their observers consume them\n\n\n\n\n\u53ef\u8fde\u63a5\u7684\u53ef\u89c2\u5bdf\u64cd\u4f5c\u7b26\n\n\n\u7279\u6b8a\u89c2\u5bdf\u70b9\u5177\u6709\u66f4\u7cbe\u786e\u63a7\u5236\u7684\u8ba2\u9605\u52a8\u6001\n\n\n\n\nConnect \u2014 instruct a connectable Observable to begin emitting items to its subscribers\n\n\nPublish \u2014 convert an ordinary Observable into a connectable Observable\n\n\nRefCount \u2014 make a Connectable Observable behave like an ordinary Observable\n\n\nReplay \u2014 ensure that all observers see the same sequence of emitted items, even if they subscribe after the Observable has begun emitting items\n\n\n\n\n\u64cd\u4f5c\u7b26\u8f6c\u6362\u89c2\u5bdf\u8005\n\n\n\n\nTo \u2014 convert an Observable into another object or data structure\n\n\n\n\n\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u7684\u51b3\u7b56\u6811\n\n\n\u7279\u6b8a\u89c2\u5bdf\u70b9\u5177\u6709\u66f4\u7cbe\u786e\u63a7\u5236\u7684\u8ba2\u9605\u52a8\u6001\n\n\n\n\n\u51b3\u7b56\u6811\n\n\n\u6211\u60f3\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u89c2\u5bdf\u70b9\n\n\n\n\n...\u53d1\u9001\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e: \nJust\n\n\n...\u8fd9\u662f\u4ece\u4e00\u4e2a\u540d\u4e3asubscribe-time\u7684\u51fd\u6570\u8fd4\u56de\u7684: \nStart\n\n\n...\u8fd9\u662f\u4eceAction\uff0cCallable\uff0cRunnable\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u8fd4\u56de\u7684\uff0c\u5728\u8ba2\u9605\u65f6\u8c03\u7528: \nFrom\n\n\n...\u7ecf\u8fc7\u6307\u5b9a\u7684\u5ef6\u8fdf: \nTimer\n\n\n\n\n\n\n...\u4ece\u7279\u5b9a\u7684Array\uff0cIterable\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u4e2d\u62bd\u53d6\u5176\u53d1\u9001: \nFrom\n\n\n...\u901a\u8fc7\u4ece\u672a\u6765\u68c0\u7d22\u5b83: \nStart\n\n\n...\u4ece\u672a\u6765\u83b7\u5f97\u5b83\u7684\u5e8f\u5217: \nFrom\n\n\n...\u5b83\u4f1a\u91cd\u590d\u53d1\u9001\u4e00\u7cfb\u5217\u6570\u636e: \nRepeat\n\n\n...\u4ece\u5934\u5f00\u59cb\uff0c\u7528\u5b9a\u5236\u903b\u8f91: \nCreate\n\n\n...\u4e3a\u6bcf\u4e2a\u8ba2\u9605\u7684\u89c2\u5bdf\u8005: \nDefer\n\n\n...\u53d1\u51fa\u4e00\u7cfb\u5217\u6574\u6570: \nRange\n\n\n...\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u95f4\u9694: \nInterval\n\n\n...\u7ecf\u8fc7\u6307\u5b9a\u7684\u5ef6\u8fdf: \nTimer\n\n\n\n\n\n\n\n\n\n\n...\u5b8c\u6210\u6ca1\u6709\u6392\u653e\u6570\u636e: \nEmpty\n\n\n...\u6839\u672c\u6ca1\u6709\u505a\u4efb\u4f55\u4e8b\u60c5: \nNever\n\n\n\n\n\u6211\u60f3\u901a\u8fc7\u7ec4\u5408\u5176\u4ed6\u89c2\u5bdf\u70b9\u6765\u521b\u5efa\u4e00\u4e2a\u89c2\u5bdf\u70b9\n\n\n\n\n...\u5e76\u4ee5\u6240\u6536\u5230\u7684\u4efb\u4f55\u987a\u5e8f\u4ece\u6240\u6709\u89c2\u5bdf\u70b9\u53d1\u9001\u6240\u6709\u6570\u636e: Merge\n\n\n...\u5e76\u4ece\u6240\u6709\u89c2\u5bdf\u70b9\u4e2d\u53d1\u9001\u6240\u6709\u6570\u636e\uff0c\u6bcf\u6b21\u53ea\u80fd\u89c2\u5bdf\u4e00\u6b21: Concat\n\n\n...\u901a\u8fc7\u5c06\u4e24\u4e2a\u6216\u591a\u4e2aObserbles\u4e2d\u7684\u6570\u636e\u6309\u987a\u5e8f\u7ec4\u5408\u8d77\u6765\u4ee5\u4ea7\u751f\u65b0\u7684\u6570\u636e\n\n\n...\u6bcf\u5f53\u6bcf\u4e2a\u89c2\u5bdf\u8005\u53d1\u9001\u4e00\u4e2a\u65b0\u6570\u636e\u65f6: Zip\n\n\n...\u6bcf\u5f53\u4efb\u4e00\u89c2\u5bdf\u8005\u53d1\u9001\u4e00\u4e2a\u65b0\u6570\u636e\u65f6: CombineLatest\n\n\n...\u6bcf\u5f53\u4e00\u4e2a\u6570\u636e\u7531\u4e00\u4e2a\u89c2\u5bdf\u70b9\u5728\u7531\u53e6\u4e00\u4e2a\u6570\u636e\u53d1\u9001\u7684\u6570\u636e\u5b9a\u4e49\u7684\u7a97\u53e3\u4e2d\u53d1\u9001\u65f6: Join\n\n\n...\u901a\u8fc7\u6a21\u5f0f\u548c\u8ba1\u5212\u4e2d\u4ecb: And/Then/When\n\n\n\n\n\n\n\u5e76\u4ec5\u4ece\u6700\u8fd1\u6392\u653e\u7684\u90a3\u4e9b\u89c2\u5bdf\u7269\u4e2d\u6563\u53d1\u6570\u636e: Switch\n\n\n\n\n\u6211\u60f3\u5728\u8f6c\u6362\u5b83\u4eec\u540e\u4ece\u89c2\u5bdf\u70b9\u53d1\u9001\u6570\u636e\n\n\n\n\n...\u4e00\u6b21\u4e00\u4e2a\u529f\u80fd: Map\n\n\n...\u901a\u8fc7\u53d1\u9001\u76f8\u5e94\u7684\u89c2\u5bdf\u70b9s\u53d1\u9001\u7684\u6240\u6709\u6570\u636e: FlatMap\n\n\n...\u4e00\u6b21\u53ef\u89c2\u6d4b\uff0c\u6309\u7167\u5b83\u4eec\u53d1\u9001\u7684\u987a\u5e8f: ConcatMap\n\n\n\n\n\n\n...\u57fa\u4e8e\u5b83\u4eec\u4e4b\u524d\u7684\u6240\u6709\u6570\u636e: Scan\n\n\n...\u901a\u8fc7\u9644\u52a0\u65f6\u95f4\u6233\u7ed9\u4ed6\u4eec: Timestamp\n\n\n...\u6210\u4e3a\u6570\u636e\u6392\u653e\u4e4b\u524d\u6240\u7ecf\u5386\u7684\u65f6\u95f4\u91cf\u7684\u6307\u6807: TimeInterval\n\n\n\n\n\u6211\u60f3\u5728\u91cd\u65b0\u53d1\u9001\u4e4b\u524d\u53ca\u65f6\u5411\u524d\u79fb\u52a8\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6570\u636e\n: Delay\n\n\n\u6211\u60f3\u5c06\u6765\u81ea\u89c2\u5bdf\u70b9\u7684\u6570\u636e\u548c\u901a\u77e5\u8f6c\u6362\u4e3a\u6570\u636e\u5e76\u91cd\u65b0\u53d1\u9001\u5b83\u4eec\n\n\n\n\n...\u901a\u8fc7\u5c06\u5b83\u4eec\u5305\u88c5\u5728\u901a\u77e5\u5bf9\u8c61\u4e2d: Materialize\n\n\n...\u7136\u540e\u6211\u53ef\u4ee5\u518d\u6253\u5f00: Dematerialize\n\n\n\n\n\n\n\n\n\u6211\u60f3\u5ffd\u7565\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6240\u6709\u6570\u636e\uff0c\u53ea\u4f20\u9012\u5b8c\u6210/\u9519\u8bef\u901a\u77e5\n: IgnoreElements\n\n\n\u6211\u60f3\u955c\u50cf\u4e00\u4e2a\u89c2\u5bdf\u70b9\uff0c\u4f46\u5728\u5b83\u7684\u5e8f\u5217\u524d\u52a0\u4e0a\u6570\u636e\n: StartWith\n\n\n\n\n\u53ea\u6709\u5f53\u5b83\u7684\u987a\u5e8f\u662f\u7a7a\u7684: DefaultIfEmpty\n\n\n\n\n\u6211\u60f3\u4ece\u89c2\u5bdf\u70b9\u6536\u96c6\u6570\u636e\u5e76\u5c06\u5b83\u4eec\u91cd\u65b0\u53d1\u9001\u4e3a\u6570\u636e\u7684\u7f13\u51b2\u533a\n: Buffer\n\n\n\n\n\u53ea\u5305\u542b\u6700\u540e\u53d1\u9001\u7684\u6570\u636e: TakeLastBuffer\n\n\n\n\n\u6211\u60f3\u5c06\u4e00\u4e2a\u89c2\u5bdf\u70b9\u5206\u6210\u591a\u4e2a\u89c2\u5bdf\u70b9\n: Window\n\n\n\n\n\u6240\u4ee5\u7c7b\u4f3c\u7684\u6570\u636e\u6700\u7ec8\u843d\u5728\u76f8\u540c\u7684\u89c2\u5bdf\u70b9\u4e0a: GroupBy\n\n\n\n\n\u6211\u60f3\u8981\u68c0\u7d22\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u7279\u5b9a\u6570\u636e:\n\n\n\n\n\u5728\u5b8c\u6210\u4e4b\u524d\u53d1\u51fa\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e: Last\n\n\n\u5b83\u53d1\u9001\u7684\u552f\u4e00\u6570\u636e: Single\n\n\n\u5b83\u53d1\u51fa\u7684\u7b2c\u4e00\u4e2a\u6570\u636e: First\n\n\n\n\n\u6211\u60f3\u91cd\u65b0\u53d1\u9001\u89c2\u5bdf\u70b9\u4e2d\u7684\u67d0\u4e9b\u6570\u636e\n\n\n\n\n...\u901a\u8fc7\u8fc7\u6ee4\u90a3\u4e9b\u4e0d\u5339\u914d\u67d0\u4e9b\u8c13\u8bcd\u7684\u90a3\u4e9b: Filter\n\n\n...\u4e5f\u5c31\u662f\u53ea\u6709\u7b2c\u4e00\u4e2a\u6570\u636e: First\n\n\n...\u4e5f\u5c31\u662f\u53ea\u6709\u7b2c\u4e00\u9879: Take\n\n\n...\u4e5f\u5c31\u662f\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u6570\u636e: Last\n\n\n...\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u6570\u636en: ElementAt\n\n\n...\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u90a3\u4e9b\u7b2c\u4e00\u9879\u4e4b\u540e\u7684\u6570\u636e\n\n\n...\u4e5f\u5c31\u662f\u524dn\u4e2a\u6570\u636e\u4e4b\u540e: Skip\n\n\n...\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u6570\u636e\u4e0e\u8c13\u8bcd\u5339\u914d\u4e3a\u6b62: SkipWhile\n\n\n...\u5373\u5728\u6700\u521d\u7684\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e: Skip\n\n\n...\u4e5f\u5c31\u662f\u5728\u7b2c\u4e8c\u4e2a\u89c2\u5bdf\u70b9\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u4e4b\u540e: SkipUntil\n\n\n\n\n\n\n...\u5373\u9664\u6700\u540e\u4e00\u9879\u5916\u7684\u6570\u636e\n\n\n...\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u4e86\u6700\u540e\u7684n\u4e2a\u6570\u636e: SkipLast\n\n\n...\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u6570\u636e\u4e0e\u8c13\u8bcd\u5339\u914d\u4e3a\u6b62: TakeWhile\n\n\n...\u4e5f\u5c31\u662f\u8bf4\uff0c\u6e90\u4ee3\u7801\u5b8c\u6210\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u53d1\u5e03\u7684\u6570\u636e\u9664\u5916: SkipLast\n\n\n...\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u4e86\u5728\u7b2c\u4e8c\u4e2a\u89c2\u5bdf\u70b9\u53d1\u51fa\u6570\u636e\u4e4b\u540e\u53d1\u9001\u7684\u6570\u636e\u5916: TakeUntil\n\n\n\n\n\n\n...\u5b9a\u671f\u5bf9\u89c2\u5bdf\u70b9\u8fdb\u884c\u91c7\u6837: Sample\n\n\n...\u901a\u8fc7\u53ea\u53d1\u51fa\u5728\u67d0\u4e2a\u6301\u7eed\u65f6\u95f4\u5185\u6ca1\u6709\u88ab\u5176\u4ed6\u6570\u636e\u8ffd\u8e2a\u7684\u6570\u636e: Debounce\n\n\n...\u901a\u8fc7\u6291\u5236\u5df2\u7ecf\u53d1\u51fa\u6570\u636e\u7684\u91cd\u590d\u6570\u636e: Distinct\n\n\n...\u5982\u679c\u4ed6\u4eec\u7acb\u5373\u8ddf\u968f\u4ed6\u4eec\u91cd\u590d\u7684\u6570\u636e: DistinctUntilChanged\n\n\n\n\n\n\n...\u5728\u5f00\u59cb\u53d1\u5e03\u6570\u636e\u4e4b\u540e\uff0c\u5ef6\u8fdf\u6211\u7684\u8ba2\u9605\u4e00\u6bb5\u65f6\u95f4\n\n\n\n\n\u6211\u53ea\u60f3\u4ece\u89c2\u5bdf\u70b9\u7684\u6570\u636e\u4e2d\u91cd\u65b0\u53d1\u653e\u6570\u636e\uff0c\u6761\u4ef6\u662f\u5b83\u662f\u89c2\u5bdf\u70b9\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u53d1\u9001\u6570\u636e\u7684\u6570\u636e\n\n\n\u6211\u60f3\u8bc4\u4f30\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6574\u4e2a\u6570\u636e\u5e8f\u5217\n\n\n\n\n...\u5e76\u53d1\u51fa\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u662f\u5426\u6240\u6709\u6570\u636e\u90fd\u901a\u8fc7\u4e86\u4e00\u4e9b\u6d4b\u8bd5: All\n\n\n...\u5e76\u53d1\u51fa\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u89c2\u5bdf\u70b9\u662f\u5426\u53d1\u9001\u4e86\u4efb\u4f55\u6570\u636e\uff08\u901a\u8fc7\u4e00\u4e9b\u6d4b\u8bd5\uff09: Contains\n\n\n...\u5e76\u53d1\u51fa\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u89c2\u5bdf\u70b9\u662f\u5426\u4e0d\u53d1\u9001\u4efb\u4f55\u6570\u636e: IsEmpty\n\n\n...\u5e76\u53d1\u51fa\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u8be5\u5e8f\u5217\u662f\u5426\u4e0e\u7b2c\u4e8c\u4e2a\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u5e8f\u5217\u76f8\u540c: SequenceEqual\n\n\n...\u5e76\u53d1\u51fa\u5176\u6240\u6709\u503c\u7684\u5e73\u5747\u503c: Average\n\n\n...\u5e76\u53d1\u51fa\u5176\u6240\u6709\u503c\u7684\u603b\u548c: Sum\n\n\n...\u5e76\u53d1\u51fa\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u5e8f\u5217\u4e2d\u6709\u591a\u5c11\u6570\u636e: Count\n\n\n...\u5e76\u53d1\u51fa\u5177\u6709\u6700\u5927\u503c\u7684\u6570\u636e: Max\n\n\n...\u5e76\u53d1\u51fa\u5177\u6709\u6700\u5c0f\u503c\u7684\u6570\u636e: Min\n\n\n...\u901a\u8fc7\u4f9d\u6b21\u5bf9\u6bcf\u4e2a\u6570\u636e\u5e94\u7528\u805a\u5408\u51fd\u6570\u5e76\u53d1\u5e03\u7ed3\u679c: Scan\n\n\n\n\n\u6211\u60f3\u5c06\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6574\u4e2a\u6570\u636e\u5e8f\u5217\u8f6c\u6362\u4e3a\u5176\u4ed6\u6570\u636e\u7ed3\u6784\n\n\n\u6211\u5e0c\u671b\u64cd\u4f5c\u5458\u5728\u7279\u5b9a\u7684\u8c03\u5ea6\u7a0b\u5e8f\u4e0a\u8fd0\u884c\n: SubscribeOn\n\n\n\n\n...\u5f53\u5b83\u901a\u77e5\u89c2\u5bdf\u5458\u65f6: ObserveOn\n\n\n\n\n\u6211\u5e0c\u671b\u89c2\u5bdf\u70b9\u5728\u53d1\u751f\u67d0\u4e9b\u4e8b\u4ef6\u65f6\u8c03\u7528\u7279\u5b9a\u7684\u64cd\u4f5c\n\n\n\u6211\u60f3\u8981\u4e00\u4e2a\u53ef\u4ee5\u901a\u77e5\u89c2\u5bdf\u8005\u9519\u8bef\u7684\u89c2\u5bdf\u70b9\n\n\n\n\n...\u5982\u679c\u7ecf\u8fc7\u4e00\u6bb5\u6307\u5b9a\u7684\u65f6\u95f4\u800c\u6ca1\u6709\u53d1\u9001\u6570\u636e\n\n\n\n\n\u6211\u5e0c\u671b\u89c2\u5bdf\u70b9\u80fd\u591f\u4f18\u96c5\u5730\u6062\u590d\n\n\n\n\n...\u4ece\u8d85\u65f6\u5207\u6362\u5230\u5907\u4efd\u89c2\u5bdf\u70b9: Timeout\n\n\n...\u6765\u81ea\u4e0a\u6e38\u9519\u8bef\u901a\u77e5: Catch\n\n\n...\u901a\u8fc7\u5c1d\u8bd5\u91cd\u65b0\u8ba2\u9605\u4e0a\u6e38\u89c2\u5bdf\u70b9: Retry\n\n\n\n\n\n\n\n\n\u6211\u60f3\u521b\u5efa\u4e00\u4e2a\u4e0e\u89c2\u5bdf\u70b9\u5177\u6709\u76f8\u540c\u751f\u547d\u5468\u671f\u7684\u8d44\u6e90\n: Using\n\n\n\u6211\u60f3\u8ba2\u9605\u4e00\u4e2a\u89c2\u5bdf\u70b9\u5e76\u63a5\u6536\u4e00\u4e2a\u963b\u585e\uff0c\u76f4\u5230\u89c2\u5bdf\u70b9\u5b8c\u6210\n: Start\n\n\n\u6211\u60f3\u8981\u4e00\u4e2a\u89c2\u5bdf\u70b9\uff0c\u76f4\u5230\u8be2\u95ee\u624d\u5f00\u59cb\u5411\u8ba2\u9605\u8005\u53d1\u9001\u6570\u636e\n: Publish\n\n\n\n\n...\u901a\u8fc7\u5c1d\u8bd5\u91cd\u65b0\u8ba2\u9605\u4e0a\u6e38\u89c2\u5bdf\u70b9: PublishLast\n\n\n...\u7136\u540e\u53d1\u51fa\u5b8c\u6574\u7684\u5e8f\u5217\uff0c\u751a\u81f3\u53d1\u9001\u7ed9\u5e8f\u5217\u5f00\u59cb\u540e\u8ba2\u9605\u7684\u4eba: Replay\n\n\n...\u4f46\u662f\u6211\u5e0c\u671b\u4e00\u65e6\u6240\u6709\u8ba2\u9605\u8005\u90fd\u9000\u8ba2\uff0c\u5b83\u5c31\u4f1a\u6d88\u5931: RefCount\n\n\n...\u7136\u540e\u6211\u60f3\u8ba9\u5b83\u5f00\u59cb: Connect\n\n\n\n\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b\n\n\n\n\n\u6211\u4f7f\u7528\u54ea\u4e2a\u64cd\u4f5c\u7b26\uff1f \u7531Dennis Stoyano\u63d0\u4f9b (\u4e00\u4e2a\u7c7b\u4f3c\u7684\u51b3\u7b56\u6811\uff0c\u7279\u5b9a\u4e8eRxJS\u64cd\u4f5c\u7b26)\n\n\n\n\n\u4e00\u4e2a\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u53ef\u89c2\u5bdf\u64cd\u4f5c\u7b26\u5217\u8868\n\n\n\u89c4\u8303\u7684\u6838\u5fc3\u64cd\u4f5c\u7b26\u540d\u79f0\u4ee5\u7c97\u4f53\u663e\u793a\u3002\n\u5176\u4ed6\u6761\u76ee\u4ee3\u8868\u4e3b\u8981ReactiveX\u6838\u5fc3\u64cd\u4f5c\u7b26\u96c6\u4e4b\u5916\u7684\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u6216\u4e13\u4e1a\u64cd\u4f5c\u7b26\u7684\u8bed\u8a00\u7279\u5b9a\u53d8\u4f53\u3002\n\n\n\n\nAggregate\n\n\nAll\n\n\nAmb\n\n\nambArray\n\n\nambWith\n\n\nand_\n\n\nAnd\n\n\nAny\n\n\napply\n\n\nas_blocking\n\n\nasObservable\n\n\nAssertEqual\n\n\nasyncAction\n\n\nasyncFunc\n\n\nAverage\n\n\naverageDouble\n\n\naverageFloat\n\n\naverageInteger\n\n\naverageLong\n\n\nblocking\n\n\nblockingFirst\n\n\nblockingForEach\n\n\nblockingIterable\n\n\nblockingLast\n\n\nblockingLatest\n\n\nblockingMostRecent\n\n\nblockingNext\n\n\nblockingSingle\n\n\nblockingSubscribe\n\n\nBuffer\n\n\nbufferWithCount\n\n\nbufferWithTime\n\n\nbufferWithTimeOrCount\n\n\nbyLine\n\n\ncache\n\n\ncacheWithInitialCapacity\n\n\ncase\n\n\nCast\n\n\nCatch\n\n\ncatchError\n\n\ncatchException\n\n\ncollect\n\n\ncollect (RxScala version of Filter)\n\n\ncollectInto\n\n\nCombineLatest\n\n\ncombineLatestDelayError\n\n\ncombineLatestWith\n\n\nConcat\n\n\nconcat_all\n\n\nconcatAll\n\n\nconcatArray\n\n\nconcatArrayDelayError\n\n\nconcatArrayEager\n\n\nconcatDelayError\n\n\nconcatEager\n\n\nconcatMap\n\n\nconcatMapDelayError\n\n\nconcatMapEager\n\n\nconcatMapEagerDelayError\n\n\nconcatMapIterable\n\n\nconcatMapObserver\n\n\nconcatMapTo\n\n\nconcatWith\n\n\nConnect\n\n\nconnect_forever\n\n\ncons\n\n\nContains\n\n\ncontrolled\n\n\nCount\n\n\ncountLong\n\n\nCreate\n\n\ncycle\n\n\nDebounce\n\n\ndecode\n\n\nDefaultIfEmpty\n\n\nDefer\n\n\ndeferFuture\n\n\nDelay\n\n\ndelaySubscription\n\n\ndelayWithSelector\n\n\nDematerialize\n\n\nDistinct\n\n\ndistinctKey\n\n\ndistinctUntilChanged\n\n\ndistinctUntilKeyChanged\n\n\nDo\n\n\ndoAction\n\n\ndoAfterTerminate\n\n\ndoOnComplete\n\n\ndoOnCompleted\n\n\ndoOnDispose\n\n\ndoOnEach\n\n\ndoOnError\n\n\ndoOnLifecycle\n\n\ndoOnNext\n\n\ndoOnRequest\n\n\ndoOnSubscribe\n\n\ndoOnTerminate\n\n\ndoOnUnsubscribe\n\n\ndoseq\n\n\ndoWhile\n\n\ndrop\n\n\ndropRight\n\n\ndropUntil\n\n\ndropWhile\n\n\nElementAt\n\n\nElementAtOrDefault\n\n\nEmpty\n\n\nemptyObservable\n\n\nempty?\n\n\nencode\n\n\nensures\n\n\nerror\n\n\nevery\n\n\nexclusive\n\n\nexists\n\n\nexpand\n\n\nfailWith\n\n\nFilter\n\n\nfilterNot\n\n\nFinally\n\n\nfinallyAction\n\n\nfinallyDo\n\n\nfind\n\n\nfindIndex\n\n\nFirst\n\n\nfirstElement\n\n\nFirstOrDefault\n\n\nfirstOrElse\n\n\nFlatMap\n\n\nflatMapFirst\n\n\nflatMapIterable\n\n\nflatMapIterableWith\n\n\nflatMapLatest\n\n\nflatMapObserver\n\n\nflatMapWith\n\n\nflatMapWithMaxConcurrent\n\n\nflat_map_with_index\n\n\nflatten\n\n\nflattenDelayError\n\n\nfoldl\n\n\nfoldLeft\n\n\nfor\n\n\nforall\n\n\nForEach\n\n\nforEachFuture\n\n\nforEachWhile\n\n\nforIn\n\n\nforkJoin\n\n\nFrom\n\n\nfromAction\n\n\nfromArray\n\n\nFromAsyncPattern\n\n\nfromCallable\n\n\nfromCallback\n\n\nFromEvent\n\n\nFromEventPattern\n\n\nfromFunc0\n\n\nfromFuture\n\n\nfromIterable\n\n\nfromIterator\n\n\nfrom_list\n\n\nfromNodeCallback\n\n\nfromPromise\n\n\nfromPublisher\n\n\nfromRunnable\n\n\nGenerate\n\n\ngenerateWithAbsoluteTime\n\n\ngenerateWithRelativeTime\n\n\ngenerator\n\n\nGetEnumerator\n\n\ngetIterator\n\n\nGroupBy\n\n\nGroupByUntil\n\n\nGroupJoin\n\n\nhead\n\n\nheadOption\n\n\nheadOrElse\n\n\nif\n\n\nifThen\n\n\nIgnoreElements\n\n\nindexOf\n\n\ninterleave\n\n\ninterpose\n\n\nInterval\n\n\nintervalRange\n\n\ninto\n\n\nisEmpty\n\n\nitems\n\n\nJoin\n\n\njoin (string)\n\n\njortSort\n\n\njortSortUntil\n\n\nJust\n\n\nkeep\n\n\nkeep-indexed\n\n\nLast\n\n\nlastElement\n\n\nlastOption\n\n\nLastOrDefault\n\n\nlastOrElse\n\n\nLatest\n\n\nlatest (Rx.rb version of Switch)\n\n\nlength\n\n\nlet\n\n\nletBind\n\n\nlift\n\n\nlimit\n\n\nLongCount\n\n\nManySelect\n\n\nMap\n\n\nmap (RxClojure version of Zip)\n\n\nMapCat\n\n\nmapCat (RxClojure version of Zip)\n\n\nmap-indexed\n\n\nmapTo\n\n\nmapWithIndex\n\n\nMaterialize\n\n\nMax\n\n\nMaxBy\n\n\nMerge\n\n\nmergeAll\n\n\nmergeArray\n\n\nmergeArrayDelayError\n\n\nmerge_concurrent\n\n\nmergeDelayError\n\n\nmergeObservable\n\n\nmergeWith\n\n\nMin\n\n\nMinBy\n\n\nMostRecent\n\n\nMulticast\n\n\nmulticastWithSelector\n\n\nnest\n\n\nNever\n\n\nNext\n\n\nNext (BlockingObservable version)\n\n\nnone\n\n\nnonEmpty\n\n\nnth\n\n\nObserveOn\n\n\nObserveOnDispatcher\n\n\nobserveSingleOn\n\n\nof\n\n\nof_array\n\n\nofArrayChanges\n\n\nof_enumerable\n\n\nof_enumerator\n\n\nofObjectChanges\n\n\nOfType\n\n\nofWithScheduler\n\n\nonBackpressureBlock\n\n\nonBackpressureBuffer\n\n\nonBackpressureDrop\n\n\nOnErrorResumeNext\n\n\nonErrorReturn\n\n\nonErrorReturnItem\n\n\nonExceptionResumeNext\n\n\nonTerminateDetach\n\n\norElse\n\n\npairs\n\n\npairwise\n\n\npartition\n\n\npartition-all\n\n\npausable\n\n\npausableBuffered\n\n\npluck\n\n\nproduct\n\n\nPublish\n\n\nPublishLast\n\n\npublish_synchronized\n\n\npublishValue\n\n\nraise_error\n\n\nRange\n\n\nReduce\n\n\nreduceWith\n\n\nreductions\n\n\nRefCount\n\n\nRepeat\n\n\nrepeat_infinitely\n\n\nrepeatUntil\n\n\nrepeatWhen\n\n\nReplay\n\n\nrescue_error\n\n\nrest\n\n\nRetry\n\n\nretry_infinitely\n\n\nretryUntil\n\n\nretryWhen\n\n\nReturn\n\n\nreturnElement\n\n\nreturnValue\n\n\nrunAsync\n\n\nsafeSubscribe\n\n\nSample\n\n\nScan\n\n\nscanWith\n\n\nscope\n\n\nSelect (alternate name of Map)\n\n\nselect (alternate name of Filter)\n\n\nselectConcat\n\n\nselectConcatObserver\n\n\nSelectMany\n\n\nselectManyObserver\n\n\nselect_switch\n\n\nselectSwitch\n\n\nselectSwitchFirst\n\n\nselectWithMaxConcurrent\n\n\nselect_with_index\n\n\nseq\n\n\nSequenceEqual\n\n\nsequence_eql?\n\n\nSequenceEqualWith\n\n\nSerialize\n\n\nshare\n\n\nshareReplay\n\n\nshareValue\n\n\nSingle\n\n\nsingleElement\n\n\nSingleOrDefault\n\n\nsingleOption\n\n\nsingleOrElse\n\n\nsize\n\n\nSkip\n\n\nSkipLast\n\n\nskipLastWithTime\n\n\nSkipUntil\n\n\nskipUntilWithTime\n\n\nSkipWhile\n\n\nskipWhileWithIndex\n\n\nskip_with_time\n\n\nslice\n\n\nsliding\n\n\nslidingBuffer\n\n\nsome\n\n\nsort\n\n\nsorted\n\n\nsort-by\n\n\nsorted-list-by\n\n\nsplit\n\n\nsplit-with\n\n\nStart\n\n\nstartAsync\n\n\nstartFuture\n\n\nStartWith\n\n\nstartWithArray\n\n\nstringConcat\n\n\nstopAndWait\n\n\nsubscribe\n\n\nsubscribeActual\n\n\nSubscribeOn\n\n\nSubscribeOnDispatcher\n\n\nsubscribeOnCompleted\n\n\nsubscribeOnError\n\n\nsubscribeOnNext\n\n\nsubscribeWith\n\n\nSum\n\n\nsumDouble\n\n\nsumFloat\n\n\nsumInteger\n\n\nsumLong\n\n\nSwitch\n\n\nswitchCase\n\n\nswitchIfEmpty\n\n\nswitchLatest\n\n\nswitchMap\n\n\nswitchMapDelayError\n\n\nswitchOnNext\n\n\nswitchOnNextDelayError\n\n\nSynchronize\n\n\nTake\n\n\ntake_with_time\n\n\ntakeFirst\n\n\nTakeLast\n\n\ntakeLastBuffer\n\n\ntakeLastBufferWithTime\n\n\ntakeLastWithTime\n\n\ntakeRight (see also: TakeLast)\n\n\nTakeUntil\n\n\ntakeUntilWithTime\n\n\nTakeWhile\n\n\ntakeWhileWithIndex\n\n\ntail\n\n\ntap\n\n\ntapOnCompleted\n\n\ntapOnError\n\n\ntapOnNext\n\n\nThen\n\n\nthenDo\n\n\nThrottle\n\n\nthrottleFirst\n\n\nthrottleLast\n\n\nthrottleWithSelector\n\n\nthrottleWithTimeout\n\n\nThrow\n\n\nthrowError\n\n\nthrowException\n\n\nTimeInterval\n\n\nTimeout\n\n\ntimeoutWithSelector\n\n\nTimer\n\n\nTimestamp\n\n\nTo\n\n\nto_a\n\n\nToArray\n\n\nToAsync\n\n\ntoBlocking\n\n\ntoBuffer\n\n\nto_dict\n\n\nToDictionary\n\n\nToEnumerable\n\n\nToEvent\n\n\nToEventPattern\n\n\nToFlowable\n\n\nToFuture\n\n\nto_h\n\n\ntoIndexedSeq\n\n\ntoIterable\n\n\ntoIterator\n\n\nToList\n\n\nToLookup\n\n\ntoMap\n\n\ntoMultiMap\n\n\nToObservable\n\n\ntoSet\n\n\ntoSortedList\n\n\ntoStream\n\n\nToTask\n\n\ntoTraversable\n\n\ntoVector\n\n\ntumbling\n\n\ntumblingBuffer\n\n\nunsafeCreate\n\n\nunsubscribeOn\n\n\nUsing\n\n\nWhen\n\n\nWhere\n\n\nwhile\n\n\nwhileDo\n\n\nWindow\n\n\nwindowWithCount\n\n\nwindowWithTime\n\n\nwindowWithTimeOrCount\n\n\nwindowed\n\n\nwithFilter\n\n\nwithLatestFrom\n\n\nZip\n\n\nzipArray\n\n\nzipIterable\n\n\nzipWith\n\n\nzipWithIndex\n\n\n++\n\n\n+:\n\n\n:+", 
            "title": "Operators(\u89c2\u5bdf\u8005)"
        }, 
        {
            "location": "/ReactiveX/Operators/#_1", 
            "text": "", 
            "title": "\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#_2", 
            "text": "Each language-specific implementation of ReactiveX implements a set of operators. Although there is much overlap between implementations, there are also some operators that are only implemented in certain implementations. Also, each implementation tends to name its operators to resemble those of similar methods that are already familiar from other contexts in that language.", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/ReactiveX/Operators/#_3", 
            "text": "Most operators operate on an Observable and return an Observable. This allows you to apply these operators one after the other, in a chain. Each operator in the chain modifies the Observable that results from the operation of the previous operator.  There are other patterns, like the Builder Pattern, in which a variety of methods of a particular class operate on an item of that same class by modifying that object through the operation of the method. These patterns also allow you to chain the methods in a similar way. But while in the Builder Pattern, the order in which the methods appear in the chain does not usually matter, with the Observable operators order matters.  A chain of Observable operators do not operate independently on the original Observable that originates the chain, but they operate in turn, each one operating on the Observable generated by the operator immediately previous in the chain.", 
            "title": "\u94fe\u63a5\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#reactivex", 
            "text": "This page first lists what could be considered the \u201ccore\u201d operators in ReactiveX, and links to pages that have more in-depth information on how these operators work and how particular language-specific ReactiveX versions have implemented these operators.  Next is a \u201cdecision tree\u201d that may help you choose the operator that is most appropriate to your use case.  Finally, there is an alphabetical list of most of the operators available in the many language-specific implementations of ReactiveX. These link to the page that documents the core operator that most closely resembles the language-specific operator (so, for instance, the Rx.NET \u201cSelectMany\u201d operator links to the documentation of the FlatMap ReactiveX operator, of which \u201cSelectMany\u201d is the Rx.NET implementation).  If you want to implement your own operator, see Implementing Your Own Operators.  \u5185\u5bb9   \u5206\u7c7b\u64cd\u4f5c\u7b26  \u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u7684\u51b3\u7b56\u6811  \u4e00\u4e2a\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u53ef\u89c2\u5bdf\u64cd\u4f5c\u7b26\u5217\u8868", 
            "title": "ReactiveX\u7684\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#_4", 
            "text": "", 
            "title": "\u64cd\u4f5c\u7b26\u5206\u7c7b"
        }, 
        {
            "location": "/ReactiveX/Operators/#_5", 
            "text": "\u4ea7\u751f\u65b0\u7684\u89c2\u5bdf\u70b9\u7684\u64cd\u4f5c\u7b26\u3002   Create \u2014 create an Observable from scratch by calling observer methods programmatically  Defer \u2014 do not create the Observable until the observer subscribes, and create a fresh Observable for each observer  Empty/Never/Throw \u2014 create Observables that have very precise and limited behavior  From \u2014 convert some other object or data structure into an Observable  Interval \u2014 create an Observable that emits a sequence of integers spaced by a particular time interval  Just \u2014 convert an object or a set of objects into an Observable that emits that or those objects  Range \u2014 create an Observable that emits a range of sequential integers  Repeat \u2014 create an Observable that emits a particular item or sequence of items repeatedly  Start \u2014 create an Observable that emits the return value of a function  Timer \u2014 create an Observable that emits a single item after a given delay", 
            "title": "\u521b\u5efa\u89c2\u5bdf\u70b9"
        }, 
        {
            "location": "/ReactiveX/Operators/#_6", 
            "text": "\u8f6c\u6362\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6570\u636e\u7684\u64cd\u4f5c\u7b26\u3002   Buffer \u2014 periodically gather items from an Observable into bundles and emit these bundles rather than emitting the items one at a time  FlatMap \u2014 transform the items emitted by an Observable into Observables, then flatten the emissions from those into a single Observable  GroupBy \u2014 divide an Observable into a set of Observables that each emit a different group of items from the original Observable, organized by key  Map \u2014 transform the items emitted by an Observable by applying a function to each item  Scan \u2014 apply a function to each item emitted by an Observable, sequentially, and emit each successive value  Window \u2014 periodically subdivide items from an Observable into Observable windows and emit these windows rather than emitting the items one at a time", 
            "title": "\u8f6c\u6362\u89c2\u5bdf\u70b9"
        }, 
        {
            "location": "/ReactiveX/Operators/#_7", 
            "text": "\u6709\u9009\u62e9\u5730\u4ece\u6e90Observable\u53d1\u9001\u6570\u636e\u7684\u8fd0\u7b97\u7b26\u3002   Debounce \u2014 only emit an item from an Observable if a particular timespan has passed without it emitting another item  Distinct \u2014 suppress duplicate items emitted by an Observable  ElementAt \u2014 emit only item n emitted by an Observable  Filter \u2014 emit only those items from an Observable that pass a predicate test  First \u2014 emit only the first item, or the first item that meets a condition, from an Observable  IgnoreElements \u2014 do not emit any items from an Observable but mirror its termination notification  Last \u2014 emit only the last item emitted by an Observable  Sample \u2014 emit the most recent item emitted by an Observable within periodic time intervals  Skip \u2014 suppress the first n items emitted by an Observable  SkipLast \u2014 suppress the last n items emitted by an Observable  Take \u2014 emit only the first n items emitted by an Observable  TakeLast \u2014 emit only the last n items emitted by an Observable", 
            "title": "\u8fc7\u6ee4\u89c2\u5bdf\u70b9"
        }, 
        {
            "location": "/ReactiveX/Operators/#_8", 
            "text": "\u4f7f\u7528\u591a\u4e2a\u6e90Observable\u6765\u521b\u5efa\u5355\u4e2aObservable\u7684\u64cd\u4f5c\u5458   And/Then/When \u2014 combine sets of items emitted by two or more Observables by means of Pattern and Plan intermediaries  CombineLatest \u2014 when an item is emitted by either of two Observables, combine the latest item emitted by each Observable via a specified function and emit items based on the results of this function  Join \u2014 combine items emitted by two Observables whenever an item from one Observable is emitted during a time window defined according to an item emitted by the other Observable  Merge \u2014 combine multiple Observables into one by merging their emissions  StartWith \u2014 emit a specified sequence of items before beginning to emit the items from the source Observable  Switch \u2014 convert an Observable that emits Observables into a single Observable that emits the items emitted by the most-recently-emitted of those Observables  Zip \u2014 combine the emissions of multiple Observables together via a specified function and emit single items for each combination based on the results of this function", 
            "title": "\u7ed3\u5408\u89c2\u5bdf"
        }, 
        {
            "location": "/ReactiveX/Operators/#_9", 
            "text": "\u6709\u52a9\u4e8e\u4eceObservable\u7684\u9519\u8bef\u901a\u77e5\u4e2d\u6062\u590d\u7684\u64cd\u4f5c\u5458   Catch \u2014 recover from an onError notification by continuing the sequence without error  Retry \u2014 if a source Observable sends an onError notification, resubscribe to it in the hopes that it will complete without error", 
            "title": "\u9519\u8bef\u5904\u7406\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#_10", 
            "text": "\u4f7f\u7528Observables\u7684\u6709\u7528\u64cd\u4f5c\u7b26\u7684\u5de5\u5177\u7bb1   Delay \u2014 shift the emissions from an Observable forward in time by a particular amount  Do \u2014 register an action to take upon a variety of Observable lifecycle events  Materialize/Dematerialize \u2014 represent both the items emitted and the notifications sent as emitted items, or reverse this process  ObserveOn \u2014 specify the scheduler on which an observer will observe this Observable  Serialize \u2014 force an Observable to make serialized calls and to be well-behaved  Subscribe \u2014 operate upon the emissions and notifications from an Observable  SubscribeOn \u2014 specify the scheduler an Observable should use when it is subscribed to  TimeInterval \u2014 convert an Observable that emits items into one that emits indications of the amount of time elapsed between those emissions  Timeout \u2014 mirror the source Observable, but issue an error notification if a particular period of time elapses without any emitted items  Timestamp \u2014 attach a timestamp to each item emitted by an Observable  Using \u2014 create a disposable resource that has the same lifespan as the Observable", 
            "title": "\u53ef\u89c2\u5bdf\u7684\u5b9e\u7528\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#_11", 
            "text": "\u8bc4\u4f30\u4e00\u4e2a\u6216\u591a\u4e2aObservable\u6216Observables\u53d1\u9001\u7684\u6570\u636e\u7684\u64cd\u4f5c\u5458   All \u2014 determine whether all items emitted by an Observable meet some criteria  Amb \u2014 given two or more source Observables, emit all of the items from only the first of these Observables to emit an item  Contains \u2014 determine whether an Observable emits a particular item or not  DefaultIfEmpty \u2014 emit items from the source Observable, or a default item if the source Observable emits nothing  SequenceEqual \u2014 determine whether two Observables emit the same sequence of items  SkipUntil \u2014 discard items emitted by an Observable until a second Observable emits an item  SkipWhile \u2014 discard items emitted by an Observable until a specified condition becomes false  TakeUntil \u2014 discard items emitted by an Observable after a second Observable emits an item or terminates  TakeWhile \u2014 discard items emitted by an Observable after a specified condition becomes false", 
            "title": "\u6761\u4ef6\u548c\u5e03\u5c14\u8fd0\u7b97\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#_12", 
            "text": "\u5bf9\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6240\u6709\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\u7684\u64cd\u4f5c\u7b26   Average \u2014 calculates the average of numbers emitted by an Observable and emits this average  Concat \u2014 emit the emissions from two or more Observables without interleaving them  Count \u2014 count the number of items emitted by the source Observable and emit only this value  Max \u2014 determine, and emit, the maximum-valued item emitted by an Observable  Min \u2014 determine, and emit, the minimum-valued item emitted by an Observable  Reduce \u2014 apply a function to each item emitted by an Observable, sequentially, and emit the final value  Sum \u2014 calculate the sum of numbers emitted by an Observable and emit this sum", 
            "title": "\u6570\u5b66\u548c\u96c6\u5408\u8fd0\u7b97\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#_13", 
            "text": "backpressure operators \u2014 strategies for coping with Observables that produce items more rapidly than their observers consume them", 
            "title": "\u80cc\u538b\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#_14", 
            "text": "\u7279\u6b8a\u89c2\u5bdf\u70b9\u5177\u6709\u66f4\u7cbe\u786e\u63a7\u5236\u7684\u8ba2\u9605\u52a8\u6001   Connect \u2014 instruct a connectable Observable to begin emitting items to its subscribers  Publish \u2014 convert an ordinary Observable into a connectable Observable  RefCount \u2014 make a Connectable Observable behave like an ordinary Observable  Replay \u2014 ensure that all observers see the same sequence of emitted items, even if they subscribe after the Observable has begun emitting items", 
            "title": "\u53ef\u8fde\u63a5\u7684\u53ef\u89c2\u5bdf\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/ReactiveX/Operators/#_15", 
            "text": "To \u2014 convert an Observable into another object or data structure", 
            "title": "\u64cd\u4f5c\u7b26\u8f6c\u6362\u89c2\u5bdf\u8005"
        }, 
        {
            "location": "/ReactiveX/Operators/#_16", 
            "text": "\u7279\u6b8a\u89c2\u5bdf\u70b9\u5177\u6709\u66f4\u7cbe\u786e\u63a7\u5236\u7684\u8ba2\u9605\u52a8\u6001   \u51b3\u7b56\u6811  \u6211\u60f3\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u89c2\u5bdf\u70b9   ...\u53d1\u9001\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\u636e:  Just  ...\u8fd9\u662f\u4ece\u4e00\u4e2a\u540d\u4e3asubscribe-time\u7684\u51fd\u6570\u8fd4\u56de\u7684:  Start  ...\u8fd9\u662f\u4eceAction\uff0cCallable\uff0cRunnable\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u8fd4\u56de\u7684\uff0c\u5728\u8ba2\u9605\u65f6\u8c03\u7528:  From  ...\u7ecf\u8fc7\u6307\u5b9a\u7684\u5ef6\u8fdf:  Timer    ...\u4ece\u7279\u5b9a\u7684Array\uff0cIterable\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u4e2d\u62bd\u53d6\u5176\u53d1\u9001:  From  ...\u901a\u8fc7\u4ece\u672a\u6765\u68c0\u7d22\u5b83:  Start  ...\u4ece\u672a\u6765\u83b7\u5f97\u5b83\u7684\u5e8f\u5217:  From  ...\u5b83\u4f1a\u91cd\u590d\u53d1\u9001\u4e00\u7cfb\u5217\u6570\u636e:  Repeat  ...\u4ece\u5934\u5f00\u59cb\uff0c\u7528\u5b9a\u5236\u903b\u8f91:  Create  ...\u4e3a\u6bcf\u4e2a\u8ba2\u9605\u7684\u89c2\u5bdf\u8005:  Defer  ...\u53d1\u51fa\u4e00\u7cfb\u5217\u6574\u6570:  Range  ...\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u95f4\u9694:  Interval  ...\u7ecf\u8fc7\u6307\u5b9a\u7684\u5ef6\u8fdf:  Timer      ...\u5b8c\u6210\u6ca1\u6709\u6392\u653e\u6570\u636e:  Empty  ...\u6839\u672c\u6ca1\u6709\u505a\u4efb\u4f55\u4e8b\u60c5:  Never   \u6211\u60f3\u901a\u8fc7\u7ec4\u5408\u5176\u4ed6\u89c2\u5bdf\u70b9\u6765\u521b\u5efa\u4e00\u4e2a\u89c2\u5bdf\u70b9   ...\u5e76\u4ee5\u6240\u6536\u5230\u7684\u4efb\u4f55\u987a\u5e8f\u4ece\u6240\u6709\u89c2\u5bdf\u70b9\u53d1\u9001\u6240\u6709\u6570\u636e: Merge  ...\u5e76\u4ece\u6240\u6709\u89c2\u5bdf\u70b9\u4e2d\u53d1\u9001\u6240\u6709\u6570\u636e\uff0c\u6bcf\u6b21\u53ea\u80fd\u89c2\u5bdf\u4e00\u6b21: Concat  ...\u901a\u8fc7\u5c06\u4e24\u4e2a\u6216\u591a\u4e2aObserbles\u4e2d\u7684\u6570\u636e\u6309\u987a\u5e8f\u7ec4\u5408\u8d77\u6765\u4ee5\u4ea7\u751f\u65b0\u7684\u6570\u636e  ...\u6bcf\u5f53\u6bcf\u4e2a\u89c2\u5bdf\u8005\u53d1\u9001\u4e00\u4e2a\u65b0\u6570\u636e\u65f6: Zip  ...\u6bcf\u5f53\u4efb\u4e00\u89c2\u5bdf\u8005\u53d1\u9001\u4e00\u4e2a\u65b0\u6570\u636e\u65f6: CombineLatest  ...\u6bcf\u5f53\u4e00\u4e2a\u6570\u636e\u7531\u4e00\u4e2a\u89c2\u5bdf\u70b9\u5728\u7531\u53e6\u4e00\u4e2a\u6570\u636e\u53d1\u9001\u7684\u6570\u636e\u5b9a\u4e49\u7684\u7a97\u53e3\u4e2d\u53d1\u9001\u65f6: Join  ...\u901a\u8fc7\u6a21\u5f0f\u548c\u8ba1\u5212\u4e2d\u4ecb: And/Then/When    \u5e76\u4ec5\u4ece\u6700\u8fd1\u6392\u653e\u7684\u90a3\u4e9b\u89c2\u5bdf\u7269\u4e2d\u6563\u53d1\u6570\u636e: Switch   \u6211\u60f3\u5728\u8f6c\u6362\u5b83\u4eec\u540e\u4ece\u89c2\u5bdf\u70b9\u53d1\u9001\u6570\u636e   ...\u4e00\u6b21\u4e00\u4e2a\u529f\u80fd: Map  ...\u901a\u8fc7\u53d1\u9001\u76f8\u5e94\u7684\u89c2\u5bdf\u70b9s\u53d1\u9001\u7684\u6240\u6709\u6570\u636e: FlatMap  ...\u4e00\u6b21\u53ef\u89c2\u6d4b\uff0c\u6309\u7167\u5b83\u4eec\u53d1\u9001\u7684\u987a\u5e8f: ConcatMap    ...\u57fa\u4e8e\u5b83\u4eec\u4e4b\u524d\u7684\u6240\u6709\u6570\u636e: Scan  ...\u901a\u8fc7\u9644\u52a0\u65f6\u95f4\u6233\u7ed9\u4ed6\u4eec: Timestamp  ...\u6210\u4e3a\u6570\u636e\u6392\u653e\u4e4b\u524d\u6240\u7ecf\u5386\u7684\u65f6\u95f4\u91cf\u7684\u6307\u6807: TimeInterval   \u6211\u60f3\u5728\u91cd\u65b0\u53d1\u9001\u4e4b\u524d\u53ca\u65f6\u5411\u524d\u79fb\u52a8\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6570\u636e : Delay  \u6211\u60f3\u5c06\u6765\u81ea\u89c2\u5bdf\u70b9\u7684\u6570\u636e\u548c\u901a\u77e5\u8f6c\u6362\u4e3a\u6570\u636e\u5e76\u91cd\u65b0\u53d1\u9001\u5b83\u4eec   ...\u901a\u8fc7\u5c06\u5b83\u4eec\u5305\u88c5\u5728\u901a\u77e5\u5bf9\u8c61\u4e2d: Materialize  ...\u7136\u540e\u6211\u53ef\u4ee5\u518d\u6253\u5f00: Dematerialize     \u6211\u60f3\u5ffd\u7565\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6240\u6709\u6570\u636e\uff0c\u53ea\u4f20\u9012\u5b8c\u6210/\u9519\u8bef\u901a\u77e5 : IgnoreElements  \u6211\u60f3\u955c\u50cf\u4e00\u4e2a\u89c2\u5bdf\u70b9\uff0c\u4f46\u5728\u5b83\u7684\u5e8f\u5217\u524d\u52a0\u4e0a\u6570\u636e : StartWith   \u53ea\u6709\u5f53\u5b83\u7684\u987a\u5e8f\u662f\u7a7a\u7684: DefaultIfEmpty   \u6211\u60f3\u4ece\u89c2\u5bdf\u70b9\u6536\u96c6\u6570\u636e\u5e76\u5c06\u5b83\u4eec\u91cd\u65b0\u53d1\u9001\u4e3a\u6570\u636e\u7684\u7f13\u51b2\u533a : Buffer   \u53ea\u5305\u542b\u6700\u540e\u53d1\u9001\u7684\u6570\u636e: TakeLastBuffer   \u6211\u60f3\u5c06\u4e00\u4e2a\u89c2\u5bdf\u70b9\u5206\u6210\u591a\u4e2a\u89c2\u5bdf\u70b9 : Window   \u6240\u4ee5\u7c7b\u4f3c\u7684\u6570\u636e\u6700\u7ec8\u843d\u5728\u76f8\u540c\u7684\u89c2\u5bdf\u70b9\u4e0a: GroupBy   \u6211\u60f3\u8981\u68c0\u7d22\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u7279\u5b9a\u6570\u636e:   \u5728\u5b8c\u6210\u4e4b\u524d\u53d1\u51fa\u7684\u6700\u540e\u4e00\u4e2a\u6570\u636e: Last  \u5b83\u53d1\u9001\u7684\u552f\u4e00\u6570\u636e: Single  \u5b83\u53d1\u51fa\u7684\u7b2c\u4e00\u4e2a\u6570\u636e: First   \u6211\u60f3\u91cd\u65b0\u53d1\u9001\u89c2\u5bdf\u70b9\u4e2d\u7684\u67d0\u4e9b\u6570\u636e   ...\u901a\u8fc7\u8fc7\u6ee4\u90a3\u4e9b\u4e0d\u5339\u914d\u67d0\u4e9b\u8c13\u8bcd\u7684\u90a3\u4e9b: Filter  ...\u4e5f\u5c31\u662f\u53ea\u6709\u7b2c\u4e00\u4e2a\u6570\u636e: First  ...\u4e5f\u5c31\u662f\u53ea\u6709\u7b2c\u4e00\u9879: Take  ...\u4e5f\u5c31\u662f\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u6570\u636e: Last  ...\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u6570\u636en: ElementAt  ...\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u90a3\u4e9b\u7b2c\u4e00\u9879\u4e4b\u540e\u7684\u6570\u636e  ...\u4e5f\u5c31\u662f\u524dn\u4e2a\u6570\u636e\u4e4b\u540e: Skip  ...\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u6570\u636e\u4e0e\u8c13\u8bcd\u5339\u914d\u4e3a\u6b62: SkipWhile  ...\u5373\u5728\u6700\u521d\u7684\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e: Skip  ...\u4e5f\u5c31\u662f\u5728\u7b2c\u4e8c\u4e2a\u89c2\u5bdf\u70b9\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u4e4b\u540e: SkipUntil    ...\u5373\u9664\u6700\u540e\u4e00\u9879\u5916\u7684\u6570\u636e  ...\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u4e86\u6700\u540e\u7684n\u4e2a\u6570\u636e: SkipLast  ...\u4e5f\u5c31\u662f\u8bf4\uff0c\u76f4\u5230\u5176\u4e2d\u4e00\u4e2a\u6570\u636e\u4e0e\u8c13\u8bcd\u5339\u914d\u4e3a\u6b62: TakeWhile  ...\u4e5f\u5c31\u662f\u8bf4\uff0c\u6e90\u4ee3\u7801\u5b8c\u6210\u524d\u4e00\u6bb5\u65f6\u95f4\u5185\u53d1\u5e03\u7684\u6570\u636e\u9664\u5916: SkipLast  ...\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u4e86\u5728\u7b2c\u4e8c\u4e2a\u89c2\u5bdf\u70b9\u53d1\u51fa\u6570\u636e\u4e4b\u540e\u53d1\u9001\u7684\u6570\u636e\u5916: TakeUntil    ...\u5b9a\u671f\u5bf9\u89c2\u5bdf\u70b9\u8fdb\u884c\u91c7\u6837: Sample  ...\u901a\u8fc7\u53ea\u53d1\u51fa\u5728\u67d0\u4e2a\u6301\u7eed\u65f6\u95f4\u5185\u6ca1\u6709\u88ab\u5176\u4ed6\u6570\u636e\u8ffd\u8e2a\u7684\u6570\u636e: Debounce  ...\u901a\u8fc7\u6291\u5236\u5df2\u7ecf\u53d1\u51fa\u6570\u636e\u7684\u91cd\u590d\u6570\u636e: Distinct  ...\u5982\u679c\u4ed6\u4eec\u7acb\u5373\u8ddf\u968f\u4ed6\u4eec\u91cd\u590d\u7684\u6570\u636e: DistinctUntilChanged    ...\u5728\u5f00\u59cb\u53d1\u5e03\u6570\u636e\u4e4b\u540e\uff0c\u5ef6\u8fdf\u6211\u7684\u8ba2\u9605\u4e00\u6bb5\u65f6\u95f4   \u6211\u53ea\u60f3\u4ece\u89c2\u5bdf\u70b9\u7684\u6570\u636e\u4e2d\u91cd\u65b0\u53d1\u653e\u6570\u636e\uff0c\u6761\u4ef6\u662f\u5b83\u662f\u89c2\u5bdf\u70b9\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u53d1\u9001\u6570\u636e\u7684\u6570\u636e  \u6211\u60f3\u8bc4\u4f30\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6574\u4e2a\u6570\u636e\u5e8f\u5217   ...\u5e76\u53d1\u51fa\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u662f\u5426\u6240\u6709\u6570\u636e\u90fd\u901a\u8fc7\u4e86\u4e00\u4e9b\u6d4b\u8bd5: All  ...\u5e76\u53d1\u51fa\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u89c2\u5bdf\u70b9\u662f\u5426\u53d1\u9001\u4e86\u4efb\u4f55\u6570\u636e\uff08\u901a\u8fc7\u4e00\u4e9b\u6d4b\u8bd5\uff09: Contains  ...\u5e76\u53d1\u51fa\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u89c2\u5bdf\u70b9\u662f\u5426\u4e0d\u53d1\u9001\u4efb\u4f55\u6570\u636e: IsEmpty  ...\u5e76\u53d1\u51fa\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u6307\u793a\u8be5\u5e8f\u5217\u662f\u5426\u4e0e\u7b2c\u4e8c\u4e2a\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u5e8f\u5217\u76f8\u540c: SequenceEqual  ...\u5e76\u53d1\u51fa\u5176\u6240\u6709\u503c\u7684\u5e73\u5747\u503c: Average  ...\u5e76\u53d1\u51fa\u5176\u6240\u6709\u503c\u7684\u603b\u548c: Sum  ...\u5e76\u53d1\u51fa\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u5e8f\u5217\u4e2d\u6709\u591a\u5c11\u6570\u636e: Count  ...\u5e76\u53d1\u51fa\u5177\u6709\u6700\u5927\u503c\u7684\u6570\u636e: Max  ...\u5e76\u53d1\u51fa\u5177\u6709\u6700\u5c0f\u503c\u7684\u6570\u636e: Min  ...\u901a\u8fc7\u4f9d\u6b21\u5bf9\u6bcf\u4e2a\u6570\u636e\u5e94\u7528\u805a\u5408\u51fd\u6570\u5e76\u53d1\u5e03\u7ed3\u679c: Scan   \u6211\u60f3\u5c06\u89c2\u5bdf\u70b9\u53d1\u51fa\u7684\u6574\u4e2a\u6570\u636e\u5e8f\u5217\u8f6c\u6362\u4e3a\u5176\u4ed6\u6570\u636e\u7ed3\u6784  \u6211\u5e0c\u671b\u64cd\u4f5c\u5458\u5728\u7279\u5b9a\u7684\u8c03\u5ea6\u7a0b\u5e8f\u4e0a\u8fd0\u884c : SubscribeOn   ...\u5f53\u5b83\u901a\u77e5\u89c2\u5bdf\u5458\u65f6: ObserveOn   \u6211\u5e0c\u671b\u89c2\u5bdf\u70b9\u5728\u53d1\u751f\u67d0\u4e9b\u4e8b\u4ef6\u65f6\u8c03\u7528\u7279\u5b9a\u7684\u64cd\u4f5c  \u6211\u60f3\u8981\u4e00\u4e2a\u53ef\u4ee5\u901a\u77e5\u89c2\u5bdf\u8005\u9519\u8bef\u7684\u89c2\u5bdf\u70b9   ...\u5982\u679c\u7ecf\u8fc7\u4e00\u6bb5\u6307\u5b9a\u7684\u65f6\u95f4\u800c\u6ca1\u6709\u53d1\u9001\u6570\u636e   \u6211\u5e0c\u671b\u89c2\u5bdf\u70b9\u80fd\u591f\u4f18\u96c5\u5730\u6062\u590d   ...\u4ece\u8d85\u65f6\u5207\u6362\u5230\u5907\u4efd\u89c2\u5bdf\u70b9: Timeout  ...\u6765\u81ea\u4e0a\u6e38\u9519\u8bef\u901a\u77e5: Catch  ...\u901a\u8fc7\u5c1d\u8bd5\u91cd\u65b0\u8ba2\u9605\u4e0a\u6e38\u89c2\u5bdf\u70b9: Retry     \u6211\u60f3\u521b\u5efa\u4e00\u4e2a\u4e0e\u89c2\u5bdf\u70b9\u5177\u6709\u76f8\u540c\u751f\u547d\u5468\u671f\u7684\u8d44\u6e90 : Using  \u6211\u60f3\u8ba2\u9605\u4e00\u4e2a\u89c2\u5bdf\u70b9\u5e76\u63a5\u6536\u4e00\u4e2a\u963b\u585e\uff0c\u76f4\u5230\u89c2\u5bdf\u70b9\u5b8c\u6210 : Start  \u6211\u60f3\u8981\u4e00\u4e2a\u89c2\u5bdf\u70b9\uff0c\u76f4\u5230\u8be2\u95ee\u624d\u5f00\u59cb\u5411\u8ba2\u9605\u8005\u53d1\u9001\u6570\u636e : Publish   ...\u901a\u8fc7\u5c1d\u8bd5\u91cd\u65b0\u8ba2\u9605\u4e0a\u6e38\u89c2\u5bdf\u70b9: PublishLast  ...\u7136\u540e\u53d1\u51fa\u5b8c\u6574\u7684\u5e8f\u5217\uff0c\u751a\u81f3\u53d1\u9001\u7ed9\u5e8f\u5217\u5f00\u59cb\u540e\u8ba2\u9605\u7684\u4eba: Replay  ...\u4f46\u662f\u6211\u5e0c\u671b\u4e00\u65e6\u6240\u6709\u8ba2\u9605\u8005\u90fd\u9000\u8ba2\uff0c\u5b83\u5c31\u4f1a\u6d88\u5931: RefCount  ...\u7136\u540e\u6211\u60f3\u8ba9\u5b83\u5f00\u59cb: Connect    \u4e5f\u53ef\u4ee5\u770b\u770b   \u6211\u4f7f\u7528\u54ea\u4e2a\u64cd\u4f5c\u7b26\uff1f \u7531Dennis Stoyano\u63d0\u4f9b (\u4e00\u4e2a\u7c7b\u4f3c\u7684\u51b3\u7b56\u6811\uff0c\u7279\u5b9a\u4e8eRxJS\u64cd\u4f5c\u7b26)", 
            "title": "\u89c2\u5bdf\u70b9\u64cd\u4f5c\u7b26\u7684\u51b3\u7b56\u6811"
        }, 
        {
            "location": "/ReactiveX/Operators/#_17", 
            "text": "\u89c4\u8303\u7684\u6838\u5fc3\u64cd\u4f5c\u7b26\u540d\u79f0\u4ee5\u7c97\u4f53\u663e\u793a\u3002\n\u5176\u4ed6\u6761\u76ee\u4ee3\u8868\u4e3b\u8981ReactiveX\u6838\u5fc3\u64cd\u4f5c\u7b26\u96c6\u4e4b\u5916\u7684\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u6216\u4e13\u4e1a\u64cd\u4f5c\u7b26\u7684\u8bed\u8a00\u7279\u5b9a\u53d8\u4f53\u3002   Aggregate  All  Amb  ambArray  ambWith  and_  And  Any  apply  as_blocking  asObservable  AssertEqual  asyncAction  asyncFunc  Average  averageDouble  averageFloat  averageInteger  averageLong  blocking  blockingFirst  blockingForEach  blockingIterable  blockingLast  blockingLatest  blockingMostRecent  blockingNext  blockingSingle  blockingSubscribe  Buffer  bufferWithCount  bufferWithTime  bufferWithTimeOrCount  byLine  cache  cacheWithInitialCapacity  case  Cast  Catch  catchError  catchException  collect  collect (RxScala version of Filter)  collectInto  CombineLatest  combineLatestDelayError  combineLatestWith  Concat  concat_all  concatAll  concatArray  concatArrayDelayError  concatArrayEager  concatDelayError  concatEager  concatMap  concatMapDelayError  concatMapEager  concatMapEagerDelayError  concatMapIterable  concatMapObserver  concatMapTo  concatWith  Connect  connect_forever  cons  Contains  controlled  Count  countLong  Create  cycle  Debounce  decode  DefaultIfEmpty  Defer  deferFuture  Delay  delaySubscription  delayWithSelector  Dematerialize  Distinct  distinctKey  distinctUntilChanged  distinctUntilKeyChanged  Do  doAction  doAfterTerminate  doOnComplete  doOnCompleted  doOnDispose  doOnEach  doOnError  doOnLifecycle  doOnNext  doOnRequest  doOnSubscribe  doOnTerminate  doOnUnsubscribe  doseq  doWhile  drop  dropRight  dropUntil  dropWhile  ElementAt  ElementAtOrDefault  Empty  emptyObservable  empty?  encode  ensures  error  every  exclusive  exists  expand  failWith  Filter  filterNot  Finally  finallyAction  finallyDo  find  findIndex  First  firstElement  FirstOrDefault  firstOrElse  FlatMap  flatMapFirst  flatMapIterable  flatMapIterableWith  flatMapLatest  flatMapObserver  flatMapWith  flatMapWithMaxConcurrent  flat_map_with_index  flatten  flattenDelayError  foldl  foldLeft  for  forall  ForEach  forEachFuture  forEachWhile  forIn  forkJoin  From  fromAction  fromArray  FromAsyncPattern  fromCallable  fromCallback  FromEvent  FromEventPattern  fromFunc0  fromFuture  fromIterable  fromIterator  from_list  fromNodeCallback  fromPromise  fromPublisher  fromRunnable  Generate  generateWithAbsoluteTime  generateWithRelativeTime  generator  GetEnumerator  getIterator  GroupBy  GroupByUntil  GroupJoin  head  headOption  headOrElse  if  ifThen  IgnoreElements  indexOf  interleave  interpose  Interval  intervalRange  into  isEmpty  items  Join  join (string)  jortSort  jortSortUntil  Just  keep  keep-indexed  Last  lastElement  lastOption  LastOrDefault  lastOrElse  Latest  latest (Rx.rb version of Switch)  length  let  letBind  lift  limit  LongCount  ManySelect  Map  map (RxClojure version of Zip)  MapCat  mapCat (RxClojure version of Zip)  map-indexed  mapTo  mapWithIndex  Materialize  Max  MaxBy  Merge  mergeAll  mergeArray  mergeArrayDelayError  merge_concurrent  mergeDelayError  mergeObservable  mergeWith  Min  MinBy  MostRecent  Multicast  multicastWithSelector  nest  Never  Next  Next (BlockingObservable version)  none  nonEmpty  nth  ObserveOn  ObserveOnDispatcher  observeSingleOn  of  of_array  ofArrayChanges  of_enumerable  of_enumerator  ofObjectChanges  OfType  ofWithScheduler  onBackpressureBlock  onBackpressureBuffer  onBackpressureDrop  OnErrorResumeNext  onErrorReturn  onErrorReturnItem  onExceptionResumeNext  onTerminateDetach  orElse  pairs  pairwise  partition  partition-all  pausable  pausableBuffered  pluck  product  Publish  PublishLast  publish_synchronized  publishValue  raise_error  Range  Reduce  reduceWith  reductions  RefCount  Repeat  repeat_infinitely  repeatUntil  repeatWhen  Replay  rescue_error  rest  Retry  retry_infinitely  retryUntil  retryWhen  Return  returnElement  returnValue  runAsync  safeSubscribe  Sample  Scan  scanWith  scope  Select (alternate name of Map)  select (alternate name of Filter)  selectConcat  selectConcatObserver  SelectMany  selectManyObserver  select_switch  selectSwitch  selectSwitchFirst  selectWithMaxConcurrent  select_with_index  seq  SequenceEqual  sequence_eql?  SequenceEqualWith  Serialize  share  shareReplay  shareValue  Single  singleElement  SingleOrDefault  singleOption  singleOrElse  size  Skip  SkipLast  skipLastWithTime  SkipUntil  skipUntilWithTime  SkipWhile  skipWhileWithIndex  skip_with_time  slice  sliding  slidingBuffer  some  sort  sorted  sort-by  sorted-list-by  split  split-with  Start  startAsync  startFuture  StartWith  startWithArray  stringConcat  stopAndWait  subscribe  subscribeActual  SubscribeOn  SubscribeOnDispatcher  subscribeOnCompleted  subscribeOnError  subscribeOnNext  subscribeWith  Sum  sumDouble  sumFloat  sumInteger  sumLong  Switch  switchCase  switchIfEmpty  switchLatest  switchMap  switchMapDelayError  switchOnNext  switchOnNextDelayError  Synchronize  Take  take_with_time  takeFirst  TakeLast  takeLastBuffer  takeLastBufferWithTime  takeLastWithTime  takeRight (see also: TakeLast)  TakeUntil  takeUntilWithTime  TakeWhile  takeWhileWithIndex  tail  tap  tapOnCompleted  tapOnError  tapOnNext  Then  thenDo  Throttle  throttleFirst  throttleLast  throttleWithSelector  throttleWithTimeout  Throw  throwError  throwException  TimeInterval  Timeout  timeoutWithSelector  Timer  Timestamp  To  to_a  ToArray  ToAsync  toBlocking  toBuffer  to_dict  ToDictionary  ToEnumerable  ToEvent  ToEventPattern  ToFlowable  ToFuture  to_h  toIndexedSeq  toIterable  toIterator  ToList  ToLookup  toMap  toMultiMap  ToObservable  toSet  toSortedList  toStream  ToTask  toTraversable  toVector  tumbling  tumblingBuffer  unsafeCreate  unsubscribeOn  Using  When  Where  while  whileDo  Window  windowWithCount  windowWithTime  windowWithTimeOrCount  windowed  withFilter  withLatestFrom  Zip  zipArray  zipIterable  zipWith  zipWithIndex  ++  +:  :+", 
            "title": "\u4e00\u4e2a\u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u7684\u53ef\u89c2\u5bdf\u64cd\u4f5c\u7b26\u5217\u8868"
        }, 
        {
            "location": "/ReactiveX/Single/", 
            "text": "Single\n\n\nRxJava (and its derivatives like RxGroovy \n RxScala) has developed an Observable variant called \u201cSingle.\u201d\n\n\nA Single is something like an Observable, but instead of emitting a series of values \u2014 anywhere from none at all to an infinite number \u2014 it always either emits one value or an error notification.\n\n\nFor this reason, instead of subscribing to a Single with the three methods you use to respond to notifications from an Observable (onNext, onError, and onCompleted), you only use two methods to subscribe:\n\n\nonSuccess\n    a Single passes this method the sole item that the Single emits\n\n\nonError\n    a Single passes this method the Throwable that caused the Single to be unable to emit an item\n\n\nA Single will call only one of these methods, and will only call it once. Upon calling either method, the Single terminates and the subscription to it ends.\n\n\nComposition via Single Operators\n\n\nLike Observables, Singles can be manipulated by means of a variety of operators. Some operators also allow for an interface between the Observable world and the Single world so that you can mix the two varieties:\n\n\n\n\n\n\n\n\noperator\n\n\nreturns\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncompose\n\n\nSingle\n\n\nallows you create a custom operator\n\n\n\n\n\n\nconcat and concatWith\n\n\nObservable\n\n\nconcatenates the items emitted by multiple Singles as Observable emissions\n\n\n\n\n\n\ncreate\n\n\nSingle\n\n\ncreate a Single from scratch by calling subscriber methods explicitly\n\n\n\n\n\n\ndelay\n\n\nSingle\n\n\nmove the emission of an item from a Single forward in time\n\n\n\n\n\n\ndoOnError\n\n\nSingle\n\n\nreturns a Single that also calls a method you specify when it calls onError\n\n\n\n\n\n\ndoOnSuccess\n\n\nSingle\n\n\nreturns a Single that also calls a method you specify when it calls onSuccess\n\n\n\n\n\n\nerror\n\n\nSingle\n\n\nreturns a Single that immediately notifies subscribers of an error\n\n\n\n\n\n\nflatMap\n\n\nSingle\n\n\nreturns a Single that is the result of a function applied to an item emitted by a Single\n\n\n\n\n\n\nflatMapObservable\n\n\nObservable\n\n\nreturns an Observable that is the result of a function applied to an item emitted by a Single\n\n\n\n\n\n\nfrom\n\n\nSingle\n\n\nconverts a Future into a Single\n\n\n\n\n\n\njust\n\n\nSingle\n\n\nreturns a Single that emits a specified item\n\n\n\n\n\n\nmap\n\n\nSingle\n\n\nreturns a Single that emits the result of a function applied to the item emitted by the source Single\n\n\n\n\n\n\nmerge\n\n\nSingle\n\n\nconverts a Single that emits a second Single into a Single that emits the item emitted by the second Single\n\n\n\n\n\n\nmerge and mergeWith\n\n\nObservable\n\n\nmerges the items emitted by multiple Singles as Observable emissions\n\n\n\n\n\n\nobserveOn\n\n\nSingle\n\n\ninstructs the Single to call the subscriber methods on a particular Scheduler\n\n\n\n\n\n\nonErrorReturn\n\n\nSingle\n\n\nconverts a Single that makes an error notification into a Single that emits a specified item\n\n\n\n\n\n\nsubscribeOn\n\n\nSingle\n\n\ninstructs the Single to operate on a particular Scheduler\n\n\n\n\n\n\ntimeout\n\n\nSingle\n\n\nreturns a Single that makes an error notification if the source Single does not emit a value in a specified time period\n\n\n\n\n\n\ntoSingle\n\n\nSingle\n\n\nconverts an Observable that emits a single item into a Single that emits that item\n\n\n\n\n\n\ntoObservable\n\n\nObservable\n\n\nconverts a Single into an Observable that emits the item emitted by the Single and then completes\n\n\n\n\n\n\nzip and zipWith\n\n\nSingle\n\n\nreturns a Single that emits an item that is the result of a function applied to items emitted by two or more other Singles\n\n\n\n\n\n\n\n\nThe following sections of this page will give marble diagrams that explain these operators schematically. This diagram explains how Singles are represented in marble diagrams:\n\n\n\n\ncompose\n\n\nconcat and concatWith\n\n\n\n\nThere is also an instance version of this operator:\n\n\n\n\ncreate\n\n\n\n\ndelay\n\n\n\n\nThere is also a version of this operator that allows you to perform the delay on a particular Scheduler:\n\n\n\n\ndoOnError\n\n\n\n\ndoOnSuccess\n\n\n\n\nerror\n\n\n\n\nflatMap\n\n\n\n\nflatMapObservable\n\n\n\n\nfrom\n\n\n\n\nThere is also a variety that takes a Scheduler as an argument:\n\n\n\n\njust\n\n\n\n\nmap\n\n\n\n\nmerge and mergeWith\n\n\nOne version of merge takes a Single that emits a second Single and converts it into a Single that emits the item emitted by that second Single:\n\n\n\n\nAnother version takes two or more Singles and merges them into an Observable that emits the items emitted by the source Singles (in an arbitrary order):\n\n\n\n\nobserveOn\n\n\n\n\nonErrorReturn\n\n\n\n\nsubscribeOn\n\n\n\n\ntimeout\n\n\nTimeout will cause a Single to abort with an error notification if it does not emit an item in a specified period of time after it is subscribed to. One version allows you to set this time out by means of a number of specified time units:\n\n\n\n\nYou can also specify a particular Scheduler for the timer to operate on:\n\n\n\n\nA version of the timeout operator allows you to switch to a backup Single rather than sending an error notification if the timeout expires:\n\n\n\n\nThis, too, has a Scheduler-specific version:\n\n\n\n\ntoObservable\n\n\n\n\nzip and zipWith", 
            "title": "Single(\u5355)"
        }, 
        {
            "location": "/ReactiveX/Single/#single", 
            "text": "RxJava (and its derivatives like RxGroovy   RxScala) has developed an Observable variant called \u201cSingle.\u201d  A Single is something like an Observable, but instead of emitting a series of values \u2014 anywhere from none at all to an infinite number \u2014 it always either emits one value or an error notification.  For this reason, instead of subscribing to a Single with the three methods you use to respond to notifications from an Observable (onNext, onError, and onCompleted), you only use two methods to subscribe:  onSuccess\n    a Single passes this method the sole item that the Single emits  onError\n    a Single passes this method the Throwable that caused the Single to be unable to emit an item  A Single will call only one of these methods, and will only call it once. Upon calling either method, the Single terminates and the subscription to it ends.", 
            "title": "Single"
        }, 
        {
            "location": "/ReactiveX/Single/#composition-via-single-operators", 
            "text": "Like Observables, Singles can be manipulated by means of a variety of operators. Some operators also allow for an interface between the Observable world and the Single world so that you can mix the two varieties:     operator  returns  description      compose  Single  allows you create a custom operator    concat and concatWith  Observable  concatenates the items emitted by multiple Singles as Observable emissions    create  Single  create a Single from scratch by calling subscriber methods explicitly    delay  Single  move the emission of an item from a Single forward in time    doOnError  Single  returns a Single that also calls a method you specify when it calls onError    doOnSuccess  Single  returns a Single that also calls a method you specify when it calls onSuccess    error  Single  returns a Single that immediately notifies subscribers of an error    flatMap  Single  returns a Single that is the result of a function applied to an item emitted by a Single    flatMapObservable  Observable  returns an Observable that is the result of a function applied to an item emitted by a Single    from  Single  converts a Future into a Single    just  Single  returns a Single that emits a specified item    map  Single  returns a Single that emits the result of a function applied to the item emitted by the source Single    merge  Single  converts a Single that emits a second Single into a Single that emits the item emitted by the second Single    merge and mergeWith  Observable  merges the items emitted by multiple Singles as Observable emissions    observeOn  Single  instructs the Single to call the subscriber methods on a particular Scheduler    onErrorReturn  Single  converts a Single that makes an error notification into a Single that emits a specified item    subscribeOn  Single  instructs the Single to operate on a particular Scheduler    timeout  Single  returns a Single that makes an error notification if the source Single does not emit a value in a specified time period    toSingle  Single  converts an Observable that emits a single item into a Single that emits that item    toObservable  Observable  converts a Single into an Observable that emits the item emitted by the Single and then completes    zip and zipWith  Single  returns a Single that emits an item that is the result of a function applied to items emitted by two or more other Singles     The following sections of this page will give marble diagrams that explain these operators schematically. This diagram explains how Singles are represented in marble diagrams:", 
            "title": "Composition via Single Operators"
        }, 
        {
            "location": "/ReactiveX/Single/#compose", 
            "text": "", 
            "title": "compose"
        }, 
        {
            "location": "/ReactiveX/Single/#concat-and-concatwith", 
            "text": "There is also an instance version of this operator:", 
            "title": "concat and concatWith"
        }, 
        {
            "location": "/ReactiveX/Single/#create", 
            "text": "", 
            "title": "create"
        }, 
        {
            "location": "/ReactiveX/Single/#delay", 
            "text": "There is also a version of this operator that allows you to perform the delay on a particular Scheduler:", 
            "title": "delay"
        }, 
        {
            "location": "/ReactiveX/Single/#doonerror", 
            "text": "", 
            "title": "doOnError"
        }, 
        {
            "location": "/ReactiveX/Single/#doonsuccess", 
            "text": "", 
            "title": "doOnSuccess"
        }, 
        {
            "location": "/ReactiveX/Single/#error", 
            "text": "", 
            "title": "error"
        }, 
        {
            "location": "/ReactiveX/Single/#flatmap", 
            "text": "", 
            "title": "flatMap"
        }, 
        {
            "location": "/ReactiveX/Single/#flatmapobservable", 
            "text": "", 
            "title": "flatMapObservable"
        }, 
        {
            "location": "/ReactiveX/Single/#from", 
            "text": "There is also a variety that takes a Scheduler as an argument:", 
            "title": "from"
        }, 
        {
            "location": "/ReactiveX/Single/#just", 
            "text": "", 
            "title": "just"
        }, 
        {
            "location": "/ReactiveX/Single/#map", 
            "text": "", 
            "title": "map"
        }, 
        {
            "location": "/ReactiveX/Single/#merge-and-mergewith", 
            "text": "One version of merge takes a Single that emits a second Single and converts it into a Single that emits the item emitted by that second Single:   Another version takes two or more Singles and merges them into an Observable that emits the items emitted by the source Singles (in an arbitrary order):", 
            "title": "merge and mergeWith"
        }, 
        {
            "location": "/ReactiveX/Single/#observeon", 
            "text": "", 
            "title": "observeOn"
        }, 
        {
            "location": "/ReactiveX/Single/#onerrorreturn", 
            "text": "", 
            "title": "onErrorReturn"
        }, 
        {
            "location": "/ReactiveX/Single/#subscribeon", 
            "text": "", 
            "title": "subscribeOn"
        }, 
        {
            "location": "/ReactiveX/Single/#timeout", 
            "text": "Timeout will cause a Single to abort with an error notification if it does not emit an item in a specified period of time after it is subscribed to. One version allows you to set this time out by means of a number of specified time units:   You can also specify a particular Scheduler for the timer to operate on:   A version of the timeout operator allows you to switch to a backup Single rather than sending an error notification if the timeout expires:   This, too, has a Scheduler-specific version:", 
            "title": "timeout"
        }, 
        {
            "location": "/ReactiveX/Single/#toobservable", 
            "text": "", 
            "title": "toObservable"
        }, 
        {
            "location": "/ReactiveX/Single/#zip-and-zipwith", 
            "text": "", 
            "title": "zip and zipWith"
        }, 
        {
            "location": "/ReactiveX/Subject/", 
            "text": "\u4e3b\u4f53\n\n\nSubject\u662f\u4e00\u79cd\u6865\u6881\u6216\u4ee3\u7406\uff0c\u53ef\u4ee5\u5728ReactiveX\u7684\u67d0\u4e9b\u5b9e\u73b0\u4e2d\u4f7f\u7528\uff0c\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u89c2\u5bdf\u8005\u53c8\u53ef\u4ee5\u4f5c\u4e3aObservable\u3002\n\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u8ba2\u9605\u4e00\u4e2a\u6216\u591a\u4e2aObservable\uff0c\u5e76\u4e14\u7531\u4e8e\u5b83\u662f\u4e00\u4e2aObservable\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u91cd\u65b0\u53d1\u9001\u5b83\u4eec\u6765\u901a\u8fc7\u5b83\u89c2\u5bdf\u5230\u7684\u9879\u76ee\uff0c\u5e76\u4e14\u5b83\u8fd8\u53ef\u4ee5\u53d1\u51fa\u65b0\u9879\u76ee\u3002\n\n\n\u56e0\u4e3a\u4e3b\u4f53\u8ba2\u9605Observable\uff0c\u5b83\u5c06\u89e6\u53d1Observable\u5f00\u59cb\u53d1\u5c04\u7269\u54c1\uff08\u5982\u679cObservable\u662f\u201c\u51b7\u201d\u7684 - \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5b83\u5728\u5f00\u59cb\u53d1\u5c04\u7269\u54c1\u4e4b\u524d\u7b49\u5f85\u8ba2\u9605\uff09\u3002\n\u8fd9\u53ef\u4ee5\u4ea7\u751f\u4f7f\u5f97\u5230\u7684\u4e3b\u4f53\u6210\u4e3a\u539f\u59cb\u201c\u51b7\u201dObservable\u7684\u201c\u70ed\u201d\u53ef\u89c2\u5bdf\u53d8\u4f53\u7684\u6548\u679c\u3002\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b\n\n\n\n\n\u4f7f\u7528\u6216\u4e0d\u4f7f\u7528Dave Sexton\u535a\u5ba2\u7684\u4e3b\u9898\n\n\nRx\u7b80\u4ecb\uff1a\u4e3b\u9898\n\n\n101 Rx\u6837\u54c1: ISubject\nT\n and ISubject\nT1,T2\n\n\n\u9ad8\u7ea7RxJava\uff1a\u4e3b\u9898\u7531D\u00e1vid\u63d0\u4f9b\n\n\n\u4f7f\u7528Dennis Stoyanov\u7684\u4e3b\u9898\n\n\n\n\n\u4e3b\u4f53\u7684\u79cd\u7c7b\n\n\n\u6709\u56db\u79cd\u7c7b\u578b\u7684\u4e3b\u9898\u662f\u4e3a\u7279\u5b9a\u7528\u4f8b\u800c\u8bbe\u8ba1\u7684\u3002\n\u5e76\u975e\u6240\u6709\u5b9e\u73b0\u90fd\u53ef\u7528\uff0c\u6709\u4e9b\u5b9e\u73b0\u4f7f\u7528\u5176\u4ed6\u547d\u540d\u7ea6\u5b9a\uff08\u4f8b\u5982\uff0c\u5728RxScala\u4e2d\uff0c\u8fd9\u91cc\u79f0\u4e3a\u201cPublishSubject\u201d\uff0c\u7b80\u79f0\u4e3a\u201cSubject\u201d\uff09\uff1a\n\n\nAsyncSubject\n\n\n\n\nAsyncSubject\u53d1\u51fa\u7531\u6e90Observable\u53d1\u51fa\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff08\u5e76\u4e14\u53ea\u53d1\u5e03\u6700\u540e\u4e00\u4e2a\u503c\uff09\uff0c\u5e76\u4e14\u4ec5\u5728\u8be5\u6e90Observable\u5b8c\u6210\u4e4b\u540e\u53d1\u51fa\u3002\n\uff08\u5982\u679c\u6e90Observable\u4e0d\u53d1\u51fa\u4efb\u4f55\u503c\uff0c\u5219AsyncSubject\u4e5f\u4f1a\u5b8c\u6210\u800c\u4e0d\u4f1a\u53d1\u51fa\u4efb\u4f55\u503c\u3002\uff09\n\n\n\n\n\u5b83\u4e5f\u4f1a\u5411\u4efb\u4f55\u540e\u6765\u7684\u89c2\u5bdf\u8005\u53d1\u51fa\u76f8\u540c\u7684\u6700\u7ec8\u503c\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u6e90Observable\u56e0\u9519\u8bef\u800c\u7ec8\u6b62\uff0c\u5219AsyncSubject\u4e0d\u4f1a\u53d1\u51fa\u4efb\u4f55\u9879\u76ee\uff0c\u800c\u53ea\u4f1a\u4f20\u9012\u6765\u81ea\u6e90Observable\u7684\u9519\u8bef\u901a\u77e5\u3002\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b\n\n\n\n\nRx\u7b80\u4ecb\uff1aAsyncSubject\n\n\n\n\nBehaviorSubject\n\n\n\n\n\u5f53\u89c2\u5bdf\u8005\u8ba2\u9605BehaviorSubject\u65f6\uff0c\u5b83\u9996\u5148\u53d1\u5e03\u6e90Observable\u6700\u8fd1\u53d1\u51fa\u7684\u9879\u76ee\uff08\u6216\u8005\u79cd\u5b50/\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u53d1\u51fa\u7684\u8bdd\uff09\uff0c\u7136\u540e\u7ee7\u7eed\u53d1\u9001\u6e90Observable\u53d1\u9001\u7684\u4efb\u4f55\u5176\u4ed6\u9879\u76ee\uff08 ,S\uff09\u3002\n\n\n\n\n\u4f46\u662f\uff0c\u5982\u679c\u6e90Observable\u7ec8\u6b62\u5e76\u663e\u793a\u9519\u8bef\uff0c\u5219BehaviorSubject\u4e0d\u4f1a\u5c06\u4efb\u4f55\u9879\u76ee\u53d1\u9001\u7ed9\u540e\u7eed\u89c2\u5bdf\u8005\uff0c\u800c\u53ea\u4f1a\u4f20\u9012\u6e90Observable\u7684\u9519\u8bef\u901a\u77e5\u3002\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b\n\n\n\n\nRx\u7b80\u4ecb\uff1aBehaviorSubject\n\n\n\n\nPublishSubject\n\n\n\n\nPublishSubject\u4ec5\u5411\u89c2\u5bdf\u8005\u53d1\u51fa\u7531\u8ba2\u9605\u65f6\u95f4\u4e4b\u540e\u7684\u6e90Observable\u53d1\u51fa\u7684\u90a3\u4e9b\u9879\u76ee\u3002\n\n\n\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e2aPublishSubject\u53ef\u80fd\u4f1a\u5728\u521b\u5efa\u540e\u7acb\u5373\u5f00\u59cb\u53d1\u5e03\u9879\u76ee\uff08\u9664\u975e\u60a8\u5df2\u91c7\u53d6\u63aa\u65bd\u6765\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff09\uff0c\u56e0\u6b64\u5b58\u5728\u521b\u5efa\u4e3b\u4f53\u548c\u89c2\u5bdf\u8005\u8ba2\u9605\u8be5\u9879\u76ee\u4e4b\u95f4\u53ef\u80fd\u4f1a\u4e22\u5931\u4e00\u4e2a\u6216\u591a\u4e2a\u9879\u76ee\u7684\u98ce\u9669\u3002\n\u5982\u679c\u60a8\u9700\u8981\u4fdd\u8bc1\u4ece\u6e90Observable\u4ea4\u4ed8\u6240\u6709\u9879\u76ee\uff0c\u5219\u9700\u8981\u4f7f\u7528Create\u6765\u5f62\u6210Observable\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u624b\u52a8\u91cd\u65b0\u5f15\u5165\u201c\u51b7\u201dObservable\u884c\u4e3a\uff08\u5728\u5f00\u59cb\u53d1\u5c04\u9879\u76ee\u4e4b\u524d\u68c0\u67e5\u6240\u6709\u89c2\u5bdf\u8005\u5df2\u8ba2\u9605,\uff09\uff0c\u6216\u8005\u5207\u6362\u5230\u4f7f\u7528ReplaySubject\u3002\n\n\n\u5982\u679c\u6e90Observable\u56e0\u9519\u8bef\u800c\u7ec8\u6b62\uff0c\u5219PublishSubject\u4e0d\u4f1a\u5c06\u4efb\u4f55\u9879\u76ee\u53d1\u9001\u7ed9\u540e\u7eed\u89c2\u5bdf\u8005\uff0c\u800c\u53ea\u4f1a\u4ece\u6e90Observable\u4f20\u9012\u9519\u8bef\u901a\u77e5\u3002\n\n\nReplaySubject\n\n\n\n\nReplaySubject\u5411\u4efb\u4f55\u89c2\u5bdf\u8005\u53d1\u51fa\u7531\u6e90Observable\uff08s\uff09\u53d1\u51fa\u7684\u6240\u6709\u9879\u76ee\uff0c\u800c\u4e0d\u7ba1\u89c2\u5bdf\u8005\u4f55\u65f6\u8ba2\u9605\u3002\n\n\n\u8fd8\u6709ReplaySubject\u7684\u7248\u672c\u4f1a\u5728\u91cd\u64ad\u7f13\u51b2\u533a\u5a01\u80c1\u8d85\u51fa\u7279\u5b9a\u5927\u5c0f\uff0c\u6216\u8005\u81ea\u9879\u76ee\u6700\u521d\u53d1\u51fa\u540e\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u8fc7\u53bb\u65f6\u4e22\u5f03\u65e7\u9879\u76ee\u3002\n\n\n\u5982\u679c\u60a8\u4f7f\u7528ReplaySubject\u4f5c\u4e3a\u89c2\u5bdf\u8005\uff0c\u8bf7\u6ce8\u610f\u4e0d\u8981\u4ece\u591a\u4e2a\u7ebf\u7a0b\u8c03\u7528\u5176onNext\u65b9\u6cd5\uff08\u6216\u5176\u4ed6\u65b9\u6cd5\uff09\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u91cd\u5408\uff08\u975e\u987a\u5e8f\uff09\u8c03\u7528\uff0c\u8fd9\u8fdd\u53cd\u4e86Observable\u5408\u540c\u5e76\u4f1a\u4ea7\u751f\u6b67\u4e49,\u5728\u7ed3\u679c\u4e3b\u9898\u4e2d\uff0c\u9996\u5148\u5e94\u8be5\u91cd\u64ad\u54ea\u4e2a\u9879\u76ee\u6216\u901a\u77e5\u3002\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b\n* Rx\u7b80\u4ecb\uff1aReplaySubject\n\n\n\u8bed\u8a00\u7279\u5b9a\u4fe1\u606f\n\n\n\n\nRxClojure\n\n\nRxCpp\n\n\nRxGroovy\n\n\nRxJava 1\u2024x\n\n\nRxJS\n\n\nRxKotlin\n\n\nRxNET\n\n\nRxPY\n\n\nRxrb\n\n\nRxScala\n\n\n\ud55c\uad6d\uc5b4\n\n\nEnglish\n\n\nObservable\n\n\nOperators\n\n\nSingle\n\n\nSubject\n\n\nScheduler", 
            "title": "Subject(\u4e3b\u4f53)"
        }, 
        {
            "location": "/ReactiveX/Subject/#_1", 
            "text": "Subject\u662f\u4e00\u79cd\u6865\u6881\u6216\u4ee3\u7406\uff0c\u53ef\u4ee5\u5728ReactiveX\u7684\u67d0\u4e9b\u5b9e\u73b0\u4e2d\u4f7f\u7528\uff0c\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u89c2\u5bdf\u8005\u53c8\u53ef\u4ee5\u4f5c\u4e3aObservable\u3002\n\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u89c2\u5bdf\u8005\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u8ba2\u9605\u4e00\u4e2a\u6216\u591a\u4e2aObservable\uff0c\u5e76\u4e14\u7531\u4e8e\u5b83\u662f\u4e00\u4e2aObservable\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u91cd\u65b0\u53d1\u9001\u5b83\u4eec\u6765\u901a\u8fc7\u5b83\u89c2\u5bdf\u5230\u7684\u9879\u76ee\uff0c\u5e76\u4e14\u5b83\u8fd8\u53ef\u4ee5\u53d1\u51fa\u65b0\u9879\u76ee\u3002  \u56e0\u4e3a\u4e3b\u4f53\u8ba2\u9605Observable\uff0c\u5b83\u5c06\u89e6\u53d1Observable\u5f00\u59cb\u53d1\u5c04\u7269\u54c1\uff08\u5982\u679cObservable\u662f\u201c\u51b7\u201d\u7684 - \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5b83\u5728\u5f00\u59cb\u53d1\u5c04\u7269\u54c1\u4e4b\u524d\u7b49\u5f85\u8ba2\u9605\uff09\u3002\n\u8fd9\u53ef\u4ee5\u4ea7\u751f\u4f7f\u5f97\u5230\u7684\u4e3b\u4f53\u6210\u4e3a\u539f\u59cb\u201c\u51b7\u201dObservable\u7684\u201c\u70ed\u201d\u53ef\u89c2\u5bdf\u53d8\u4f53\u7684\u6548\u679c\u3002  \u4e5f\u53ef\u4ee5\u770b\u770b   \u4f7f\u7528\u6216\u4e0d\u4f7f\u7528Dave Sexton\u535a\u5ba2\u7684\u4e3b\u9898  Rx\u7b80\u4ecb\uff1a\u4e3b\u9898  101 Rx\u6837\u54c1: ISubject T  and ISubject T1,T2  \u9ad8\u7ea7RxJava\uff1a\u4e3b\u9898\u7531D\u00e1vid\u63d0\u4f9b  \u4f7f\u7528Dennis Stoyanov\u7684\u4e3b\u9898", 
            "title": "\u4e3b\u4f53"
        }, 
        {
            "location": "/ReactiveX/Subject/#_2", 
            "text": "\u6709\u56db\u79cd\u7c7b\u578b\u7684\u4e3b\u9898\u662f\u4e3a\u7279\u5b9a\u7528\u4f8b\u800c\u8bbe\u8ba1\u7684\u3002\n\u5e76\u975e\u6240\u6709\u5b9e\u73b0\u90fd\u53ef\u7528\uff0c\u6709\u4e9b\u5b9e\u73b0\u4f7f\u7528\u5176\u4ed6\u547d\u540d\u7ea6\u5b9a\uff08\u4f8b\u5982\uff0c\u5728RxScala\u4e2d\uff0c\u8fd9\u91cc\u79f0\u4e3a\u201cPublishSubject\u201d\uff0c\u7b80\u79f0\u4e3a\u201cSubject\u201d\uff09\uff1a", 
            "title": "\u4e3b\u4f53\u7684\u79cd\u7c7b"
        }, 
        {
            "location": "/ReactiveX/Subject/#asyncsubject", 
            "text": "AsyncSubject\u53d1\u51fa\u7531\u6e90Observable\u53d1\u51fa\u7684\u6700\u540e\u4e00\u4e2a\u503c\uff08\u5e76\u4e14\u53ea\u53d1\u5e03\u6700\u540e\u4e00\u4e2a\u503c\uff09\uff0c\u5e76\u4e14\u4ec5\u5728\u8be5\u6e90Observable\u5b8c\u6210\u4e4b\u540e\u53d1\u51fa\u3002\n\uff08\u5982\u679c\u6e90Observable\u4e0d\u53d1\u51fa\u4efb\u4f55\u503c\uff0c\u5219AsyncSubject\u4e5f\u4f1a\u5b8c\u6210\u800c\u4e0d\u4f1a\u53d1\u51fa\u4efb\u4f55\u503c\u3002\uff09   \u5b83\u4e5f\u4f1a\u5411\u4efb\u4f55\u540e\u6765\u7684\u89c2\u5bdf\u8005\u53d1\u51fa\u76f8\u540c\u7684\u6700\u7ec8\u503c\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u6e90Observable\u56e0\u9519\u8bef\u800c\u7ec8\u6b62\uff0c\u5219AsyncSubject\u4e0d\u4f1a\u53d1\u51fa\u4efb\u4f55\u9879\u76ee\uff0c\u800c\u53ea\u4f1a\u4f20\u9012\u6765\u81ea\u6e90Observable\u7684\u9519\u8bef\u901a\u77e5\u3002  \u4e5f\u53ef\u4ee5\u770b\u770b   Rx\u7b80\u4ecb\uff1aAsyncSubject", 
            "title": "AsyncSubject"
        }, 
        {
            "location": "/ReactiveX/Subject/#behaviorsubject", 
            "text": "\u5f53\u89c2\u5bdf\u8005\u8ba2\u9605BehaviorSubject\u65f6\uff0c\u5b83\u9996\u5148\u53d1\u5e03\u6e90Observable\u6700\u8fd1\u53d1\u51fa\u7684\u9879\u76ee\uff08\u6216\u8005\u79cd\u5b50/\u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u53d1\u51fa\u7684\u8bdd\uff09\uff0c\u7136\u540e\u7ee7\u7eed\u53d1\u9001\u6e90Observable\u53d1\u9001\u7684\u4efb\u4f55\u5176\u4ed6\u9879\u76ee\uff08 ,S\uff09\u3002   \u4f46\u662f\uff0c\u5982\u679c\u6e90Observable\u7ec8\u6b62\u5e76\u663e\u793a\u9519\u8bef\uff0c\u5219BehaviorSubject\u4e0d\u4f1a\u5c06\u4efb\u4f55\u9879\u76ee\u53d1\u9001\u7ed9\u540e\u7eed\u89c2\u5bdf\u8005\uff0c\u800c\u53ea\u4f1a\u4f20\u9012\u6e90Observable\u7684\u9519\u8bef\u901a\u77e5\u3002  \u4e5f\u53ef\u4ee5\u770b\u770b   Rx\u7b80\u4ecb\uff1aBehaviorSubject", 
            "title": "BehaviorSubject"
        }, 
        {
            "location": "/ReactiveX/Subject/#publishsubject", 
            "text": "PublishSubject\u4ec5\u5411\u89c2\u5bdf\u8005\u53d1\u51fa\u7531\u8ba2\u9605\u65f6\u95f4\u4e4b\u540e\u7684\u6e90Observable\u53d1\u51fa\u7684\u90a3\u4e9b\u9879\u76ee\u3002  \u8bf7\u6ce8\u610f\uff0c\u4e00\u4e2aPublishSubject\u53ef\u80fd\u4f1a\u5728\u521b\u5efa\u540e\u7acb\u5373\u5f00\u59cb\u53d1\u5e03\u9879\u76ee\uff08\u9664\u975e\u60a8\u5df2\u91c7\u53d6\u63aa\u65bd\u6765\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\uff09\uff0c\u56e0\u6b64\u5b58\u5728\u521b\u5efa\u4e3b\u4f53\u548c\u89c2\u5bdf\u8005\u8ba2\u9605\u8be5\u9879\u76ee\u4e4b\u95f4\u53ef\u80fd\u4f1a\u4e22\u5931\u4e00\u4e2a\u6216\u591a\u4e2a\u9879\u76ee\u7684\u98ce\u9669\u3002\n\u5982\u679c\u60a8\u9700\u8981\u4fdd\u8bc1\u4ece\u6e90Observable\u4ea4\u4ed8\u6240\u6709\u9879\u76ee\uff0c\u5219\u9700\u8981\u4f7f\u7528Create\u6765\u5f62\u6210Observable\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u624b\u52a8\u91cd\u65b0\u5f15\u5165\u201c\u51b7\u201dObservable\u884c\u4e3a\uff08\u5728\u5f00\u59cb\u53d1\u5c04\u9879\u76ee\u4e4b\u524d\u68c0\u67e5\u6240\u6709\u89c2\u5bdf\u8005\u5df2\u8ba2\u9605,\uff09\uff0c\u6216\u8005\u5207\u6362\u5230\u4f7f\u7528ReplaySubject\u3002  \u5982\u679c\u6e90Observable\u56e0\u9519\u8bef\u800c\u7ec8\u6b62\uff0c\u5219PublishSubject\u4e0d\u4f1a\u5c06\u4efb\u4f55\u9879\u76ee\u53d1\u9001\u7ed9\u540e\u7eed\u89c2\u5bdf\u8005\uff0c\u800c\u53ea\u4f1a\u4ece\u6e90Observable\u4f20\u9012\u9519\u8bef\u901a\u77e5\u3002", 
            "title": "PublishSubject"
        }, 
        {
            "location": "/ReactiveX/Subject/#replaysubject", 
            "text": "ReplaySubject\u5411\u4efb\u4f55\u89c2\u5bdf\u8005\u53d1\u51fa\u7531\u6e90Observable\uff08s\uff09\u53d1\u51fa\u7684\u6240\u6709\u9879\u76ee\uff0c\u800c\u4e0d\u7ba1\u89c2\u5bdf\u8005\u4f55\u65f6\u8ba2\u9605\u3002  \u8fd8\u6709ReplaySubject\u7684\u7248\u672c\u4f1a\u5728\u91cd\u64ad\u7f13\u51b2\u533a\u5a01\u80c1\u8d85\u51fa\u7279\u5b9a\u5927\u5c0f\uff0c\u6216\u8005\u81ea\u9879\u76ee\u6700\u521d\u53d1\u51fa\u540e\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u8fc7\u53bb\u65f6\u4e22\u5f03\u65e7\u9879\u76ee\u3002  \u5982\u679c\u60a8\u4f7f\u7528ReplaySubject\u4f5c\u4e3a\u89c2\u5bdf\u8005\uff0c\u8bf7\u6ce8\u610f\u4e0d\u8981\u4ece\u591a\u4e2a\u7ebf\u7a0b\u8c03\u7528\u5176onNext\u65b9\u6cd5\uff08\u6216\u5176\u4ed6\u65b9\u6cd5\uff09\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u91cd\u5408\uff08\u975e\u987a\u5e8f\uff09\u8c03\u7528\uff0c\u8fd9\u8fdd\u53cd\u4e86Observable\u5408\u540c\u5e76\u4f1a\u4ea7\u751f\u6b67\u4e49,\u5728\u7ed3\u679c\u4e3b\u9898\u4e2d\uff0c\u9996\u5148\u5e94\u8be5\u91cd\u64ad\u54ea\u4e2a\u9879\u76ee\u6216\u901a\u77e5\u3002  \u4e5f\u53ef\u4ee5\u770b\u770b\n* Rx\u7b80\u4ecb\uff1aReplaySubject", 
            "title": "ReplaySubject"
        }, 
        {
            "location": "/ReactiveX/Subject/#_3", 
            "text": "RxClojure  RxCpp  RxGroovy  RxJava 1\u2024x  RxJS  RxKotlin  RxNET  RxPY  Rxrb  RxScala  \ud55c\uad6d\uc5b4  English  Observable  Operators  Single  Subject  Scheduler", 
            "title": "\u8bed\u8a00\u7279\u5b9a\u4fe1\u606f"
        }, 
        {
            "location": "/ReactiveX/Scheduler/", 
            "text": "\u8c03\u5ea6\n\n\n\u5982\u679c\u8981\u5c06\u591a\u7ebf\u7a0b\u5f15\u5165Observable\u8fd0\u7b97\u7b26\u7684\u7ea7\u8054\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u793a\u8fd9\u4e9b\u8fd0\u7b97\u7b26\uff08\u6216\u7279\u5b9a\u7684Observables\uff09\u5728\u7279\u5b9a\u7684Scheduler\u4e0a\u8fd0\u884c\u6765\u5b9e\u73b0\u3002\n\n\n\u4e00\u4e9bReactiveX Observable\u64cd\u4f5c\u7b26\u5177\u6709\u5c06Scheduler\u4f5c\u4e3a\u53c2\u6570\u7684\u53d8\u4f53\u3002\n\u8fd9\u4e9b\u6307\u793a\u64cd\u4f5c\u5458\u5728\u7279\u5b9a\u7684\u8c03\u5ea6\u7a0b\u5e8f\u4e0a\u5b8c\u6210\u5176\u90e8\u5206\u6216\u5168\u90e8\u5de5\u4f5c\u3002\n\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cObservable\u548c\u60a8\u5e94\u7528\u4e8e\u5b83\u7684\u8fd0\u7b97\u7b26\u94fe\u5c06\u5b8c\u6210\u5176\u5de5\u4f5c\uff0c\u5e76\u4f1a\u5728\u8c03\u7528\u5176Subscribe\u65b9\u6cd5\u7684\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e0a\u901a\u77e5\u5176\u89c2\u5bdf\u8005\u3002\nSubscribeOn\u8fd0\u7b97\u7b26\u901a\u8fc7\u6307\u5b9aObservable\u5e94\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u5176\u4ed6\u8c03\u5ea6\u7a0b\u5e8f\u6765\u66f4\u6539\u6b64\u884c\u4e3a\u3002\nObserveOn\u8fd0\u7b97\u7b26\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684\u8c03\u5ea6\u7a0b\u5e8f\uff0cObservable\u5c06\u4f7f\u7528\u5b83\u5c06\u901a\u77e5\u53d1\u9001\u7ed9\u5176\u89c2\u5bdf\u8005\u3002\n\n\n\u5982\u6b64\u56fe\u6240\u793a\uff0cSubscribeOn\u8fd0\u7b97\u7b26\u6307\u5b9aObservable\u5c06\u5f00\u59cb\u64cd\u4f5c\u54ea\u4e2a\u7ebf\u7a0b\uff0c\u800c\u4e0d\u7ba1\u64cd\u4f5c\u7b26\u88ab\u8c03\u7528\u7684\u8fd0\u7b97\u7b26\u94fe\u4e2d\u7684\u54ea\u4e2a\u70b9\u3002\n\u53e6\u4e00\u65b9\u9762\uff0cObservable\u4f1a\u5f71\u54cdObservable\u4f1a\u5728\u8be5\u64cd\u4f5c\u7b26\u51fa\u73b0\u7684\u5730\u65b9\u4f7f\u7528\u7684\u7ebf\u7a0b\u3002\n\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5728Observable\u8fd0\u7b97\u7b26\u94fe\u4e2d\u7684\u591a\u4e2a\u65f6\u95f4\u70b9\u591a\u6b21\u8c03\u7528ObserveOn\uff0c\u4ee5\u4fbf\u66f4\u6539\u67d0\u4e9b\u64cd\u4f5c\u7b26\u5728\u54ea\u4e9b\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u3002\n\n\n\n\n\u4e5f\u53ef\u4ee5\u770b\u770b\n\n\n\n\nRx\u7b80\u4ecb\uff1a\u8c03\u5ea6\u548c\u7ebf\u7a0b\n\n\nRx Workshop\uff1a\u8c03\u5ea6\u7a0b\u5e8f\n\n\n\u4f7f\u7528Dennis Stoyanov\u7684\u8c03\u5ea6\u7a0b\u5e8f\n\n\n\n\n\u8bed\u8a00\u7279\u5b9a\u4fe1\u606f\n\n\n\n\nRxClojure\n\n\nRxCpp\n\n\nRxGroovy\n\n\nRxJava 1\u2024x\n\n\nRxJS\n\n\nRxKotlin\n\n\nRxNET\n\n\nRxPY\n\n\nRxrb\n\n\nRxScala\n\n\n\ud55c\uad6d\uc5b4\n\n\nEnglish\n\n\nObservable\n\n\nOperators\n\n\nSingle\n\n\nSubject\n\n\nScheduler", 
            "title": "Scheduler(\u8c03\u5ea6\u7a0b\u5e8f)"
        }, 
        {
            "location": "/ReactiveX/Scheduler/#_1", 
            "text": "\u5982\u679c\u8981\u5c06\u591a\u7ebf\u7a0b\u5f15\u5165Observable\u8fd0\u7b97\u7b26\u7684\u7ea7\u8054\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6307\u793a\u8fd9\u4e9b\u8fd0\u7b97\u7b26\uff08\u6216\u7279\u5b9a\u7684Observables\uff09\u5728\u7279\u5b9a\u7684Scheduler\u4e0a\u8fd0\u884c\u6765\u5b9e\u73b0\u3002  \u4e00\u4e9bReactiveX Observable\u64cd\u4f5c\u7b26\u5177\u6709\u5c06Scheduler\u4f5c\u4e3a\u53c2\u6570\u7684\u53d8\u4f53\u3002\n\u8fd9\u4e9b\u6307\u793a\u64cd\u4f5c\u5458\u5728\u7279\u5b9a\u7684\u8c03\u5ea6\u7a0b\u5e8f\u4e0a\u5b8c\u6210\u5176\u90e8\u5206\u6216\u5168\u90e8\u5de5\u4f5c\u3002  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cObservable\u548c\u60a8\u5e94\u7528\u4e8e\u5b83\u7684\u8fd0\u7b97\u7b26\u94fe\u5c06\u5b8c\u6210\u5176\u5de5\u4f5c\uff0c\u5e76\u4f1a\u5728\u8c03\u7528\u5176Subscribe\u65b9\u6cd5\u7684\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e0a\u901a\u77e5\u5176\u89c2\u5bdf\u8005\u3002\nSubscribeOn\u8fd0\u7b97\u7b26\u901a\u8fc7\u6307\u5b9aObservable\u5e94\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u5176\u4ed6\u8c03\u5ea6\u7a0b\u5e8f\u6765\u66f4\u6539\u6b64\u884c\u4e3a\u3002\nObserveOn\u8fd0\u7b97\u7b26\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684\u8c03\u5ea6\u7a0b\u5e8f\uff0cObservable\u5c06\u4f7f\u7528\u5b83\u5c06\u901a\u77e5\u53d1\u9001\u7ed9\u5176\u89c2\u5bdf\u8005\u3002  \u5982\u6b64\u56fe\u6240\u793a\uff0cSubscribeOn\u8fd0\u7b97\u7b26\u6307\u5b9aObservable\u5c06\u5f00\u59cb\u64cd\u4f5c\u54ea\u4e2a\u7ebf\u7a0b\uff0c\u800c\u4e0d\u7ba1\u64cd\u4f5c\u7b26\u88ab\u8c03\u7528\u7684\u8fd0\u7b97\u7b26\u94fe\u4e2d\u7684\u54ea\u4e2a\u70b9\u3002\n\u53e6\u4e00\u65b9\u9762\uff0cObservable\u4f1a\u5f71\u54cdObservable\u4f1a\u5728\u8be5\u64cd\u4f5c\u7b26\u51fa\u73b0\u7684\u5730\u65b9\u4f7f\u7528\u7684\u7ebf\u7a0b\u3002\n\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u5728Observable\u8fd0\u7b97\u7b26\u94fe\u4e2d\u7684\u591a\u4e2a\u65f6\u95f4\u70b9\u591a\u6b21\u8c03\u7528ObserveOn\uff0c\u4ee5\u4fbf\u66f4\u6539\u67d0\u4e9b\u64cd\u4f5c\u7b26\u5728\u54ea\u4e9b\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u3002   \u4e5f\u53ef\u4ee5\u770b\u770b   Rx\u7b80\u4ecb\uff1a\u8c03\u5ea6\u548c\u7ebf\u7a0b  Rx Workshop\uff1a\u8c03\u5ea6\u7a0b\u5e8f  \u4f7f\u7528Dennis Stoyanov\u7684\u8c03\u5ea6\u7a0b\u5e8f", 
            "title": "\u8c03\u5ea6"
        }, 
        {
            "location": "/ReactiveX/Scheduler/#_2", 
            "text": "RxClojure  RxCpp  RxGroovy  RxJava 1\u2024x  RxJS  RxKotlin  RxNET  RxPY  Rxrb  RxScala  \ud55c\uad6d\uc5b4  English  Observable  Operators  Single  Subject  Scheduler", 
            "title": "\u8bed\u8a00\u7279\u5b9a\u4fe1\u606f"
        }, 
        {
            "location": "/ReactiveX/tutorials/", 
            "text": "\u6559\u7a0b\n\n\n\u7b80\u4ecb\n\n\n\n\nRx\u7b80\u4ecb\uff1aLee Campbel\u514d\u8d39\u5728\u7ebf\u4e66\u7c4d\n\n\n\u4f60\u7684\u9f20\u6807\u662fErik Meijer\u7684\u6570\u636e\u5e93\n\n\nAndr\u00e9Staltz\u9519\u8fc7\u4e86Reactive Programming\u7684\u4ecb\u7ecd\n\n\n\u638c\u63e1Couchbase\u6587\u6863\u4e2d\u7684\u89c2\u5bdf\u5143\u7d20\n\n\n\u7531Tomasz Kowalczewski\u63d0\u4f9b\u7684\u7b2c33\u5ea6\u53cd\u5e94\u5f0fJava\n\n\n\u7531Andr\u00e9Staltz\u4ecb\u7ecdRx 2\u5206\u949f\n\n\n\u7ef4\u57fa\u767e\u79d1\uff1a\u65e0\u529f\u7f16\u7a0b\u548c\u529f\u80fd\u65e0\u529f\u7f16\u7a0b\n\n\n\u7531ColinTheShots\u53cd\u5e94\n\n\nMartin Fowler\u6536\u96c6\u7ba1\u9053\n\n\n\u9002\u7528\u4e8eAndroid\u7684Rx for .NET\u548cRxJava\uff0c\u7531Olli Salonen\u63d0\u4f9b\n\n\nYaroslav Heriatovych\u4e3a\u61d2\u60f0\u4eba\u58eb\u7f16\u5199\u7684NotRxJava\u6307\u5357 - \u5982\u4f55\u91cd\u65b0\u7ec4\u7ec7\u6df7\u4e71\u7684\u5f02\u6b65\u4ee3\u7801\u4ee5\u8fdb\u884c\u53cd\u5e94\n\n\n\u901a\u8fc7Artur Glier\u7684\u89c6\u9891\u4ecb\u7ecd\u4e86\u89e3\u66f4\u591a\u66f4\u597d\u7684Rx\n\n\nRx\u7684\u4e00\u4e2a\u4fcf\u76ae\u4ecb\u7ecdErik Meijer\u7684\u89c6\u9891\u8bb2\u5ea7\n\n\n\u4ec0\u4e48\u662f\u53cd\u5e94\u5f0f\u7f16\u7a0b\uff1f ,Jafar Husain\u7684\u89c6\u9891\u4ecb\u7ecd\u3002\n\n\n\u53cd\u5e94\u6027\u6269\u5c55\uff1a\u8d85\u8d8a\u57fa\u7840\uff0cDan Lew\u7684\u6f14\u8bb2\uff08\u5982\u4f55\u5236\u4f5c\u81ea\u5df1\u7684\u64cd\u4f5c\u5458\uff0c\u907f\u514d\u8ba2\u9605\u4e2d\u7684\u5185\u5b58\u6cc4\u6f0f\uff0c\u4e86\u89e3\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u70ed\u70b9\u548c\u51b7\u70b9\u89c2\u5bdf\u70b9\uff0c\u5171\u4eab\u89c2\u5bdf\u70b9\uff0c\u4e3b\u9898\u6545\u969c\uff0c\u80cc\u538b\uff09\n\n\nReactive Programming\uff0cVenkat Subramaniam\u7684\u6f14\u793a\u89c6\u9891\n\n\nReactiveX\uff0cRxJava\u548cRxAndroid  - \u4eceAndrea Maglie\u5f00\u59cb\n\n\nShekhar Gulati\u4f7f\u7528RxJava\u548cJava8\u4ece\u96f6\u5f00\u59cb\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\n\n\nRxJava\uff0cRxAndroid\u548cC\u00e9sarFerreira\u7684Retrolambda\u7684\u6d3e\u5bf9\u6280\u5de7\n\n\n\n\n\u7b80\u4ecb\n\n\n\n\n\u901a\u8fc7Jafar Husain\u4e86\u89e3RxJava\n\n\nRx\u7814\u8ba8\u4f1a\n\n\n\u65e0\u529f\u7f16\u7a0b\u548cMVC\n\n\n\u4e92\u52a8\u5f0f\u6559\u7a0b\uff1aJavascript\u4e2d\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u548cJafar Husain\u7684\u6f14\u8bb2\uff08\u89c6\u9891\uff09\n\n\nRxJava Tutorial 01\u4e00\u4e2a\u6765\u81eaZA\u8f6f\u4ef6\u5f00\u53d1\u6559\u7a0b\u7684\u89c6\u9891\u6559\u7a0b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u5728Eclipse\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u7b80\u5355\u7684\u9879\u76ee\n\n\nChris Froussios\u4ecb\u7ecdRxJava\n\n\n\n\n\u56fe\u4e66\n\n\n\n\n\u4ecb\u7ecdRx\n\n\n\u4ecb\u7ecdRx\uff08\u7f51\u7ad9\uff09\n\n\n\u7f16\u7a0b\u65e0\u529f\u6269\u5c55\u548cLINQ\n\n\n.NET\u4e2d\u7684\u53cd\u5e94\u5f0f\u6269\u5c55 - \u4ee3\u7801\u4e3a\u201cdresherdoc\u201d\u7684Rx\u793e\u533a\u6c38\u4e4539\uff05\u7684\u6298\u6263\n\n\nRxJava Essentials  - \u9002\u7528\u4e8eAndroid\u5f00\u53d1\u4eba\u5458\u7684RxJava\n\n\nGrokking ReactiveX  - \u4ece\u7406\u8bba\u5230\u65e5\u5e38\u73b0\u5b9e\u4e16\u754c\u7684\u95ee\u9898\u3002,\u65e0\u8bba\u60a8\u662f\u4e3a\u540e\u7aef\uff0c\u524d\u7aef\u8fd8\u662fAndroid\u7f16\u7801\uff1a\u6211\u4eec\u90fd\u4e3a\u60a8\u63d0\u4f9b\u4e86\u8986\u76d6\uff01\n\n\nGrokking Reactive User Interfaces  - \u6559\u4f1a\u4f60\u4e00\u79cd\u601d\u8003\u7a0b\u5e8f\u548c\u6570\u636e\u7684\u65b0\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u6784\u5efa\u5065\u58ee\u548c\u53ef\u6269\u5c55\u7684\u7528\u6237\u754c\u9762\u3002\n\n\n\u638c\u63e1\u7531Erich de Souza OliveiraUo\uff0cPackt\u64b0\u5199\u7684Reactive JavaScript\u3002\n\n\n\n\n\u57f9\u8bad\u73ed\n\n\n\n\nJava 8\u4e2d\u7684\u53cd\u5e94\u5f0f\u7f16\u7a0bRxJava\u662f\u7531Russell Elledge\u8bbe\u8ba1\u7684\u8bfe\u7a0b\n\n\nCoursera\u4e0a\u7684\u65e0\u529f\u7f16\u7a0b\u539f\u5219\n\n\n\u7531Manuel Vicente Vivo\uff0cPackt\u64b0\u5199\u7684\u53cd\u5e94\u5f0fJava 9\u3002\n\n\n\u7531Shriyans Bhatnagar\uff0cPackt\u7f16\u5199\u7684Reactive JavaScript Programming\u3002\n\n\n\n\nRxJava\n\n\n\n\nGrokking RxJava by Dan Lew\n\n\nLambdaJam Chicago 2013: Functional Reactive Programming in the Netflix API by Ben Christensen\n\n\nQCon London 2013 presentation: Functional Reactive Programming in the Netflix API and a related interview with Ben Christensen\n\n\nFunctional Reactive in the Netflix API with RxJava by Ben Christensen and Jafar Husain\n\n\nRxJava in Different Flavours of Java: Java 7 and Java 8 implementations of the same code\n\n\nOptimizing the Netflix API by Ben Christensen\n\n\nReactive Programming at Netflix by Jafar Husain\n\n\nImplementing an Event Bus with RxJava by Kaushik Gopal\n\n\nBen Christensen explains RxJava \u201cbackpressure\u201d strategies (video)\n\n\nAdvanced RxJava a blog from D\u00e1vid Karnok\n\n\nUnit Testing RxJava Observables by Iv\u00e1n Carballo\n\n\nRxJava: Unit Testing Examples by Nathan Hunston\n\n\nTurning Twitter4J into RxJava\u2019s Observable by Tomasz Nurkiewicz\n\n\nConverting between Completablefuture and Observable by Tomasz Nurkiewicz\n\n\nRxJava Observables and Akka Actors by Anton Kropp\n\n\nVert.x and RxJava by @petermd\n\n\nDeferring Observable code until subscription in RxJava by Dan Lew\n\n\nConvert a Listener into an Observable by Andrea Maglie\n\n\nEffective RxJava by Mike Parker\n\n\n\n\nRxJS\n\n\n\n\n\u7531Shriyans Bhatnagar\uff0cPackt\u7f16\u5199\u7684Reactive JavaScript Programming\u3002\n\n\n\u901a\u8fc7Jafar Husain\u4e86\u89e3RxJS\n\n\nRxJS Koans\u4f5c\u8005\uff1aMatt Podwysocki\n\n\nNetflix JavaScript Talks - Async JavaScript with Reactive Extensions video of a talk by Jafar Husain about the Rx way of programming\n\n\nJourney from procedural to reactive Javascript with stops by Gleb Bahmutov\n\n\nRxJS Observables vs. Promises \u2014 a video lesson from Ben Lesh that explains some of the differences\n\n\nrxvision \u2014 a visualizer debugger for RxJS reactive streams\n\n\nAsynchronous JavaScript at Netflix - Netflix JavaScript Talks - Jafar Husain\n\n\nAsynchronous JavaScript at Netflix - MountainWest JavaScript 2014 - Jafar Husain\n\n\nAsynchronous JavaScript at Netflix - HTML5DevConf - Jafar Husain\n\n\nAdding Even More Fun to Functional Programming With RxJS - Ryan Anklam\n\n\nWhat Every Hipster Should Know About Functional Reactive Programming (video) - Bodil Stokke demos the creation of interactive game mechanics in RxJS\n\n\nRxEmber \u2014 an experimental set of helpers for Ember and RxJS\n\n\nJavaScript Jabber #83\n\n\nHello RxJS - Channel 9\n\n\nRxJS Today and Tomorrow - Channel 9\n\n\nDealing with Streams using RxJS, slides from a presentation by Hugo Cordier\n\n\nRxJS Session at DevNation, visualizing Observable operations as animations, by Brian Leathem\n\n\nReactive Functions with RxJs, slides from Vincent O\u2019s LeedsJS talk\n\n\nAsync and Streaming in JavaScript: We\u2019re All Doing it Wrong! - video/slide presentation by Matthew Podwysocki\n\n\nStep-by-step: Building an RSS reader with RxJS - by Charanjit Singh\n\n\nAngular Air #29: Reactive Programming a video featuring Matt Podwysocki\n\n\n\n\nRxKotlin\n\n\n\n\n\u7528Joan Zapata\u5bf9RxJava\u8fdb\u884c\u5b9e\u9a8c\n\n\n\n\nRx.NET\n\n\n\n\nrx.codeplex.com\n\n\nChannel 9 MSDN videos on Reactive Extensions\n\n\nRx Workshop: Observables vs. Events\n\n\nRx Workshop: Unified Programming Model\n\n\nImproving the Carnac Codebase and Rx Usage by Jake Ginnivan\n\n\n.NET Rocks #907\n\n\nEvent stream manipulation using Rx part 1 and part 2 by Richard Kerslake\n\n\nCloud-Scale Event Processing with the Reactive Extensions by Bart De Smet\n\n\n\n\nRxNetty\n\n\n\n\nAccessing Meetup\u2019s streaming API with RxNetty by Tomasz Nurkiewicz\n\n\n\n\nRxPY\n\n\n\n\nGetting Started with RxPY\n\n\n\n\nRxScala\n\n\n\n\nRxJava: Reactive Extensions in Scala: video of Ben Christensen and Matt Jacobs presenting at SF Scala\n\n\nRxScala + Swing GUIs: Some motivating RxScala examples with Swing GUIs by Samuel Gruetter\n\n\n\n\nRxSwing\n\n\n\n\nJava MVVM with Swing, RxJava and RxSwing examples by Peti Koch\n\n\n\n\nAndroid\n\n\n\n\nRxAndroid\u9879\u76ee\n\n\nMatt Dupree\uff08\u9002\u7528\u4e8eAndroid\u7684RxJava\u7b80\u4ecb\uff09\n\n\nGetting Started With ReactiveX on Android by Ashraff Hathbelagal\n\n\nAsynchronous Android Programming (The Good, the Bad, and the Ugly) by Devin Corrigall\n\n\nGrokking RxJava, Part 4: Reactive Android \u2014 by Dan Lew\n\n\nRxJava on Android: PopupMenus and Dialogs by Adel Nizamutdinov\n\n\nTackling Complexity in Android Apps with RxJava at SoundCloud: Matt McComb interviews Matthias K\u00e4ppler\n\n\nResources for Learning RxJava for Android by Greg Loesch\n\n\nTop 7 Tips for RxJava on Android\n\n\nRxBinding \u2014 easy one-way binding support for Android, based on RxJava\n\n\nG-Rex \u2014 a tiny library that assists in saving and restoring objects to and from disk using RxJava on Android\n\n\nReplace AsyncTask and AsyncTaskLoader with rx.Observable by Ross Hambrick\n\n\nHow to Keep Your RxJava Subscribers from Leaking by Matt Dupree\n\n\nAndroid reactive programming with RxJava video of a presentation by Ivan Morgillo\n\n\nLearning RxJava (for Android) by example video and speaker deck of a presentation by Kaushik Gopal, and the associated GitHub repository\n\n\nRetrofit 2.0: The biggest update yet on the best HTTP Client Library for Android, which now supports RxJava Observables\n\n\nFast Android Networking Fast Android Networking which is made on top of OkHttp Client Layer now supports RxJava\n\n\nRxJava2-Android-Samples Learning RxJava2.0 for Android by Amit Shekhar\n\n\n\n\n\u4f8b\u5b50\n\n\n\n\n\u53cd\u5e94RxJS\u81ea\u52a8\u5b8c\u6210\n\n\nReact RxJS TODO MVC\n\n\nNinya.io  -  Angular + RxJS + rx.angular.js\n  - \n\u7f51\u7ad9\n\n\n\u53cd\u5e94\u6027\u4ea4\u6613\u8005 - \u7f51\u7ad9\n\n\n\n\n\u6f14\u793a\u6587\u7a3f\u548c\u89c6\u9891\n\n\n\n\n\u4e0d\u8981\u8fc7\u6cb3 -  Cascadia.js 2012\u5e7b\u706f\u7247/\u6f14\u793a|,\u89c6\u9891\n\n\n\u6cbb\u7597\u4f60\u7684\u5f02\u6b65\u84dd\u8c03 - \u5947\u602a\u7684\u5faa\u73af2013\u5e7b\u706f\u7247/\u6f14\u793a|,\u89c6\u9891\n\n\n\u4f7f\u7528FRP\u548cRxJS\u7684\u6d41\u5a92\u4f53\u548c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u8282\u76ee -  FutureJS 2014\u5e7b\u706f\u7247/\u6f14\u793a|,\u89c6\u9891\n\n\nMIX 2011\n\n\n\u9891\u90539\u4e0a\u7684\u65e0\u529f\u6269\u5c55\u89c6\u9891\n\n\n\u53cd\u5e94\u89d2 - \u6cd5\u56fdDevoxx 2014  -  Martin Gontovnikas\n\n\n\u901a\u8fc7Ben Christensen\u6d4b\u8bd5\u65e0\u529f\u5e94\u7528 - \u4e86\u89e3TestSubscriber\u548cTestScheduler\n\n\n\n\n\u53c2\u8003\u8d44\u6599\n\n\n\n\n101\u4e2aRx\u6837\u672cWiki\n\n\nRx\u8bbe\u8ba1\u6307\u5357\n\n\nRx\u521d\u5b66\u8005\u6307\u5357\n\n\n\u53cd\u5e94\u6027\u5ba3\u8a00\n\n\nReactiveX\u6587\u6863\u4e2d\u6587\u7ffb\u8bd1 - \u6765\u81ea\u672c\u7f51\u7ad9\u7684\u6587\u4ef6\u7ffb\u8bd1\u6210\u4e2d\u6587\n\n\n\n\n\u524d\u666f\n\n\n\n\n\u53cd\u5e94\u6d411.0.0\u8bbf\u8c08", 
            "title": "\u6559\u7a0b"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_1", 
            "text": "", 
            "title": "\u6559\u7a0b"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_2", 
            "text": "Rx\u7b80\u4ecb\uff1aLee Campbel\u514d\u8d39\u5728\u7ebf\u4e66\u7c4d  \u4f60\u7684\u9f20\u6807\u662fErik Meijer\u7684\u6570\u636e\u5e93  Andr\u00e9Staltz\u9519\u8fc7\u4e86Reactive Programming\u7684\u4ecb\u7ecd  \u638c\u63e1Couchbase\u6587\u6863\u4e2d\u7684\u89c2\u5bdf\u5143\u7d20  \u7531Tomasz Kowalczewski\u63d0\u4f9b\u7684\u7b2c33\u5ea6\u53cd\u5e94\u5f0fJava  \u7531Andr\u00e9Staltz\u4ecb\u7ecdRx 2\u5206\u949f  \u7ef4\u57fa\u767e\u79d1\uff1a\u65e0\u529f\u7f16\u7a0b\u548c\u529f\u80fd\u65e0\u529f\u7f16\u7a0b  \u7531ColinTheShots\u53cd\u5e94  Martin Fowler\u6536\u96c6\u7ba1\u9053  \u9002\u7528\u4e8eAndroid\u7684Rx for .NET\u548cRxJava\uff0c\u7531Olli Salonen\u63d0\u4f9b  Yaroslav Heriatovych\u4e3a\u61d2\u60f0\u4eba\u58eb\u7f16\u5199\u7684NotRxJava\u6307\u5357 - \u5982\u4f55\u91cd\u65b0\u7ec4\u7ec7\u6df7\u4e71\u7684\u5f02\u6b65\u4ee3\u7801\u4ee5\u8fdb\u884c\u53cd\u5e94  \u901a\u8fc7Artur Glier\u7684\u89c6\u9891\u4ecb\u7ecd\u4e86\u89e3\u66f4\u591a\u66f4\u597d\u7684Rx  Rx\u7684\u4e00\u4e2a\u4fcf\u76ae\u4ecb\u7ecdErik Meijer\u7684\u89c6\u9891\u8bb2\u5ea7  \u4ec0\u4e48\u662f\u53cd\u5e94\u5f0f\u7f16\u7a0b\uff1f ,Jafar Husain\u7684\u89c6\u9891\u4ecb\u7ecd\u3002  \u53cd\u5e94\u6027\u6269\u5c55\uff1a\u8d85\u8d8a\u57fa\u7840\uff0cDan Lew\u7684\u6f14\u8bb2\uff08\u5982\u4f55\u5236\u4f5c\u81ea\u5df1\u7684\u64cd\u4f5c\u5458\uff0c\u907f\u514d\u8ba2\u9605\u4e2d\u7684\u5185\u5b58\u6cc4\u6f0f\uff0c\u4e86\u89e3\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u70ed\u70b9\u548c\u51b7\u70b9\u89c2\u5bdf\u70b9\uff0c\u5171\u4eab\u89c2\u5bdf\u70b9\uff0c\u4e3b\u9898\u6545\u969c\uff0c\u80cc\u538b\uff09  Reactive Programming\uff0cVenkat Subramaniam\u7684\u6f14\u793a\u89c6\u9891  ReactiveX\uff0cRxJava\u548cRxAndroid  - \u4eceAndrea Maglie\u5f00\u59cb  Shekhar Gulati\u4f7f\u7528RxJava\u548cJava8\u4ece\u96f6\u5f00\u59cb\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f  RxJava\uff0cRxAndroid\u548cC\u00e9sarFerreira\u7684Retrolambda\u7684\u6d3e\u5bf9\u6280\u5de7", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_3", 
            "text": "\u901a\u8fc7Jafar Husain\u4e86\u89e3RxJava  Rx\u7814\u8ba8\u4f1a  \u65e0\u529f\u7f16\u7a0b\u548cMVC  \u4e92\u52a8\u5f0f\u6559\u7a0b\uff1aJavascript\u4e2d\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u548cJafar Husain\u7684\u6f14\u8bb2\uff08\u89c6\u9891\uff09  RxJava Tutorial 01\u4e00\u4e2a\u6765\u81eaZA\u8f6f\u4ef6\u5f00\u53d1\u6559\u7a0b\u7684\u89c6\u9891\u6559\u7a0b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u5728Eclipse\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u7b80\u5355\u7684\u9879\u76ee  Chris Froussios\u4ecb\u7ecdRxJava", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_4", 
            "text": "\u4ecb\u7ecdRx  \u4ecb\u7ecdRx\uff08\u7f51\u7ad9\uff09  \u7f16\u7a0b\u65e0\u529f\u6269\u5c55\u548cLINQ  .NET\u4e2d\u7684\u53cd\u5e94\u5f0f\u6269\u5c55 - \u4ee3\u7801\u4e3a\u201cdresherdoc\u201d\u7684Rx\u793e\u533a\u6c38\u4e4539\uff05\u7684\u6298\u6263  RxJava Essentials  - \u9002\u7528\u4e8eAndroid\u5f00\u53d1\u4eba\u5458\u7684RxJava  Grokking ReactiveX  - \u4ece\u7406\u8bba\u5230\u65e5\u5e38\u73b0\u5b9e\u4e16\u754c\u7684\u95ee\u9898\u3002,\u65e0\u8bba\u60a8\u662f\u4e3a\u540e\u7aef\uff0c\u524d\u7aef\u8fd8\u662fAndroid\u7f16\u7801\uff1a\u6211\u4eec\u90fd\u4e3a\u60a8\u63d0\u4f9b\u4e86\u8986\u76d6\uff01  Grokking Reactive User Interfaces  - \u6559\u4f1a\u4f60\u4e00\u79cd\u601d\u8003\u7a0b\u5e8f\u548c\u6570\u636e\u7684\u65b0\u65b9\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u6784\u5efa\u5065\u58ee\u548c\u53ef\u6269\u5c55\u7684\u7528\u6237\u754c\u9762\u3002  \u638c\u63e1\u7531Erich de Souza OliveiraUo\uff0cPackt\u64b0\u5199\u7684Reactive JavaScript\u3002", 
            "title": "\u56fe\u4e66"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_5", 
            "text": "Java 8\u4e2d\u7684\u53cd\u5e94\u5f0f\u7f16\u7a0bRxJava\u662f\u7531Russell Elledge\u8bbe\u8ba1\u7684\u8bfe\u7a0b  Coursera\u4e0a\u7684\u65e0\u529f\u7f16\u7a0b\u539f\u5219  \u7531Manuel Vicente Vivo\uff0cPackt\u64b0\u5199\u7684\u53cd\u5e94\u5f0fJava 9\u3002  \u7531Shriyans Bhatnagar\uff0cPackt\u7f16\u5199\u7684Reactive JavaScript Programming\u3002", 
            "title": "\u57f9\u8bad\u73ed"
        }, 
        {
            "location": "/ReactiveX/tutorials/#rxjava", 
            "text": "Grokking RxJava by Dan Lew  LambdaJam Chicago 2013: Functional Reactive Programming in the Netflix API by Ben Christensen  QCon London 2013 presentation: Functional Reactive Programming in the Netflix API and a related interview with Ben Christensen  Functional Reactive in the Netflix API with RxJava by Ben Christensen and Jafar Husain  RxJava in Different Flavours of Java: Java 7 and Java 8 implementations of the same code  Optimizing the Netflix API by Ben Christensen  Reactive Programming at Netflix by Jafar Husain  Implementing an Event Bus with RxJava by Kaushik Gopal  Ben Christensen explains RxJava \u201cbackpressure\u201d strategies (video)  Advanced RxJava a blog from D\u00e1vid Karnok  Unit Testing RxJava Observables by Iv\u00e1n Carballo  RxJava: Unit Testing Examples by Nathan Hunston  Turning Twitter4J into RxJava\u2019s Observable by Tomasz Nurkiewicz  Converting between Completablefuture and Observable by Tomasz Nurkiewicz  RxJava Observables and Akka Actors by Anton Kropp  Vert.x and RxJava by @petermd  Deferring Observable code until subscription in RxJava by Dan Lew  Convert a Listener into an Observable by Andrea Maglie  Effective RxJava by Mike Parker", 
            "title": "RxJava"
        }, 
        {
            "location": "/ReactiveX/tutorials/#rxjs", 
            "text": "\u7531Shriyans Bhatnagar\uff0cPackt\u7f16\u5199\u7684Reactive JavaScript Programming\u3002  \u901a\u8fc7Jafar Husain\u4e86\u89e3RxJS  RxJS Koans\u4f5c\u8005\uff1aMatt Podwysocki  Netflix JavaScript Talks - Async JavaScript with Reactive Extensions video of a talk by Jafar Husain about the Rx way of programming  Journey from procedural to reactive Javascript with stops by Gleb Bahmutov  RxJS Observables vs. Promises \u2014 a video lesson from Ben Lesh that explains some of the differences  rxvision \u2014 a visualizer debugger for RxJS reactive streams  Asynchronous JavaScript at Netflix - Netflix JavaScript Talks - Jafar Husain  Asynchronous JavaScript at Netflix - MountainWest JavaScript 2014 - Jafar Husain  Asynchronous JavaScript at Netflix - HTML5DevConf - Jafar Husain  Adding Even More Fun to Functional Programming With RxJS - Ryan Anklam  What Every Hipster Should Know About Functional Reactive Programming (video) - Bodil Stokke demos the creation of interactive game mechanics in RxJS  RxEmber \u2014 an experimental set of helpers for Ember and RxJS  JavaScript Jabber #83  Hello RxJS - Channel 9  RxJS Today and Tomorrow - Channel 9  Dealing with Streams using RxJS, slides from a presentation by Hugo Cordier  RxJS Session at DevNation, visualizing Observable operations as animations, by Brian Leathem  Reactive Functions with RxJs, slides from Vincent O\u2019s LeedsJS talk  Async and Streaming in JavaScript: We\u2019re All Doing it Wrong! - video/slide presentation by Matthew Podwysocki  Step-by-step: Building an RSS reader with RxJS - by Charanjit Singh  Angular Air #29: Reactive Programming a video featuring Matt Podwysocki", 
            "title": "RxJS"
        }, 
        {
            "location": "/ReactiveX/tutorials/#rxkotlin", 
            "text": "\u7528Joan Zapata\u5bf9RxJava\u8fdb\u884c\u5b9e\u9a8c", 
            "title": "RxKotlin"
        }, 
        {
            "location": "/ReactiveX/tutorials/#rxnet", 
            "text": "rx.codeplex.com  Channel 9 MSDN videos on Reactive Extensions  Rx Workshop: Observables vs. Events  Rx Workshop: Unified Programming Model  Improving the Carnac Codebase and Rx Usage by Jake Ginnivan  .NET Rocks #907  Event stream manipulation using Rx part 1 and part 2 by Richard Kerslake  Cloud-Scale Event Processing with the Reactive Extensions by Bart De Smet", 
            "title": "Rx.NET"
        }, 
        {
            "location": "/ReactiveX/tutorials/#rxnetty", 
            "text": "Accessing Meetup\u2019s streaming API with RxNetty by Tomasz Nurkiewicz", 
            "title": "RxNetty"
        }, 
        {
            "location": "/ReactiveX/tutorials/#rxpy", 
            "text": "Getting Started with RxPY", 
            "title": "RxPY"
        }, 
        {
            "location": "/ReactiveX/tutorials/#rxscala", 
            "text": "RxJava: Reactive Extensions in Scala: video of Ben Christensen and Matt Jacobs presenting at SF Scala  RxScala + Swing GUIs: Some motivating RxScala examples with Swing GUIs by Samuel Gruetter", 
            "title": "RxScala"
        }, 
        {
            "location": "/ReactiveX/tutorials/#rxswing", 
            "text": "Java MVVM with Swing, RxJava and RxSwing examples by Peti Koch", 
            "title": "RxSwing"
        }, 
        {
            "location": "/ReactiveX/tutorials/#android", 
            "text": "RxAndroid\u9879\u76ee  Matt Dupree\uff08\u9002\u7528\u4e8eAndroid\u7684RxJava\u7b80\u4ecb\uff09  Getting Started With ReactiveX on Android by Ashraff Hathbelagal  Asynchronous Android Programming (The Good, the Bad, and the Ugly) by Devin Corrigall  Grokking RxJava, Part 4: Reactive Android \u2014 by Dan Lew  RxJava on Android: PopupMenus and Dialogs by Adel Nizamutdinov  Tackling Complexity in Android Apps with RxJava at SoundCloud: Matt McComb interviews Matthias K\u00e4ppler  Resources for Learning RxJava for Android by Greg Loesch  Top 7 Tips for RxJava on Android  RxBinding \u2014 easy one-way binding support for Android, based on RxJava  G-Rex \u2014 a tiny library that assists in saving and restoring objects to and from disk using RxJava on Android  Replace AsyncTask and AsyncTaskLoader with rx.Observable by Ross Hambrick  How to Keep Your RxJava Subscribers from Leaking by Matt Dupree  Android reactive programming with RxJava video of a presentation by Ivan Morgillo  Learning RxJava (for Android) by example video and speaker deck of a presentation by Kaushik Gopal, and the associated GitHub repository  Retrofit 2.0: The biggest update yet on the best HTTP Client Library for Android, which now supports RxJava Observables  Fast Android Networking Fast Android Networking which is made on top of OkHttp Client Layer now supports RxJava  RxJava2-Android-Samples Learning RxJava2.0 for Android by Amit Shekhar", 
            "title": "Android"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_6", 
            "text": "\u53cd\u5e94RxJS\u81ea\u52a8\u5b8c\u6210  React RxJS TODO MVC  Ninya.io  -  Angular + RxJS + rx.angular.js   -  \u7f51\u7ad9  \u53cd\u5e94\u6027\u4ea4\u6613\u8005 - \u7f51\u7ad9", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_7", 
            "text": "\u4e0d\u8981\u8fc7\u6cb3 -  Cascadia.js 2012\u5e7b\u706f\u7247/\u6f14\u793a|,\u89c6\u9891  \u6cbb\u7597\u4f60\u7684\u5f02\u6b65\u84dd\u8c03 - \u5947\u602a\u7684\u5faa\u73af2013\u5e7b\u706f\u7247/\u6f14\u793a|,\u89c6\u9891  \u4f7f\u7528FRP\u548cRxJS\u7684\u6d41\u5a92\u4f53\u548c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u8282\u76ee -  FutureJS 2014\u5e7b\u706f\u7247/\u6f14\u793a|,\u89c6\u9891  MIX 2011  \u9891\u90539\u4e0a\u7684\u65e0\u529f\u6269\u5c55\u89c6\u9891  \u53cd\u5e94\u89d2 - \u6cd5\u56fdDevoxx 2014  -  Martin Gontovnikas  \u901a\u8fc7Ben Christensen\u6d4b\u8bd5\u65e0\u529f\u5e94\u7528 - \u4e86\u89e3TestSubscriber\u548cTestScheduler", 
            "title": "\u6f14\u793a\u6587\u7a3f\u548c\u89c6\u9891"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_8", 
            "text": "101\u4e2aRx\u6837\u672cWiki  Rx\u8bbe\u8ba1\u6307\u5357  Rx\u521d\u5b66\u8005\u6307\u5357  \u53cd\u5e94\u6027\u5ba3\u8a00  ReactiveX\u6587\u6863\u4e2d\u6587\u7ffb\u8bd1 - \u6765\u81ea\u672c\u7f51\u7ad9\u7684\u6587\u4ef6\u7ffb\u8bd1\u6210\u4e2d\u6587", 
            "title": "\u53c2\u8003\u8d44\u6599"
        }, 
        {
            "location": "/ReactiveX/tutorials/#_9", 
            "text": "\u53cd\u5e94\u6d411.0.0\u8bbf\u8c08", 
            "title": "\u524d\u666f"
        }, 
        {
            "location": "/introduction/", 
            "text": "\u4ecb\u7ecd\n\n\nRxJS\u662f\u4e00\u4e2a\u901a\u8fc7\u4f7f\u7528\u53ef\u89c2\u5bdf\u5e8f\u5217\u6765\u7f16\u5199\u5f02\u6b65\u548c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u7a0b\u5e8f\u7684\u5e93\u3002\n\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6838\u5fc3\u7c7b\u578b\uff0c\nObservable\n\uff0c\u536b\u661f\u7c7b\u578b\uff08Observer\uff0cSchedulers\uff0cSubjects\uff09\u548c\u53d7\nArray#extras\n\uff08map\uff0cfilter\uff0creduce\uff0cevery\u7b49\uff09\u542f\u53d1\u7684\u8fd0\u7b97\u7b26\uff0c\u4ee5\u5141\u8bb8\u5c06\u5f02\u6b65\u4e8b\u4ef6\u4f5c\u4e3a\u96c6\u5408\u6765\u5904\u7406\u3002\n\n\n\u5c06RxJS\u89c6\u4e3aLodash\u7684\u4e8b\u4ef6\u3002\n\n\nReactiveX\u5c06\nObserver\u6a21\u5f0f\n\u4e0e\n\u8fed\u4ee3\u5668\u6a21\u5f0f\n\u4ee5\u53ca\n\u51fd\u6570\u5f0f\u7f16\u7a0b\n\u76f8\u7ed3\u5408\uff0c\u4ee5\u6ee1\u8db3\u7ba1\u7406\u4e8b\u4ef6\u5e8f\u5217\u7684\u7406\u60f3\u65b9\u5f0f\u7684\u9700\u8981\u3002\n\n\nRxJS\u4e2d\u89e3\u51b3\u5f02\u6b65\u4e8b\u4ef6\u7ba1\u7406\u7684\u57fa\u672c\u6982\u5ff5\u662f:\n\n\n\n\nObservable:\n \u4ee3\u8868\u4e86\u672a\u6765\u503c\u6216\u4e8b\u4ef6\u7684\u53ef\u8c03\u6574\u96c6\u5408\u7684\u60f3\u6cd5.\n\n\nObserver:\n \u662f\u77e5\u9053\u5982\u4f55\u8046\u542cObservable\u63d0\u4f9b\u7684\u503c\u7684\u56de\u8c03\u7684\u96c6\u5408\u3002\n\n\nSubscription:\n \u4ee3\u8868Observable\u7684\u6267\u884c, \u4e3b\u8981\u7528\u4e8e\u53d6\u6d88\u6267\u884c.\n\n\nOperators:\n \u662f\u7eaf\u7cb9\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u50cf\nmap\n\uff0c\nfilter\n\uff0c\nconcat\n\uff0c\nflatMap\n\u7b49\u64cd\u4f5c\u6765\u5904\u7406\u96c6\u5408\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u98ce\u683c\u3002\n\n\nSubject:\n \u76f8\u5f53\u4e8e\u4e00\u4e2aEventEmitter\uff0c \u4ee5\u53ca\u5c06\u503c\u6216\u4e8b\u4ef6\u591a\u64ad\u7ed9\u591a\u4e2a\u89c2\u5bdf\u8005\u7684\u552f\u4e00\u65b9\u6cd5\u3002\n\n\nSchedulers:\n\u662f\u96c6\u4e2d\u8c03\u5ea6\u5458\u6765\u63a7\u5236\u5e76\u53d1\uff0c \u4f7f\u6211\u4eec\u80fd\u591f\u5728\u4f8b\u5982\u8ba1\u7b97\u53d1\u751f\u65f6\u8fdb\u884c\u534f\u8c03\u3002 ,\nsetTimeout\n\u6216\nrequestAnimationFrame\n\u6216\u5176\u4ed6\u3002\n\n\n\n\n\u7b2c\u4e00\u4e2a\u4f8b\u5b50\n\n\n\u901a\u5e38\u4f60\u6ce8\u518c\u4e8b\u4ef6\u76d1\u542c\u5668\u3002\n\n\nconst\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\n\nbutton\n.\naddEventListener\n(\nclick\n,\n \n()\n \n=\n \nconsole\n.\nlog\n(\nClicked!\n));\n\n\n\n\n\n\u4f7f\u7528RxJS\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aobservable\u3002\n\n\nimport\n \n{\n \nfromEvent\n \n}\n \nfrom\n \nrxjs\n;\n\n\n\nconst\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\n\nfromEvent\n(\nbutton\n,\n \nclick\n)\n\n  \n.\nsubscribe\n(()\n \n=\n \nconsole\n.\nlog\n(\nClicked!\n));\n\n\n\n\n\n\u7eaf\u5ea6\n\n\nRxJS\u7684\u5f3a\u5927\u4e4b\u5904\u5728\u4e8e\u5b83\u80fd\u591f\u4f7f\u7528\u7eaf\u51fd\u6570\u6765\u751f\u6210\u503c\u3002,\u8fd9\u610f\u5473\u7740\u4f60\u7684\u4ee3\u7801\u4e0d\u592a\u5bb9\u6613\u51fa\u9519\u3002\n\n\n\u901a\u5e38\u4f60\u4f1a\u521b\u5efa\u4e00\u4e2a\u4e0d\u7eaf\u7684\u51fd\u6570\uff0c\u5176\u4e2d\u4f60\u7684\u4ee3\u7801\u4f1a\u8ba9\u4f60\u7684\u72b6\u6001\u53d8\u5f97\u7cdf\u7cd5\u3002\n\n\nconst\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\nlet\n \ncount\n \n=\n \n0\n;\n\n\n\nbutton\n.\naddEventListener\n(\nclick\n,\n \n()\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\n`Clicked \n${\n++\ncount\n}\n times`\n);\n\n\n});\n\n\n\n\n\n\u4f7f\u7528RxJS\u4f60\u9694\u79bb\u72b6\u6001\u3002\n\n\nimport\n \n{\n \nfromEvent\n \n}\n \nfrom\n \nrxjs\n;\n\n\nimport\n \n{\n \nscan\n \n}\n \nfrom\n \nrxjs/operators\n;\n\n\n\nconst\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\n\nfromEvent\n(\nbutton\n,\n \nclick\n)\n\n  \n.\npipe\n(\nscan\n(\ncount\n \n=\n \ncount\n \n+\n \n1\n,\n \n0\n))\n\n  \n.\nsubscribe\n(\ncount\n \n=\n \nconsole\n.\nlog\n(\n`Clicked \n${\ncount\n}\n times`\n));\n\n\n\n\n\n\u626b\u63cf\n\u64cd\u4f5c\u7b26\u7684\u4f5c\u7528\u5c31\u50cf\n\u51cf\u5c11\n\u6570\u7ec4\u3002,\u5b83\u9700\u8981\u4e00\u4e2a\u66b4\u9732\u4e8e\u56de\u8c03\u7684\u503c\u3002\n\u56de\u8c03\u7684\u8fd4\u56de\u503c\u5c06\u6210\u4e3a\u4e0b\u4e00\u6b21\u56de\u8c03\u8fd0\u884c\u65f6\u663e\u793a\u7684\u4e0b\u4e00\u4e2a\u503c\u3002\n\n\n\u6d41\n\n\nRxJS\u62e5\u6709\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u7b26\uff0c\u53ef\u5e2e\u52a9\u60a8\u63a7\u5236\u4e8b\u4ef6\u5982\u4f55\u6d41\u7ecf\u60a8\u7684\u53ef\u89c2\u5bdf\u5bf9\u8c61\u3002\n\n\n\u8fd9\u662f\u6bcf\u79d2\u6700\u591a\u5141\u8bb8\u4e00\u6b21\u70b9\u51fb\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528\u666e\u901a\u7684JavaScript\uff1a\n\n\nconst\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\nconst\n \nrate\n \n=\n \n1000\n;\n\n\nlet\n \ncount\n \n=\n \n0\n;\n\n\nlet\n \nlastClick\n \n=\n \nDate\n.\nnow\n()\n \n-\n \nrate\n;\n\n\n\nbutton\n.\naddEventListener\n(\nclick\n,\n \n()\n \n=\n \n{\n\n  \nif\n \n(\nDate\n.\nnow\n()\n \n-\n \nlastClick\n \n=\n \nrate\n)\n \n{\n\n    \nconsole\n.\nlog\n(\n`Clicked \n${\n++\ncount\n}\n times`\n);\n\n    \nlastClick\n \n=\n \nDate\n.\nnow\n();\n\n  \n}\n\n\n});\n\n\n\n\n\nWith RxJS:\n\n\nimport\n \n{\n \nfromEvent\n \n}\n \nfrom\n \nrxjs\n;\n\n\nimport\n \n{\n \nthrottleTime\n,\n \nscan\n \n}\n \nfrom\n \nrxjs/operators\n;\n\n\n\nconst\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\n\nfromEvent\n(\nbutton\n,\n \nclick\n)\n\n  \n.\npipe\n(\n\n    \nthrottleTime\n(\n1000\n),\n\n    \nscan\n(\ncount\n \n=\n \ncount\n \n+\n \n1\n,\n \n0\n)\n\n  \n)\n\n  \n.\nsubscribe\n(\ncount\n \n=\n \nconsole\n.\nlog\n(\n`Clicked \n${\ncount\n}\n times`\n));\n\n\n\n\n\n\u5176\u4ed6\u6d41\u91cf\u63a7\u5236\u64cd\u4f5c\u5458\u662f\nfilter\n, \ndelay\n, \ndebounceTime\n, \ntake\n, \ntakeUntil\n, \ndistinct\n, \ndistinctUntilChanged\n etc.\n\n\n\u503c\n\n\n\u60a8\u53ef\u4ee5\u8f6c\u6362\u901a\u8fc7\u60a8\u7684observables\u4f20\u9012\u7684\u503c\u3002\n\n\n\u4ee5\u4e0b\u662f\u5982\u4f55\u5728\u666e\u901aJavaScript\u4e2d\u4e3a\u6bcf\u6b21\u70b9\u51fb\u6dfb\u52a0\u5f53\u524d\u9f20\u6807\u7684x\u4f4d\u7f6e\uff1a\n\n\nconst\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\nconst\n \nrate\n \n=\n \n1000\n;\n\n\nlet\n \ncount\n \n=\n \n0\n;\n\n\nlet\n \nlastClick\n \n=\n \nDate\n.\nnow\n()\n \n-\n \nrate\n;\n\n\n\nbutton\n.\naddEventListener\n(\nclick\n,\n \n(\nevent\n)\n \n=\n \n{\n\n  \nif\n \n(\nDate\n.\nnow\n()\n \n-\n \nlastClick\n \n=\n \nrate\n)\n \n{\n\n    \ncount\n \n+=\n \nevent\n.\nclientX\n;\n\n    \nconsole\n.\nlog\n(\ncount\n)\n\n    \nlastClick\n \n=\n \nDate\n.\nnow\n();\n\n  \n}\n\n\n});\n\n\n\n\n\n\u4f7f\u7528RxJS\uff1a\n\n\nimport\n \n{\n \nfromEvent\n \n}\n \nfrom\n \nrxjs\n;\n\n\nimport\n \n{\n \nthrottleTime\n,\n \nmap\n,\n \nscan\n \n}\n \nfrom\n \nrxjs/operators\n;\n\n\n\nconst\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\n\nfromEvent\n(\nbutton\n,\n \nclick\n)\n\n  \n.\npipe\n(\n\n    \nthrottleTime\n(\n1000\n),\n\n    \nmap\n(\nevent\n \n=\n \nevent\n.\nclientX\n),\n\n    \nscan\n((\ncount\n,\n \nclientX\n)\n \n=\n \ncount\n \n+\n \nclientX\n,\n \n0\n)\n\n  \n)\n\n  \n.\nsubscribe\n(\ncount\n \n=\n \nconsole\n.\nlog\n(\ncount\n));\n\n\n\n\n\n\u5176\u4ed6\u4ef7\u503c\u751f\u4ea7\u8fd0\u8425\u5546\u662f\npluck\n, \npairwise\n, \nsample\n etc.", 
            "title": "\u7b80\u4ecb"
        }, 
        {
            "location": "/introduction/#_1", 
            "text": "RxJS\u662f\u4e00\u4e2a\u901a\u8fc7\u4f7f\u7528\u53ef\u89c2\u5bdf\u5e8f\u5217\u6765\u7f16\u5199\u5f02\u6b65\u548c\u57fa\u4e8e\u4e8b\u4ef6\u7684\u7a0b\u5e8f\u7684\u5e93\u3002\n\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6838\u5fc3\u7c7b\u578b\uff0c Observable \uff0c\u536b\u661f\u7c7b\u578b\uff08Observer\uff0cSchedulers\uff0cSubjects\uff09\u548c\u53d7 Array#extras \uff08map\uff0cfilter\uff0creduce\uff0cevery\u7b49\uff09\u542f\u53d1\u7684\u8fd0\u7b97\u7b26\uff0c\u4ee5\u5141\u8bb8\u5c06\u5f02\u6b65\u4e8b\u4ef6\u4f5c\u4e3a\u96c6\u5408\u6765\u5904\u7406\u3002  \u5c06RxJS\u89c6\u4e3aLodash\u7684\u4e8b\u4ef6\u3002  ReactiveX\u5c06 Observer\u6a21\u5f0f \u4e0e \u8fed\u4ee3\u5668\u6a21\u5f0f \u4ee5\u53ca \u51fd\u6570\u5f0f\u7f16\u7a0b \u76f8\u7ed3\u5408\uff0c\u4ee5\u6ee1\u8db3\u7ba1\u7406\u4e8b\u4ef6\u5e8f\u5217\u7684\u7406\u60f3\u65b9\u5f0f\u7684\u9700\u8981\u3002  RxJS\u4e2d\u89e3\u51b3\u5f02\u6b65\u4e8b\u4ef6\u7ba1\u7406\u7684\u57fa\u672c\u6982\u5ff5\u662f:   Observable:  \u4ee3\u8868\u4e86\u672a\u6765\u503c\u6216\u4e8b\u4ef6\u7684\u53ef\u8c03\u6574\u96c6\u5408\u7684\u60f3\u6cd5.  Observer:  \u662f\u77e5\u9053\u5982\u4f55\u8046\u542cObservable\u63d0\u4f9b\u7684\u503c\u7684\u56de\u8c03\u7684\u96c6\u5408\u3002  Subscription:  \u4ee3\u8868Observable\u7684\u6267\u884c, \u4e3b\u8981\u7528\u4e8e\u53d6\u6d88\u6267\u884c.  Operators:  \u662f\u7eaf\u7cb9\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u50cf map \uff0c filter \uff0c concat \uff0c flatMap \u7b49\u64cd\u4f5c\u6765\u5904\u7406\u96c6\u5408\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u98ce\u683c\u3002  Subject:  \u76f8\u5f53\u4e8e\u4e00\u4e2aEventEmitter\uff0c \u4ee5\u53ca\u5c06\u503c\u6216\u4e8b\u4ef6\u591a\u64ad\u7ed9\u591a\u4e2a\u89c2\u5bdf\u8005\u7684\u552f\u4e00\u65b9\u6cd5\u3002  Schedulers: \u662f\u96c6\u4e2d\u8c03\u5ea6\u5458\u6765\u63a7\u5236\u5e76\u53d1\uff0c \u4f7f\u6211\u4eec\u80fd\u591f\u5728\u4f8b\u5982\u8ba1\u7b97\u53d1\u751f\u65f6\u8fdb\u884c\u534f\u8c03\u3002 , setTimeout \u6216 requestAnimationFrame \u6216\u5176\u4ed6\u3002", 
            "title": "\u4ecb\u7ecd"
        }, 
        {
            "location": "/introduction/#_2", 
            "text": "\u901a\u5e38\u4f60\u6ce8\u518c\u4e8b\u4ef6\u76d1\u542c\u5668\u3002  const   button   =   document . querySelector ( button );  button . addEventListener ( click ,   ()   =   console . log ( Clicked! ));   \u4f7f\u7528RxJS\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2aobservable\u3002  import   {   fromEvent   }   from   rxjs ;  const   button   =   document . querySelector ( button );  fromEvent ( button ,   click ) \n   . subscribe (()   =   console . log ( Clicked! ));", 
            "title": "\u7b2c\u4e00\u4e2a\u4f8b\u5b50"
        }, 
        {
            "location": "/introduction/#_3", 
            "text": "RxJS\u7684\u5f3a\u5927\u4e4b\u5904\u5728\u4e8e\u5b83\u80fd\u591f\u4f7f\u7528\u7eaf\u51fd\u6570\u6765\u751f\u6210\u503c\u3002,\u8fd9\u610f\u5473\u7740\u4f60\u7684\u4ee3\u7801\u4e0d\u592a\u5bb9\u6613\u51fa\u9519\u3002  \u901a\u5e38\u4f60\u4f1a\u521b\u5efa\u4e00\u4e2a\u4e0d\u7eaf\u7684\u51fd\u6570\uff0c\u5176\u4e2d\u4f60\u7684\u4ee3\u7801\u4f1a\u8ba9\u4f60\u7684\u72b6\u6001\u53d8\u5f97\u7cdf\u7cd5\u3002  const   button   =   document . querySelector ( button );  let   count   =   0 ;  button . addEventListener ( click ,   ()   =   { \n   console . log ( `Clicked  ${ ++ count }  times` );  });   \u4f7f\u7528RxJS\u4f60\u9694\u79bb\u72b6\u6001\u3002  import   {   fromEvent   }   from   rxjs ;  import   {   scan   }   from   rxjs/operators ;  const   button   =   document . querySelector ( button );  fromEvent ( button ,   click ) \n   . pipe ( scan ( count   =   count   +   1 ,   0 )) \n   . subscribe ( count   =   console . log ( `Clicked  ${ count }  times` ));   \u626b\u63cf \u64cd\u4f5c\u7b26\u7684\u4f5c\u7528\u5c31\u50cf \u51cf\u5c11 \u6570\u7ec4\u3002,\u5b83\u9700\u8981\u4e00\u4e2a\u66b4\u9732\u4e8e\u56de\u8c03\u7684\u503c\u3002\n\u56de\u8c03\u7684\u8fd4\u56de\u503c\u5c06\u6210\u4e3a\u4e0b\u4e00\u6b21\u56de\u8c03\u8fd0\u884c\u65f6\u663e\u793a\u7684\u4e0b\u4e00\u4e2a\u503c\u3002", 
            "title": "\u7eaf\u5ea6"
        }, 
        {
            "location": "/introduction/#_4", 
            "text": "RxJS\u62e5\u6709\u4e00\u7cfb\u5217\u7684\u64cd\u4f5c\u7b26\uff0c\u53ef\u5e2e\u52a9\u60a8\u63a7\u5236\u4e8b\u4ef6\u5982\u4f55\u6d41\u7ecf\u60a8\u7684\u53ef\u89c2\u5bdf\u5bf9\u8c61\u3002  \u8fd9\u662f\u6bcf\u79d2\u6700\u591a\u5141\u8bb8\u4e00\u6b21\u70b9\u51fb\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528\u666e\u901a\u7684JavaScript\uff1a  const   button   =   document . querySelector ( button );  const   rate   =   1000 ;  let   count   =   0 ;  let   lastClick   =   Date . now ()   -   rate ;  button . addEventListener ( click ,   ()   =   { \n   if   ( Date . now ()   -   lastClick   =   rate )   { \n     console . log ( `Clicked  ${ ++ count }  times` ); \n     lastClick   =   Date . now (); \n   }  });   With RxJS:  import   {   fromEvent   }   from   rxjs ;  import   {   throttleTime ,   scan   }   from   rxjs/operators ;  const   button   =   document . querySelector ( button );  fromEvent ( button ,   click ) \n   . pipe ( \n     throttleTime ( 1000 ), \n     scan ( count   =   count   +   1 ,   0 ) \n   ) \n   . subscribe ( count   =   console . log ( `Clicked  ${ count }  times` ));   \u5176\u4ed6\u6d41\u91cf\u63a7\u5236\u64cd\u4f5c\u5458\u662f filter ,  delay ,  debounceTime ,  take ,  takeUntil ,  distinct ,  distinctUntilChanged  etc.", 
            "title": "\u6d41"
        }, 
        {
            "location": "/introduction/#_5", 
            "text": "\u60a8\u53ef\u4ee5\u8f6c\u6362\u901a\u8fc7\u60a8\u7684observables\u4f20\u9012\u7684\u503c\u3002  \u4ee5\u4e0b\u662f\u5982\u4f55\u5728\u666e\u901aJavaScript\u4e2d\u4e3a\u6bcf\u6b21\u70b9\u51fb\u6dfb\u52a0\u5f53\u524d\u9f20\u6807\u7684x\u4f4d\u7f6e\uff1a  const   button   =   document . querySelector ( button );  const   rate   =   1000 ;  let   count   =   0 ;  let   lastClick   =   Date . now ()   -   rate ;  button . addEventListener ( click ,   ( event )   =   { \n   if   ( Date . now ()   -   lastClick   =   rate )   { \n     count   +=   event . clientX ; \n     console . log ( count ) \n     lastClick   =   Date . now (); \n   }  });   \u4f7f\u7528RxJS\uff1a  import   {   fromEvent   }   from   rxjs ;  import   {   throttleTime ,   map ,   scan   }   from   rxjs/operators ;  const   button   =   document . querySelector ( button );  fromEvent ( button ,   click ) \n   . pipe ( \n     throttleTime ( 1000 ), \n     map ( event   =   event . clientX ), \n     scan (( count ,   clientX )   =   count   +   clientX ,   0 ) \n   ) \n   . subscribe ( count   =   console . log ( count ));   \u5176\u4ed6\u4ef7\u503c\u751f\u4ea7\u8fd0\u8425\u5546\u662f pluck ,  pairwise ,  sample  etc.", 
            "title": "\u503c"
        }, 
        {
            "location": "/installation/", 
            "text": "\u5b89\u88c5\n\n\nES6\u901a\u8fc7npm\n\n\nnpm install rxjs@beta\n\n\n\n\n\u53ea\u5bfc\u5165\u4f60\u9700\u8981\u7684\u90e8\u5206\u5e76\u4f7f\u7528\u5b83\u4eec\n\n\nimport\n \n{\n \nof\n,\n \nfromEvent\n \n}\n \nfrom\n \nrxjs\n;\n\n\nimport\n \n{\n \nmap\n,\n \nfilter\n \n}\n \nfrom\n \nrxjs/operators\n;\n\n\n\nof\n(\n1\n,\n \n2\n,\n \n3\n).\npipe\n(\n\n  \nmap\n(\nx\n \n=\n \nx\n \n+\n \n!!!\n),\n\n\n);\n\n\n\nfromEvent\n(\ninput\n,\n \ninput\n).\npipe\n(\n\n  \nmap\n(\ne\n \n=\n \ne\n.\ntarget\n.\nvalue\n),\n\n  \nfilter\n(\ntext\n \n=\n \ntext\n.\nlength\n \n \n10\n),\n\n\n);\n\n\n\n\n\nCommonJS\u901a\u8fc7npm\n\n\nnpm install rxjs@beta\n\n\n\n\n\u7528\u6cd5\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u53ea\u6709\u4f7f\u7528require\uff1a\n\n\nconst\n \n{\n \nof\n,\n \nfromEvent\n \n}\n \n=\n \nrequire\n(\nrxjs\n);\n\n\nconst\n \n{\n \nmap\n,\n \nfilter\n \n}\n \n=\n \nrequire\n(\nrxjs/operators\n);\n\n\n\nof\n(\n1\n,\n \n2\n,\n \n3\n).\npipe\n(\n\n  \nmap\n(\nx\n \n=\n \nx\n \n+\n \n!!!\n),\n\n\n);\n\n\n\nfromEvent\n(\ninput\n,\n \ninput\n).\npipe\n(\n\n  \nmap\n(\ne\n \n=\n \ne\n.\ntarget\n.\nvalue\n),\n\n  \nfilter\n(\ntext\n \n=\n \ntext\n.\nlength\n \n \n10\n),\n\n\n);\n\n\n\n\n\nUMD (\u5168\u7403\u811a\u672c)\n\n\n\u5982\u679c\u4f60\u559c\u6b22\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528CDN\uff08\u5982\u4e0b\u6240\u793a\uff09\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u4e0eESM\u6216CJS\u7248\u672c\u4e2d\u7684\u4f4d\u7f6e\u76f8\u540c\uff0c\u4f46\u5b83\u4eec\u7684\u547d\u540d\u7a7a\u95f4\u7c7b\u4f3c\u4e8e\u201crxjs\u201d\u6216\u201crxjs.operators\u201d\uff0c\u800c\u4e0d\u662f\u201crxjs\u201d\u548c\u201crxjs/operators\u201d\u3002\n\n\nconst\n \n{\n \nof\n,\n \nfromEvent\n \n}\n \n=\n \nrxjs\n;\n\n\nconst\n \n{\n \nmap\n,\n \nfilter\n \n}\n \n=\n \nrxjs\n.\noperators\n;\n\n\n\nof\n(\n1\n,\n \n2\n,\n \n3\n).\npipe\n(\n\n  \nmap\n(\nx\n \n=\n \nx\n \n+\n \n!!!\n),\n\n\n);\n\n\n\nfromEvent\n(\ninput\n,\n \ninput\n).\npipe\n(\n\n  \nmap\n(\ne\n \n=\n \ne\n.\ntarget\n.\nvalue\n),\n\n  \nfilter\n(\ntext\n \n=\n \ntext\n.\nlength\n \n \n10\n),\n\n\n);\n\n\n\n\n\nCDN\n\n\n\u5bf9\u4e8eCDN\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\nunpkg\n.\n\n\n\n\nhttps://unpkg.com/rxjs@beta/bundles/rxjs.umd.js\n\n\nhttps://unpkg.com/rxjs@beta/bundles/rxjs.umd.min.js", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/installation/#_1", 
            "text": "", 
            "title": "\u5b89\u88c5"
        }, 
        {
            "location": "/installation/#es6npm", 
            "text": "npm install rxjs@beta  \u53ea\u5bfc\u5165\u4f60\u9700\u8981\u7684\u90e8\u5206\u5e76\u4f7f\u7528\u5b83\u4eec  import   {   of ,   fromEvent   }   from   rxjs ;  import   {   map ,   filter   }   from   rxjs/operators ;  of ( 1 ,   2 ,   3 ). pipe ( \n   map ( x   =   x   +   !!! ),  );  fromEvent ( input ,   input ). pipe ( \n   map ( e   =   e . target . value ), \n   filter ( text   =   text . length     10 ),  );", 
            "title": "ES6\u901a\u8fc7npm"
        }, 
        {
            "location": "/installation/#commonjsnpm", 
            "text": "npm install rxjs@beta  \u7528\u6cd5\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u53ea\u6709\u4f7f\u7528require\uff1a  const   {   of ,   fromEvent   }   =   require ( rxjs );  const   {   map ,   filter   }   =   require ( rxjs/operators );  of ( 1 ,   2 ,   3 ). pipe ( \n   map ( x   =   x   +   !!! ),  );  fromEvent ( input ,   input ). pipe ( \n   map ( e   =   e . target . value ), \n   filter ( text   =   text . length     10 ),  );", 
            "title": "CommonJS\u901a\u8fc7npm"
        }, 
        {
            "location": "/installation/#umd", 
            "text": "\u5982\u679c\u4f60\u559c\u6b22\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528CDN\uff08\u5982\u4e0b\u6240\u793a\uff09\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u4e0eESM\u6216CJS\u7248\u672c\u4e2d\u7684\u4f4d\u7f6e\u76f8\u540c\uff0c\u4f46\u5b83\u4eec\u7684\u547d\u540d\u7a7a\u95f4\u7c7b\u4f3c\u4e8e\u201crxjs\u201d\u6216\u201crxjs.operators\u201d\uff0c\u800c\u4e0d\u662f\u201crxjs\u201d\u548c\u201crxjs/operators\u201d\u3002  const   {   of ,   fromEvent   }   =   rxjs ;  const   {   map ,   filter   }   =   rxjs . operators ;  of ( 1 ,   2 ,   3 ). pipe ( \n   map ( x   =   x   +   !!! ),  );  fromEvent ( input ,   input ). pipe ( \n   map ( e   =   e . target . value ), \n   filter ( text   =   text . length     10 ),  );", 
            "title": "UMD (\u5168\u7403\u811a\u672c)"
        }, 
        {
            "location": "/installation/#cdn", 
            "text": "\u5bf9\u4e8eCDN\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 unpkg .   https://unpkg.com/rxjs@beta/bundles/rxjs.umd.js  https://unpkg.com/rxjs@beta/bundles/rxjs.umd.min.js", 
            "title": "CDN"
        }, 
        {
            "location": "/tutorial/basics/", 
            "text": "\u57fa\u7840\n\n\n\u8f6c\u6362\u4e3a\u89c2\u6d4b\u70b9\n\n\n// From one or multiple values\n\n\nRx\n.\nObservable\n.\nof\n(\nfoo\n,\n \nbar\n);\n\n\n\n// From array of values\n\n\nRx\n.\nObservable\n.\nfrom\n([\n1\n,\n2\n,\n3\n]);\n\n\n\n// From an event\n\n\nRx\n.\nObservable\n.\nfromEvent\n(\ndocument\n.\nquerySelector\n(\nbutton\n),\n \nclick\n);\n\n\n\n// From a Promise\n\n\nRx\n.\nObservable\n.\nfromPromise\n(\nfetch\n(\n/users\n));\n\n\n\n// From a callback (last argument is a callback)\n\n\n// fs.exists = (path, cb(exists))\n\n\nvar\n \nexists\n \n=\n \nRx\n.\nObservable\n.\nbindCallback\n(\nfs\n.\nexists\n);\n\n\nexists\n(\nfile.txt\n).\nsubscribe\n(\nexists\n \n=\n \nconsole\n.\nlog\n(\nDoes file exist?\n,\n \nexists\n));\n\n\n\n// From a callback (last argument is a callback)\n\n\n// fs.rename = (pathA, pathB, cb(err, result))\n\n\nvar\n \nrename\n \n=\n \nRx\n.\nObservable\n.\nbindNodeCallback\n(\nfs\n.\nrename\n);\n\n\nrename\n(\nfile.txt\n,\n \nelse.txt\n).\nsubscribe\n(()\n \n=\n \nconsole\n.\nlog\n(\nRenamed!\n));\n\n\n\n\n\n\u521b\u5efa\u89c2\u5bdf\u70b9\n\n\n\u4ece\u5916\u90e8\u4ea7\u751f\u65b0\u7684\u4e8b\u4ef6\n\n\nvar\n \nmyObservable\n \n=\n \nnew\n \nRx\n.\nSubject\n();\n\n\nmyObservable\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n\n\nmyObservable\n.\nnext\n(\nfoo\n);\n\n\n\n\n\n\u5185\u90e8\u4ea7\u751f\u65b0\u7684\u4e8b\u4ef6\n\n\nvar\n \nmyObservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nobserver\n \n=\n \n{\n\n  \nobserver\n.\nnext\n(\nfoo\n);\n\n  \nsetTimeout\n(()\n \n=\n \nobserver\n.\nnext\n(\nbar\n),\n \n1000\n);\n\n\n});\n\n\nmyObservable\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n\n\n\n\n\nWhich one you choose depends on the scenario. The normal \nObservable\n is great when you want to wrap functionality that produces values over time. An example would be a websocket connection. With \nSubject\n you can trigger new events from anywhere really and you can connect existing observables to it.\n\n\n\u63a7\u5236\u6d41\n\n\n// typing \nhello world\n\n\nvar\n \ninput\n \n=\n \nRx\n.\nObservable\n.\nfromEvent\n(\ndocument\n.\nquerySelector\n(\ninput\n),\n \ninput\n);\n\n\n\n// Filter out target values less than 3 characters long\n\n\ninput\n.\npipe\n(\n\n  \nfilter\n(\nevent\n \n=\n \nevent\n.\ntarget\n.\nvalue\n.\nlength\n \n \n2\n),\n\n  \nmap\n(\nevent\n \n=\n \nevent\n.\ntarget\n.\nvalue\n)\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nhel\n\n\n\n// Delay the events\n\n\ninput\n.\npipe\n(\n\n  \ndelay\n(\n200\n),\n\n  \nmap\n(\nevent\n \n=\n \nevent\n.\ntarget\n.\nvalue\n)\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nh\n -200ms-\n \ne\n -200ms-\n \nl\n ...\n\n\n\n// Only let through an event every 200 ms\n\n\ninput\n.\npipe\n(\n\n  \nthrottleTime\n(\n200\n),\n\n  \nmap\n(\nevent\n \n=\n \nevent\n.\ntarget\n.\nvalue\n)\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nh\n -200ms-\n \nw\n\n\n\n// Let through latest event after 200 ms\n\n\ninput\n.\npipe\n(\n\n  \ndebounceTime\n(\n200\n),\n\n  \nmap\n(\nevent\n \n=\n \nevent\n.\ntarget\n.\nvalue\n)\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \no\n -200ms-\n \nd\n\n\n\n// Stop the stream of events after 3 events\n\n\ninput\n.\npipe\n(\n\n  \ntake\n(\n3\n),\n\n  \nmap\n(\nevent\n \n=\n \nevent\n.\ntarget\n.\nvalue\n)\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nhel\n\n\n\n// Passes through events until other observable triggers an event\n\n\nvar\n \nstopStream\n \n=\n \nRx\n.\nObservable\n.\nfromEvent\n(\ndocument\n.\nquerySelector\n(\nbutton\n),\n \nclick\n);\n\n\ninput\n.\npipe\n(\n\n  \ntakeUntil\n(\nstopStream\n),\n\n  \nmap\n(\nevent\n \n=\n \nevent\n.\ntarget\n.\nvalue\n)\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nhello\n (click)\n\n\n\n\n\n\u751f\u4ea7\u4ef7\u503c\n\n\n// typing \nhello world\n\n\nvar\n \ninput\n \n=\n \nRx\n.\nObservable\n.\nfromEvent\n(\ndocument\n.\nquerySelector\n(\ninput\n),\n \ninput\n);\n\n\n\n// Pass on a new value\n\n\ninput\n.\npipe\n(\n\n  \nmap\n(\nevent\n \n=\n \nevent\n.\ntarget\n.\nvalue\n)\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nh\n\n\n\n// Pass on a new value by plucking it\n\n\ninput\n.\npipe\n(\n\n  \npluck\n(\ntarget\n,\n \nvalue\n)\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nh\n\n\n\n// Pass the two previous values\n\n\ninput\n.\npipe\n(\n\n  \npluck\n(\ntarget\n,\n \nvalue\n),\n\n  \npairwise\n()\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// [\nh\n, \ne\n]\n\n\n\n// Only pass unique values through\n\n\ninput\n.\npipe\n(\n\n  \npluck\n(\ntarget\n,\n \nvalue\n),\n\n  \ndistinct\n()\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nhelo wrd\n\n\n\n// Do not pass repeating values through\n\n\ninput\n.\npipe\n(\n\n  \npluck\n(\ntarget\n,\n \nvalue\n),\n\n  \ndistinctUntilChanged\n()\n\n\n)\n\n\n.\nsubscribe\n(\nvalue\n \n=\n \nconsole\n.\nlog\n(\nvalue\n));\n \n// \nhelo world", 
            "title": "\u57fa\u7840"
        }, 
        {
            "location": "/tutorial/basics/#_1", 
            "text": "", 
            "title": "\u57fa\u7840"
        }, 
        {
            "location": "/tutorial/basics/#_2", 
            "text": "// From one or multiple values  Rx . Observable . of ( foo ,   bar );  // From array of values  Rx . Observable . from ([ 1 , 2 , 3 ]);  // From an event  Rx . Observable . fromEvent ( document . querySelector ( button ),   click );  // From a Promise  Rx . Observable . fromPromise ( fetch ( /users ));  // From a callback (last argument is a callback)  // fs.exists = (path, cb(exists))  var   exists   =   Rx . Observable . bindCallback ( fs . exists );  exists ( file.txt ). subscribe ( exists   =   console . log ( Does file exist? ,   exists ));  // From a callback (last argument is a callback)  // fs.rename = (pathA, pathB, cb(err, result))  var   rename   =   Rx . Observable . bindNodeCallback ( fs . rename );  rename ( file.txt ,   else.txt ). subscribe (()   =   console . log ( Renamed! ));", 
            "title": "\u8f6c\u6362\u4e3a\u89c2\u6d4b\u70b9"
        }, 
        {
            "location": "/tutorial/basics/#_3", 
            "text": "\u4ece\u5916\u90e8\u4ea7\u751f\u65b0\u7684\u4e8b\u4ef6  var   myObservable   =   new   Rx . Subject ();  myObservable . subscribe ( value   =   console . log ( value ));  myObservable . next ( foo );   \u5185\u90e8\u4ea7\u751f\u65b0\u7684\u4e8b\u4ef6  var   myObservable   =   Rx . Observable . create ( observer   =   { \n   observer . next ( foo ); \n   setTimeout (()   =   observer . next ( bar ),   1000 );  });  myObservable . subscribe ( value   =   console . log ( value ));   Which one you choose depends on the scenario. The normal  Observable  is great when you want to wrap functionality that produces values over time. An example would be a websocket connection. With  Subject  you can trigger new events from anywhere really and you can connect existing observables to it.", 
            "title": "\u521b\u5efa\u89c2\u5bdf\u70b9"
        }, 
        {
            "location": "/tutorial/basics/#_4", 
            "text": "// typing  hello world  var   input   =   Rx . Observable . fromEvent ( document . querySelector ( input ),   input );  // Filter out target values less than 3 characters long  input . pipe ( \n   filter ( event   =   event . target . value . length     2 ), \n   map ( event   =   event . target . value )  )  . subscribe ( value   =   console . log ( value ));   //  hel  // Delay the events  input . pipe ( \n   delay ( 200 ), \n   map ( event   =   event . target . value )  )  . subscribe ( value   =   console . log ( value ));   //  h  -200ms-   e  -200ms-   l  ...  // Only let through an event every 200 ms  input . pipe ( \n   throttleTime ( 200 ), \n   map ( event   =   event . target . value )  )  . subscribe ( value   =   console . log ( value ));   //  h  -200ms-   w  // Let through latest event after 200 ms  input . pipe ( \n   debounceTime ( 200 ), \n   map ( event   =   event . target . value )  )  . subscribe ( value   =   console . log ( value ));   //  o  -200ms-   d  // Stop the stream of events after 3 events  input . pipe ( \n   take ( 3 ), \n   map ( event   =   event . target . value )  )  . subscribe ( value   =   console . log ( value ));   //  hel  // Passes through events until other observable triggers an event  var   stopStream   =   Rx . Observable . fromEvent ( document . querySelector ( button ),   click );  input . pipe ( \n   takeUntil ( stopStream ), \n   map ( event   =   event . target . value )  )  . subscribe ( value   =   console . log ( value ));   //  hello  (click)", 
            "title": "\u63a7\u5236\u6d41"
        }, 
        {
            "location": "/tutorial/basics/#_5", 
            "text": "// typing  hello world  var   input   =   Rx . Observable . fromEvent ( document . querySelector ( input ),   input );  // Pass on a new value  input . pipe ( \n   map ( event   =   event . target . value )  )  . subscribe ( value   =   console . log ( value ));   //  h  // Pass on a new value by plucking it  input . pipe ( \n   pluck ( target ,   value )  )  . subscribe ( value   =   console . log ( value ));   //  h  // Pass the two previous values  input . pipe ( \n   pluck ( target ,   value ), \n   pairwise ()  )  . subscribe ( value   =   console . log ( value ));   // [ h ,  e ]  // Only pass unique values through  input . pipe ( \n   pluck ( target ,   value ), \n   distinct ()  )  . subscribe ( value   =   console . log ( value ));   //  helo wrd  // Do not pass repeating values through  input . pipe ( \n   pluck ( target ,   value ), \n   distinctUntilChanged ()  )  . subscribe ( value   =   console . log ( value ));   //  helo world", 
            "title": "\u751f\u4ea7\u4ef7\u503c"
        }, 
        {
            "location": "/tutorial/applications/", 
            "text": "\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f\n\n\nRxJS is a great tool to keep your code less error prone. It does that by using pure and stateless functions. But applications are stateful, so how do we bridge the stateless world of RxJS with the stateful world of our applications?\n\n\nLet us create a simple state store of the value \n0\n. On each click we want to increase that count in our state store.\n\n\nvar\n \nbutton\n \n=\n \ndocument\n.\nquerySelector\n(\nbutton\n);\n\n\nRx\n.\nObservable\n.\nfromEvent\n(\nbutton\n,\n \nclick\n).\npipe\n(\n\n  \n// scan (reduce) to a stream of counts\n\n  \nscan\n(\ncount\n \n=\n \ncount\n \n+\n \n1\n,\n \n0\n)\n\n  \n// Set the count on an element each time it changes\n\n\n).\nsubscribe\n(\ncount\n \n=\n \ndocument\n.\nquerySelector\n(\n#count\n).\ninnerHTML\n \n=\n \ncount\n);\n\n\n\n\n\nSo producing state is within the world of RxJS, but changing the DOM is a side effect which happens at \"the end of the line\".\n\n\n\u72b6\u6001\u5b58\u50a8\n\n\nApplications use state stores to hold state. These are called different things in different frameworks, like store, reducer and model, but at the core they are all just a plain object. What we also need to handle is that multiple observables can update a single state store.\n\n\nvar\n \nincreaseButton\n \n=\n \ndocument\n.\nquerySelector\n(\n#increase\n);\n\n\nvar\n \nincrease\n \n=\n \nRx\n.\nObservable\n.\nfromEvent\n(\nincreaseButton\n,\n \nclick\n).\npipe\n(\n\n  \n// We map to a function that will change our state\n\n  \nmap\n(()\n \n=\n \nstate\n \n=\n \nObject\n.\nassign\n({},\n \nstate\n,\n \n{\ncount\n:\n \nstate\n.\ncount\n \n+\n \n1\n}))\n\n\n);\n\n\n\n\n\nWhat we do here is mapping a click event to a state changing function. So instead of mapping to a value, we map to a function. A function will change the state of our state store. So now let us see how we actually make the change.\n\n\nvar\n \nincreaseButton\n \n=\n \ndocument\n.\nquerySelector\n(\n#increase\n);\n\n\nvar\n \nincrease\n \n=\n \nRx\n.\nObservable\n.\nfromEvent\n(\nincreaseButton\n,\n \nclick\n).\npipe\n(\n\n  \nmap\n(()\n \n=\n \nstate\n \n=\n \nObject\n.\nassign\n({},\n \nstate\n,\n \n{\ncount\n:\n \nstate\n.\ncount\n \n+\n \n1\n}))\n\n\n);\n\n\n\n// We create an object with our initial state. Whenever a new state change function\n\n\n// is received we call it and pass the state. The new state is returned and\n\n\n// ready to be changed again on the next click\n\n\nvar\n \nstate\n \n=\n \nincrease\n.\npipe\n(\n\n  \nscan\n((\nstate\n,\n \nchangeFn\n)\n \n=\n \nchangeFn\n(\nstate\n),\n \n{\ncount\n:\n \n0\n})\n\n\n);\n\n\n\n\n\nWe can now add a couple of more observables which will also change the same state store.\n\n\nvar\n \nincreaseButton\n \n=\n \ndocument\n.\nquerySelector\n(\n#increase\n);\n\n\nvar\n \nincrease\n \n=\n \nRx\n.\nObservable\n.\nfromEvent\n(\nincreaseButton\n,\n \nclick\n).\npipe\n(\n\n  \n// Again we map to a function the will increase the count\n\n  \nmap\n(()\n \n=\n \nstate\n \n=\n \nObject\n.\nassign\n({},\n \nstate\n,\n \n{\ncount\n:\n \nstate\n.\ncount\n \n+\n \n1\n}))\n\n\n);\n\n\n\nvar\n \ndecreaseButton\n \n=\n \ndocument\n.\nquerySelector\n(\n#decrease\n);\n\n\nvar\n \ndecrease\n \n=\n \nRx\n.\nObservable\n.\nfromEvent\n(\ndecreaseButton\n,\n \nclick\n).\npipe\n(\n\n  \n// We also map to a function that will decrease the count\n\n  \nmap\n(()\n \n=\n \nstate\n \n=\n \nObject\n.\nassign\n({},\n \nstate\n,\n \n{\ncount\n:\n \nstate\n.\ncount\n \n-\n \n1\n}))\n\n\n);\n\n\n\nvar\n \ninputElement\n \n=\n \ndocument\n.\nquerySelector\n(\n#input\n);\n\n\nvar\n \ninput\n \n=\n \nRx\n.\nObservable\n.\nfromEvent\n(\ninputElement\n,\n \nkeypress\n).\npipe\n(\n\n  \n// Let us also map the keypress events to produce an inputValue state\n\n  \nmap\n(\nevent\n \n=\n \nstate\n \n=\n \nObject\n.\nassign\n({},\n \nstate\n,\n \n{\ninputValue\n:\n \nevent\n.\ntarget\n.\nvalue\n}))\n\n\n);\n\n\n\n// We merge the three state change producing observables\n\n\nvar\n \nstate\n \n=\n \nRx\n.\nObservable\n.\nmerge\n(\n\n  \nincrease\n,\n\n  \ndecrease\n,\n\n  \ninput\n\n\n).\npipe\n(\n\n  \nscan\n((\nstate\n,\n \nchangeFn\n)\n \n=\n \nchangeFn\n(\nstate\n),\n \n{\n\n    \ncount\n:\n \n0\n,\n\n    \ninputValue\n:\n \n\n  \n})\n\n\n);\n\n\n\n// We subscribe to state changes and update the DOM\n\n\nstate\n.\nsubscribe\n((\nstate\n)\n \n=\n \n{\n\n  \ndocument\n.\nquerySelector\n(\n#count\n).\ninnerHTML\n \n=\n \nstate\n.\ncount\n;\n\n  \ndocument\n.\nquerySelector\n(\n#hello\n).\ninnerHTML\n \n=\n \nHello \n \n+\n \nstate\n.\ninputValue\n;\n\n\n});\n\n\n\n// To optimize our rendering we can check what state\n\n\n// has actually changed\n\n\nvar\n \nprevState\n \n=\n \n{};\n\n\nstate\n.\nsubscribe\n((\nstate\n)\n \n=\n \n{\n\n  \nif\n \n(\nstate\n.\ncount\n \n!==\n \nprevState\n.\ncount\n)\n \n{\n\n    \ndocument\n.\nquerySelector\n(\n#count\n).\ninnerHTML\n \n=\n \nstate\n.\ncount\n;\n\n  \n}\n\n  \nif\n \n(\nstate\n.\ninputValue\n \n!==\n \nprevState\n.\ninputValue\n)\n \n{\n\n    \ndocument\n.\nquerySelector\n(\n#hello\n).\ninnerHTML\n \n=\n \nHello \n \n+\n \nstate\n.\ninputValue\n;\n\n  \n}\n\n  \nprevState\n \n=\n \nstate\n;\n\n\n});\n\n\n\n\n\nWe can take the state store approach and use it with many different frameworks and libraries.\n\n\nImmutable JS\n\n\nYou can also create a global state store for your application using \nImmutable JS\n. Immutable JS is a great way to create immutable state stores that allows you to optimize rendering by doing shallow checks on changed values.\n\n\nimport\n \nImmutable\n \nfrom\n \nimmutable\n;\n\n\nimport\n \nsomeObservable\n \nfrom\n \n./someObservable\n;\n\n\nimport\n \nsomeOtherObservable\n \nfrom\n \n./someOtherObservable\n;\n\n\n\nvar\n \ninitialState\n \n=\n \n{\n\n  \nfoo\n:\n \nbar\n\n\n};\n\n\n\nvar\n \nstate\n \n=\n \nObservable\n.\nmerge\n(\n\n  \nsomeObservable\n,\n\n  \nsomeOtherObservable\n\n\n).\npipe\n(\n\n  \nscan\n((\nstate\n,\n \nchangeFn\n)\n \n=\n \nchangeFn\n(\nstate\n),\n \nImmutable\n.\nfromJS\n(\ninitialState\n))\n\n\n);\n\n\n\nexport\n \ndefault\n \nstate\n;\n\n\n\n\n\nNow you can import your state in whatever UI layer you are using.\n\n\nimport\n \nstate\n \nfrom\n \n./state\n;\n\n\n\nstate\n.\nsubscribe\n(\nstate\n \n=\n \n{\n\n  \ndocument\n.\nquerySelector\n(\n#text\n).\ninnerHTML\n \n=\n \nstate\n.\nget\n(\nfoo\n);\n\n\n});\n\n\n\n\n\nReact\n\n\nLets look at an example where we subscribe to an observable when the component mounts and unsubscribes when it unmounts.\n\n\nimport\n \nmessages\n \nfrom\n \n./someObservable\n;\n\n\n\nclass\n \nMyComponent\n \nextends\n \nObservableComponent\n \n{\n\n  \nconstructor\n(\nprops\n)\n \n{\n\n    \nsuper\n(\nprops\n);\n\n    \nthis\n.\nstate\n \n=\n \n{\nmessages\n:\n \n[]};\n\n  \n}\n\n  \ncomponentDidMount\n()\n \n{\n\n    \nthis\n.\nmessages\n \n=\n \nmessages\n.\npipe\n(\n\n      \n// Accumulate our messages in an array\n\n      \nscan\n((\nmessages\n,\n \nmessage\n)\n \n=\n \n[\nmessage\n].\nconcat\n(\nmessages\n),\n \n[])\n\n    \n)\n\n    \n// And render whenever we get a new message\n\n    \n.\nsubscribe\n(\nmessages\n \n=\n \nthis\n.\nsetState\n({\nmessages\n:\n \nmessages\n}));\n\n  \n}\n\n  \ncomponentWillUnmount\n()\n \n{\n\n    \nthis\n.\nmessages\n.\nunsubscribe\n();\n\n  \n}\n\n  \nrender\n()\n \n{\n\n    \nreturn\n \n(\n\n      \ndiv\n\n        \nul\n\n          \n{\nthis\n.\nstate\n.\nmessages\n.\npipe\n(\nmap\n(\nmessage\n \n=\n \nli\n{\nmessage\n.\ntext\n}\n/li\n))}\n\n        \n/ul\n\n      \n/div\n\n    \n);\n\n  \n}\n\n\n}\n\n\n\nexport\n \ndefault\n \nMyComponent\n;\n\n\n\n\n\nThere are many other ways to use observables with React as well. Take a look at these:\n\n\n\n\nrxjs-react-component\n. It will allow you to expose observables that maps to state changes. Also use observables for lifecycle hooks", 
            "title": "\u5e94\u7528"
        }, 
        {
            "location": "/tutorial/applications/#_1", 
            "text": "RxJS is a great tool to keep your code less error prone. It does that by using pure and stateless functions. But applications are stateful, so how do we bridge the stateless world of RxJS with the stateful world of our applications?  Let us create a simple state store of the value  0 . On each click we want to increase that count in our state store.  var   button   =   document . querySelector ( button );  Rx . Observable . fromEvent ( button ,   click ). pipe ( \n   // scan (reduce) to a stream of counts \n   scan ( count   =   count   +   1 ,   0 ) \n   // Set the count on an element each time it changes  ). subscribe ( count   =   document . querySelector ( #count ). innerHTML   =   count );   So producing state is within the world of RxJS, but changing the DOM is a side effect which happens at \"the end of the line\".", 
            "title": "\u521b\u5efa\u5e94\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/tutorial/applications/#_2", 
            "text": "Applications use state stores to hold state. These are called different things in different frameworks, like store, reducer and model, but at the core they are all just a plain object. What we also need to handle is that multiple observables can update a single state store.  var   increaseButton   =   document . querySelector ( #increase );  var   increase   =   Rx . Observable . fromEvent ( increaseButton ,   click ). pipe ( \n   // We map to a function that will change our state \n   map (()   =   state   =   Object . assign ({},   state ,   { count :   state . count   +   1 }))  );   What we do here is mapping a click event to a state changing function. So instead of mapping to a value, we map to a function. A function will change the state of our state store. So now let us see how we actually make the change.  var   increaseButton   =   document . querySelector ( #increase );  var   increase   =   Rx . Observable . fromEvent ( increaseButton ,   click ). pipe ( \n   map (()   =   state   =   Object . assign ({},   state ,   { count :   state . count   +   1 }))  );  // We create an object with our initial state. Whenever a new state change function  // is received we call it and pass the state. The new state is returned and  // ready to be changed again on the next click  var   state   =   increase . pipe ( \n   scan (( state ,   changeFn )   =   changeFn ( state ),   { count :   0 })  );   We can now add a couple of more observables which will also change the same state store.  var   increaseButton   =   document . querySelector ( #increase );  var   increase   =   Rx . Observable . fromEvent ( increaseButton ,   click ). pipe ( \n   // Again we map to a function the will increase the count \n   map (()   =   state   =   Object . assign ({},   state ,   { count :   state . count   +   1 }))  );  var   decreaseButton   =   document . querySelector ( #decrease );  var   decrease   =   Rx . Observable . fromEvent ( decreaseButton ,   click ). pipe ( \n   // We also map to a function that will decrease the count \n   map (()   =   state   =   Object . assign ({},   state ,   { count :   state . count   -   1 }))  );  var   inputElement   =   document . querySelector ( #input );  var   input   =   Rx . Observable . fromEvent ( inputElement ,   keypress ). pipe ( \n   // Let us also map the keypress events to produce an inputValue state \n   map ( event   =   state   =   Object . assign ({},   state ,   { inputValue :   event . target . value }))  );  // We merge the three state change producing observables  var   state   =   Rx . Observable . merge ( \n   increase , \n   decrease , \n   input  ). pipe ( \n   scan (( state ,   changeFn )   =   changeFn ( state ),   { \n     count :   0 , \n     inputValue :   \n   })  );  // We subscribe to state changes and update the DOM  state . subscribe (( state )   =   { \n   document . querySelector ( #count ). innerHTML   =   state . count ; \n   document . querySelector ( #hello ). innerHTML   =   Hello    +   state . inputValue ;  });  // To optimize our rendering we can check what state  // has actually changed  var   prevState   =   {};  state . subscribe (( state )   =   { \n   if   ( state . count   !==   prevState . count )   { \n     document . querySelector ( #count ). innerHTML   =   state . count ; \n   } \n   if   ( state . inputValue   !==   prevState . inputValue )   { \n     document . querySelector ( #hello ). innerHTML   =   Hello    +   state . inputValue ; \n   } \n   prevState   =   state ;  });   We can take the state store approach and use it with many different frameworks and libraries.", 
            "title": "\u72b6\u6001\u5b58\u50a8"
        }, 
        {
            "location": "/tutorial/applications/#immutable-js", 
            "text": "You can also create a global state store for your application using  Immutable JS . Immutable JS is a great way to create immutable state stores that allows you to optimize rendering by doing shallow checks on changed values.  import   Immutable   from   immutable ;  import   someObservable   from   ./someObservable ;  import   someOtherObservable   from   ./someOtherObservable ;  var   initialState   =   { \n   foo :   bar  };  var   state   =   Observable . merge ( \n   someObservable , \n   someOtherObservable  ). pipe ( \n   scan (( state ,   changeFn )   =   changeFn ( state ),   Immutable . fromJS ( initialState ))  );  export   default   state ;   Now you can import your state in whatever UI layer you are using.  import   state   from   ./state ;  state . subscribe ( state   =   { \n   document . querySelector ( #text ). innerHTML   =   state . get ( foo );  });", 
            "title": "Immutable JS"
        }, 
        {
            "location": "/tutorial/applications/#react", 
            "text": "Lets look at an example where we subscribe to an observable when the component mounts and unsubscribes when it unmounts.  import   messages   from   ./someObservable ;  class   MyComponent   extends   ObservableComponent   { \n   constructor ( props )   { \n     super ( props ); \n     this . state   =   { messages :   []}; \n   } \n   componentDidMount ()   { \n     this . messages   =   messages . pipe ( \n       // Accumulate our messages in an array \n       scan (( messages ,   message )   =   [ message ]. concat ( messages ),   []) \n     ) \n     // And render whenever we get a new message \n     . subscribe ( messages   =   this . setState ({ messages :   messages })); \n   } \n   componentWillUnmount ()   { \n     this . messages . unsubscribe (); \n   } \n   render ()   { \n     return   ( \n       div \n         ul \n           { this . state . messages . pipe ( map ( message   =   li { message . text } /li ))} \n         /ul \n       /div \n     ); \n   }  }  export   default   MyComponent ;   There are many other ways to use observables with React as well. Take a look at these:   rxjs-react-component . It will allow you to expose observables that maps to state changes. Also use observables for lifecycle hooks", 
            "title": "React"
        }, 
        {
            "location": "/observable/", 
            "text": "Observable\n\n\nObservable\u662flazy Push\u591a\u4e2a\u503c\u7684\u96c6\u5408\u3002\n\u4ed6\u4eec\u586b\u8865\u4e86\u4e0b\u8868\u4e2d\u7684\u9057\u6f0f\u70b9\uff1a\n\n\n\n\n\n\n\n\n\n\n\u5355\n\n\n\u591a\n\n\n\n\n\n\n\n\n\n\nPull\n\n\nFunction\n\n\nIterator\n\n\n\n\n\n\nPush\n\n\nPromise\n\n\nObservable\n\n\n\n\n\n\n\n\n\u4f8b.\n \u4ee5\u4e0b\u662f\u5728\u8ba2\u9605\u65f6\u7acb\u5373\uff08\u540c\u6b65\uff09\u63a8\u5165\u503c\n1\n\uff0c\n2\n\uff0c\n3\n\u7684Observable, \u5e76\u4e14\u5728\u8ba2\u9605\u547c\u53eb\u4e4b\u540e\u5df2\u8fc7\u53bb\u4e86\u4e00\u79d2\u949f\u7684\u503c\u201c4\u201d\uff0c\u7136\u540e\u5b8c\u6210:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \n(\nobserver\n)\n \n{\n\n  \nobserver\n.\nnext\n(\n1\n);\n\n  \nobserver\n.\nnext\n(\n2\n);\n\n  \nobserver\n.\nnext\n(\n3\n);\n\n  \nsetTimeout\n(()\n \n=\n \n{\n\n    \nobserver\n.\nnext\n(\n4\n);\n\n    \nobserver\n.\ncomplete\n();\n\n  \n},\n \n1000\n);\n\n\n});\n\n\n\n\n\n\u8c03\u7528Observable\u5e76\u67e5\u770b\u8fd9\u4e9b\u503c, \u6211\u4eec\u9700\u8981\n\u8ba2\u9605\n:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \n(\nobserver\n)\n \n{\n\n  \nobserver\n.\nnext\n(\n1\n);\n\n  \nobserver\n.\nnext\n(\n2\n);\n\n  \nobserver\n.\nnext\n(\n3\n);\n\n  \nsetTimeout\n(()\n \n=\n \n{\n\n    \nobserver\n.\nnext\n(\n4\n);\n\n    \nobserver\n.\ncomplete\n();\n\n  \n},\n \n1000\n);\n\n\n});\n\n\n\nconsole\n.\nlog\n(\n\u5c31\u5728\u8ba2\u9605\u4e4b\u524d\n);\n\n\nobservable\n.\nsubscribe\n({\n\n  \nnext\n:\n \nx\n \n=\n \nconsole\n.\nlog\n(\ngot value \n \n+\n \nx\n),\n\n  \nerror\n:\n \nerr\n \n=\n \nconsole\n.\nerror\n(\nsomething wrong occurred: \n \n+\n \nerr\n),\n\n  \ncomplete\n:\n \n()\n \n=\n \nconsole\n.\nlog\n(\ndone\n),\n\n\n});\n\n\nconsole\n.\nlog\n(\n\u53ea\u662f\u8ba2\u9605\u540e\n);\n\n\n\n\n\n\u5b83\u5728\u63a7\u5236\u53f0\u4e0a\u6267\u884c:\n\n\njust before subscribe\ngot value 1\ngot value 2\ngot value 3\njust after subscribe\ngot value 4\ndone\n\n\n\n\n\u62c9\u4e0e\u63a8\n\n\nPull\n\u548c\nPush\n\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u534f\u8bae\uff0c\u5b83\u4eec\u63cf\u8ff0\u6570\u636e\n\u751f\u4ea7\u8005\n\u5982\u4f55\u4e0e\u6570\u636e\n\u6d88\u8d39\u8005\n\u8fdb\u884c\u901a\u4fe1\u3002\n\n\n\u4ec0\u4e48\u662f\u62c9?\n \u5728Pull\u7cfb\u7edf\u4e2d\uff0c\u6d88\u8d39\u8005\u786e\u5b9a\u4f55\u65f6\u4ece\u6570\u636e\u751f\u4ea7\u8005\u63a5\u6536\u6570\u636e\u3002 \u751f\u4ea7\u8005\u672c\u8eab\u5e76\u4e0d\u77e5\u9053\u6570\u636e\u4f55\u65f6\u4f20\u9012\u7ed9\u6d88\u8d39\u8005\u3002\n\n\n\u6bcf\u4e2aJavaScript\u51fd\u6570\u90fd\u662f\u4e00\u4e2aPull\u7cfb\u7edf\u3002 \u8be5\u51fd\u6570\u662f\u6570\u636e\u7684\u751f\u4ea7\u8005\uff0c\u8c03\u7528\u51fd\u6570\u7684\u4ee3\u7801\u901a\u8fc7\u4ece\u5176\u8c03\u7528\u4e2d\"\u62c9\u51fa\"\n\u5355\u4e2a\n\u8fd4\u56de\u503c\u6765\u6d88\u8017\u5b83\u3002\n\n\nES2015\u5f15\u5165\u4e86\n\u751f\u6210\u5668\u51fd\u6570\u548c\u8fed\u4ee3\u5668\n (\nfunction*\n), \u53e6\u4e00\u79cd\u62c9\u5f0f\u7cfb\u7edf\u3002 \u8c03\u7528\niterator.next()\n\u7684\u4ee3\u7801\u662f\u6d88\u8d39\u8005\uff0c\u4ece\u8fed\u4ee3\u5668\uff08\u751f\u4ea7\u8005\uff09\u4e2d\"\u62c9\u51fa\"\n\u591a\u4e2a\n\u503c\u3002\n\n\n\n\n\n\n\n\n\n\n\u751f\u4ea7\u8005\n\n\n\u6d88\u8d39\u8005\n\n\n\n\n\n\n\n\n\n\nPull\n\n\nPassive:\n \u5728\u8bf7\u6c42\u65f6\u4ea7\u751f\u6570\u636e.\n\n\nActive:\n \u51b3\u5b9a\u4f55\u65f6\u8bf7\u6c42\u6570\u636e.\n\n\n\n\n\n\nPush\n\n\nActive:\n \u4ee5\u81ea\u5df1\u7684\u901f\u5ea6\u751f\u6210\u6570\u636e.\n\n\nPassive:\n \u5bf9\u6536\u5230\u7684\u6570\u636e\u4f5c\u51fa\u53cd\u5e94.\n\n\n\n\n\n\n\n\n\u4ec0\u4e48\u662f\u63a8\u9001\uff1f\n \u5728\u63a8\u9001\u7cfb\u7edf\u4e2d\uff0c\u751f\u4ea7\u8005\u786e\u5b9a\u4f55\u65f6\u5411\u6d88\u8d39\u8005\u53d1\u9001\u6570\u636e\u3002 \u6d88\u8d39\u8005\u4e0d\u77e5\u9053\u5b83\u4f55\u65f6\u4f1a\u6536\u5230\u8be5\u6570\u636e\u3002\n\n\n\u627f\u8bfa\u662f\u5f53\u4ecaJavaScript\u4e2d\u6700\u5e38\u89c1\u7684\u4e00\u79cdPush\u7cfb\u7edf\u3002\n\u627f\u8bfa\uff08\u751f\u4ea7\u8005\uff09\u4e3a\u5df2\u6ce8\u518c\u7684\u56de\u8c03\uff08\u6d88\u8d39\u8005\uff09\u63d0\u4f9b\u5df2\u89e3\u51b3\u7684\u4ef7\u503c\uff0c\u4f46\u4e0e\u51fd\u6570\u4e0d\u540c\u7684\u662f\uff0cPromise\u8d1f\u8d23\u7cbe\u786e\u786e\u5b9a\u4f55\u65f6\u8be5\u503c\u88ab\u201c\u63a8\u9001\u201d\u56de\u8c03\u3002\n\n\nRxJS\u63a8\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684JavaScript\u63a8\u9001\u7cfb\u7edfObservables\u3002\n\u4e00\u4e2a\u53ef\u89c2\u5bdf\u8005\u662f\u591a\u4e2a\u4ef7\u503c\u89c2\u7684\u751f\u4ea7\u8005\uff0c\u5c06\u4ed6\u4eec\u63a8\u7ed9\u89c2\u5bdf\u8005\uff08\u6d88\u8d39\u8005\uff09\u3002\n\n\n\n\n\u51fd\u6570\n\u662f\u4e00\u4e2a\u61d2\u60f0\u8bc4\u4f30\u7684\u8ba1\u7b97\uff0c\u5728\u8c03\u7528\u65f6\u540c\u6b65\u8fd4\u56de\u4e00\u4e2a\u503c\u3002\n\n\n\u751f\u6210\u5668\n\u662f\u4e00\u79cd\u61d2\u60f0\u8bc4\u4f30\u7684\u8ba1\u7b97\uff0c\u5b83\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u540c\u6b65\u5730\u5c06\u96f6\uff08\u53ef\u80fd\uff09\u65e0\u9650\u5927\u7684\u503c\u8fd4\u56de\u3002\n\n\n\u8bfa\u8a00\n\u662f\u4e00\u79cd\u53ef\u80fd\uff08\u6216\u53ef\u80fd\u4e0d\uff09\u6700\u7ec8\u8fd4\u56de\u5355\u4e2a\u503c\u7684\u8ba1\u7b97\u3002\n\n\nObservable\n\u662f\u4e00\u79cd\u61d2\u60f0\u8bc4\u4f30\u7684\u8ba1\u7b97\uff0c\u5b83\u53ef\u4ee5\u540c\u6b65\u5730\u6216\u5f02\u6b65\u5730\u5c06\u96f6\u4ece\u5b83\u88ab\u8c03\u7528\u7684\u65f6\u523b\uff08\u53ef\u80fd\uff09\u65e0\u9650\u503c\u5730\u8fd4\u56de\u3002\n\n\n\n\n\u89c2\u5bdf\u5458\u4e00\u822c\u5316\n\n\n\u4e0e\u6d41\u884c\u7684\u8bf4\u6cd5\u76f8\u53cd\uff0cObservables\u4e0d\u50cfEventEmitters\uff0c\u4e5f\u4e0d\u50cfPromises for multiple values\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u89c2\u5bdf\u5bf9\u8c61\u53ef\u80fd\u50cf\u4e8b\u4ef6\u53d1\u9001\u8005\u4e00\u6837\u884c\u4e8b\uff0c\u5373\u5f53\u4ed6\u4eec\u4f7f\u7528RxJS\u4e3b\u9898\u8fdb\u884c\u591a\u64ad\u65f6\uff0c\u4f46\u901a\u5e38\u5b83\u4eec\u4e0d\u50cf\u4e8b\u4ef6\u53d1\u9001\u8005\u90a3\u6837\u884c\u4e8b\u3002\n\n\nObservable\u5c31\u50cf\u51fd\u6570\u96f6\u53c2\u6570\u4e00\u6837\uff0c\u4f46\u5c06\u5b83\u4eec\u6982\u62ec\u4e3a\u5141\u8bb8\u591a\u4e2a\u503c\u3002\n\n\n\u8003\u8651\u4ee5\u4e0b:\n\n\nfunction\n \nfoo\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nHello\n);\n\n  \nreturn\n \n42\n;\n\n\n}\n\n\n\nvar\n \nx\n \n=\n \nfoo\n.\ncall\n();\n \n// same as foo()\n\n\nconsole\n.\nlog\n(\nx\n);\n\n\nvar\n \ny\n \n=\n \nfoo\n.\ncall\n();\n \n// same as foo()\n\n\nconsole\n.\nlog\n(\ny\n);\n\n\n\n\n\n\u6211\u4eec\u671f\u671b\u770b\u5230\u6210\u679c:\n\n\nHello\n\n42\n\nHello\n\n42\n\n\n\n\n\u4f60\u53ef\u4ee5\u5728\u4e0a\u9762\u5199\u540c\u6837\u7684\u884c\u4e3a\uff0c\u4f46\u662f\u4f7f\u7528Observables:\n\n\nvar\n \nfoo\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \n(\nobserver\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nHello\n);\n\n  \nobserver\n.\nnext\n(\n42\n);\n\n\n});\n\n\n\nfoo\n.\nsubscribe\n(\nfunction\n \n(\nx\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nx\n);\n\n\n});\n\n\nfoo\n.\nsubscribe\n(\nfunction\n \n(\ny\n)\n \n{\n\n  \nconsole\n.\nlog\n(\ny\n);\n\n\n});\n\n\n\n\n\n\u8f93\u51fa\u662f\u4e00\u6837\u7684:\n\n\nHello\n\n42\n\nHello\n\n42\n\n\n\n\n\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u662f\u56e0\u4e3a\u51fd\u6570\u548cObservables\u90fd\u662f\u61d2\u8ba1\u7b97\u3002 \u5982\u679c\u4f60\u4e0d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\nconsole.log\uff08'Hello'\uff09\n\u4e0d\u4f1a\u53d1\u751f\u3002 \u53e6\u5916\u5bf9\u4e8eObservable\uff0c\u5982\u679c\u4f60\u4e0d\u201c\u53eb\u201d\u5b83\uff08\u5e26\nsubscribe\n\uff09\uff0c\nconsole.log\uff08'Hello'\uff09\n\u4e0d\u4f1a\u53d1\u751f\u3002,\u53e6\u5916\uff0c\u201c\u8c03\u7528\u201d\u6216\u201c\u8ba2\u9605\u201d\u662f\u4e00\u4e2a\u5b64\u7acb\u7684\u64cd\u4f5c\uff1a\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u89e6\u53d1\u4e24\u4e2a\u5355\u72ec\u7684\u526f\u4f5c\u7528\uff0c\u4e24\u4e2aObservable\u8ba2\u9605\u89e6\u53d1\u4e24\u4e2a\u5355\u72ec\u7684\u526f\u4f5c\u7528\u3002 \u4e0eEventEmitters\u4e0d\u540c\uff0c\u5b83\u4eec\u5171\u4eab\u526f\u4f5c\u7528\uff0c\u5e76\u4e14\u65e0\u8bba\u8ba2\u9605\u8005\u662f\u5426\u5b58\u5728\u90fd\u6709\u70ed\u5207\u7684\u6267\u884c\uff0cObserbles\u6ca1\u6709\u5171\u4eab\u6267\u884c\u5e76\u4e14\u662f\u61d2\u60f0\u7684\u3002\n\n\n\u8ba2\u9605Observable\u7c7b\u4f3c\u4e8e\u8c03\u7528Function\u3002\n\n\n\u6709\u4e9b\u4eba\u58f0\u79f0Observable\u662f\u5f02\u6b65\u7684\u3002 \u90a3\u662f\u4e0d\u6b63\u786e\u7684\u3002 \u5982\u679c\u60a8\u4f7f\u7528\u65e5\u5fd7\u73af\u7ed5\u51fd\u6570\u8c03\u7528\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n\n\n\n\nconsole\n.\nlog\n(\nbefore\n);\n\n\nconsole\n.\nlog\n(\nfoo\n.\ncall\n());\n\n\nconsole\n.\nlog\n(\nafter\n);\n\n\n\n\n\n\u4f60\u4f1a\u770b\u5230\u8f93\u51fa\uff1a\n\n\nbefore\n\n\nHello\n\n42\n\nafter\n\n\n\n\n\n\u8fd9\u4e0eObservables\u4e00\u6837\n\n\n\n\n\nconsole\n.\nlog\n(\nbefore\n);\n\n\nfoo\n.\nsubscribe\n(\nfunction\n \n(\nx\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nx\n);\n\n\n});\n\n\nconsole\n.\nlog\n(\nafter\n);\n\n\n\n\n\n\u8f93\u51fa\u662f\uff1a\n\n\nbefore\n\n\nHello\n\n42\n\nafter\n\n\n\n\n\n\u8bc1\u660e\nfoo\n\u7684\u8ba2\u9605\u662f\u5b8c\u5168\u540c\u6b65\u7684\uff0c\u5c31\u50cf\u4e00\u4e2a\u51fd\u6570\u3002\n\n\nObservable\u80fd\u591f\u540c\u6b65\u6216\u5f02\u6b65\u4f20\u9012\u503c\u3002\n\n\nObservable\u548c\u51fd\u6570\u4e4b\u95f4\u6709\u4ec0\u4e48\u533a\u522b\uff1f \n\u89c2\u5bdf\u5bf9\u8c61\u53ef\u4ee5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u201c\u8fd4\u56de\u201d\u591a\u4e2a\u503c\n, \u67d0\u4e9b\u529f\u80fd\u4e0d\u80fd. \u4f60\u4e0d\u80fd\u8fd9\u6837\u505a:\n\n\nfunction\n \nfoo\n()\n \n{\n\n  \nconsole\n.\nlog\n(\nHello\n);\n\n  \nreturn\n \n42\n;\n\n  \nreturn\n \n100\n;\n \n// dead code. will never happen\n\n\n}\n\n\n\n\n\n\u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u503c\u3002,\u7136\u800c\uff0c\u53ef\u89c2\u6d4b\u7269\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9:\n\n\nvar\n \nfoo\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \n(\nobserver\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nHello\n);\n\n  \nobserver\n.\nnext\n(\n42\n);\n\n  \nobserver\n.\nnext\n(\n100\n);\n \n// \nreturn\n another value\n\n  \nobserver\n.\nnext\n(\n200\n);\n \n// \nreturn\n yet another\n\n\n});\n\n\n\nconsole\n.\nlog\n(\nbefore\n);\n\n\nfoo\n.\nsubscribe\n(\nfunction\n \n(\nx\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nx\n);\n\n\n});\n\n\nconsole\n.\nlog\n(\nafter\n);\n\n\n\n\n\n\u4e0e\u540c\u6b65\u8f93\u51fa:\n\n\nbefore\n\n\nHello\n\n42\n100\n200\n\nafter\n\n\n\n\n\n\u4f46\u4f60\u4e5f\u53ef\u4ee5\u5f02\u6b65\u201c\u8fd4\u56de\u201d\u503c:\n\n\nvar\n \nfoo\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \n(\nobserver\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nHello\n);\n\n  \nobserver\n.\nnext\n(\n42\n);\n\n  \nobserver\n.\nnext\n(\n100\n);\n\n  \nobserver\n.\nnext\n(\n200\n);\n\n  \nsetTimeout\n(()\n \n=\n \n{\n\n    \nobserver\n.\nnext\n(\n300\n);\n \n// happens asynchronously\n\n  \n},\n \n1000\n);\n\n\n});\n\n\n\nconsole\n.\nlog\n(\nbefore\n);\n\n\nfoo\n.\nsubscribe\n(\nfunction\n \n(\nx\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nx\n);\n\n\n});\n\n\nconsole\n.\nlog\n(\nafter\n);\n\n\n\n\n\nWith output:\n\n\nbefore\n\n\nHello\n\n42\n100\n200\n\nafter\n\n300\n\n\n\n\n\u7ed3\u8bba:\n\n\n\n\nfunc.call()\n means \"\ngive me one value synchronously\n\"\n\n\nobservable.subscribe()\n means \"\ngive me any amount of values, either synchronously or asynchronously\n\"\n\n\n\n\n\u4e00\u4e2aObservabl\u7684\u89e3\u5256\n\n\nObservables are \ncreated\n using \nRx.Observable.create\n or a creation operator, are \nsubscribed\n to with an Observer, \nexecute\n to deliver \nnext\n / \nerror\n / \ncomplete\n notifications to the Observer, and their execution may be \ndisposed\n. These four aspects are all encoded in an Observable instance, but some of these aspects are related to other types, like Observer and Subscription.\n\n\nCore Observable concerns:\n- \nCreating\n Observables\n- \nSubscribing\n to Observables\n- \nExecuting\n the Observable\n- \nDisposing\n Observables\n\n\n\u521b\u5efa\u89c2\u5bdf\u70b9\n\n\nRx.Observable.create\n is an alias for the \nObservable\n constructor, and it takes one argument: the \nsubscribe\n function.\n\n\nThe following example creates an Observable to emit the string \n'hi'\n every second to an Observer.\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \nsubscribe\n(\nobserver\n)\n \n{\n\n  \nvar\n \nid\n \n=\n \nsetInterval\n(()\n \n=\n \n{\n\n    \nobserver\n.\nnext\n(\nhi\n)\n\n  \n},\n \n1000\n);\n\n\n});\n\n\n\n\n\nObservables can be created with \ncreate\n, but usually we use the so-called \ncreation operators\n, like \nof\n, \nfrom\n, \ninterval\n, etc.\n\n\nIn the example above, the \nsubscribe\n function is the most important piece to describe the Observable. Let's look at what subscribing means.\n\n\n\u8ba2\u9605\u89c2\u5bdf\u8005\n\n\nThe Observable \nobservable\n in the example can be \nsubscribed\n to, like this:\n\n\n\n\n\nobservable\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n));\n\n\n\n\n\nIt is not a coincidence that \nobservable.subscribe\n and \nsubscribe\n in \nObservable.create(function subscribe(observer) {...})\n have the same name. In the library, they are different, but for practical purposes you can consider them conceptually equal.\n\n\nThis shows how \nsubscribe\n calls are not shared among multiple Observers of the same Observable. When calling \nobservable.subscribe\n with an Observer, the function \nsubscribe\n in \nObservable.create(function subscribe(observer) {...})\n is run for that given Observer. Each call to \nobservable.subscribe\n triggers its own independent setup for that given Observer.\n\n\nSubscribing to an Observable is like calling a function, providing callbacks where the data will be delivered to.\n\n\nThis is drastically different to event handler APIs like \naddEventListener\n / \nremoveEventListener\n. With \nobservable.subscribe\n, the given Observer is not registered as a listener in the Observable. The Observable does not even maintain a list of attached Observers.\n\n\nA \nsubscribe\n call is simply a way to start an \"Observable execution\" and deliver values or events to an Observer of that execution.\n\n\n\u6267\u884c\u89c2\u5bdf\n\n\nThe code inside \nObservable.create(function subscribe(observer) {...})\n represents an \"Observable execution\", a lazy computation that only happens for each Observer that subscribes. The execution produces multiple values over time, either synchronously or asynchronously.\n\n\nThere are three types of values an Observable Execution can deliver:\n\n\n\n\n\"Next\" notification: sends a value such as a Number, a String, an Object, etc.\n\n\n\"Error\" notification: sends a JavaScript Error or exception.\n\n\n\"Complete\" notification: does not send a value.\n\n\n\n\nNext notifications are the most important and most common type: they represent actual data being delivered to an Observer. Error and Complete notifications may happen only once during the Observable Execution, and there can only be either one of them.\n\n\nThese constraints are expressed best in the so-called \nObservable Grammar\n or \nContract\n, written as a regular expression:\n\n\nnext*(error|complete)?\n\n\n\n\nIn an Observable Execution, zero to infinite Next notifications may be delivered. If either an Error or Complete notification is delivered, then nothing else can be delivered afterwards.\n\n\nThe following is an example of an Observable execution that delivers three Next notifications, then completes:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \nsubscribe\n(\nobserver\n)\n \n{\n\n  \nobserver\n.\nnext\n(\n1\n);\n\n  \nobserver\n.\nnext\n(\n2\n);\n\n  \nobserver\n.\nnext\n(\n3\n);\n\n  \nobserver\n.\ncomplete\n();\n\n\n});\n\n\n\n\n\nObservables strictly adhere to the Observable Contract, so the following code would not deliver the Next notification \n4\n:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \nsubscribe\n(\nobserver\n)\n \n{\n\n  \nobserver\n.\nnext\n(\n1\n);\n\n  \nobserver\n.\nnext\n(\n2\n);\n\n  \nobserver\n.\nnext\n(\n3\n);\n\n  \nobserver\n.\ncomplete\n();\n\n  \nobserver\n.\nnext\n(\n4\n);\n \n// Is not delivered because it would violate the contract\n\n\n});\n\n\n\n\n\nIt is a good idea to wrap any code in \nsubscribe\n with \ntry\n/\ncatch\n block that will deliver an Error notification if it catches an exception:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \nsubscribe\n(\nobserver\n)\n \n{\n\n  \ntry\n \n{\n\n    \nobserver\n.\nnext\n(\n1\n);\n\n    \nobserver\n.\nnext\n(\n2\n);\n\n    \nobserver\n.\nnext\n(\n3\n);\n\n    \nobserver\n.\ncomplete\n();\n\n  \n}\n \ncatch\n \n(\nerr\n)\n \n{\n\n    \nobserver\n.\nerror\n(\nerr\n);\n \n// delivers an error if it caught one\n\n  \n}\n\n\n});\n\n\n\n\n\n\u5904\u7406\u53ef\u89c2\u5bdf\u7684\u6267\u884c\n\n\nBecause Observable Executions may be infinite, and it's common for an Observer to want to abort execution in finite time, we need an API for canceling an execution. Since each execution is exclusive to one Observer only, once the Observer is done receiving values, it has to have a way to stop the execution, in order to avoid wasting computation power or memory resources.\n\n\nWhen \nobservable.subscribe\n is called, the Observer gets attached to the newly created Observable execution. This call also returns an object, the \nSubscription\n:\n\n\n\n\n\nvar\n \nsubscription\n \n=\n \nobservable\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n));\n\n\n\n\n\nThe Subscription represents the ongoing execution, and has a minimal API which allows you to cancel that execution. Read more about the \nSubscription\n type here\n. With \nsubscription.unsubscribe()\n you can cancel the ongoing execution:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\nfrom\n([\n10\n,\n \n20\n,\n \n30\n]);\n\n\nvar\n \nsubscription\n \n=\n \nobservable\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n));\n\n\n// Later:\n\n\nsubscription\n.\nunsubscribe\n();\n\n\n\n\n\nWhen you subscribe, you get back a Subscription, which represents the ongoing execution. Just call \nunsubscribe()\n to cancel the execution.\n\n\nEach Observable must define how to dispose resources of that execution when we create the Observable using \ncreate()\n. You can do that by returning a custom \nunsubscribe\n function from within \nfunction subscribe()\n.\n\n\nFor instance, this is how we clear an interval execution set with \nsetInterval\n:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \nsubscribe\n(\nobserver\n)\n \n{\n\n  \n// Keep track of the interval resource\n\n  \nvar\n \nintervalID\n \n=\n \nsetInterval\n(()\n \n=\n \n{\n\n    \nobserver\n.\nnext\n(\nhi\n);\n\n  \n},\n \n1000\n);\n\n\n  \n// Provide a way of canceling and disposing the interval resource\n\n  \nreturn\n \nfunction\n \nunsubscribe\n()\n \n{\n\n    \nclearInterval\n(\nintervalID\n);\n\n  \n};\n\n\n});\n\n\n\n\n\nJust like \nobservable.subscribe\n resembles \nObservable.create(function subscribe() {...})\n, the \nunsubscribe\n we return from \nsubscribe\n is conceptually equal to \nsubscription.unsubscribe\n. In fact, if we remove the ReactiveX types surrounding these concepts, we're left with rather straightforward JavaScript.\n\n\nfunction\n \nsubscribe\n(\nobserver\n)\n \n{\n\n  \nvar\n \nintervalID\n \n=\n \nsetInterval\n(()\n \n=\n \n{\n\n    \nobserver\n.\nnext\n(\nhi\n);\n\n  \n},\n \n1000\n);\n\n\n  \nreturn\n \nfunction\n \nunsubscribe\n()\n \n{\n\n    \nclearInterval\n(\nintervalID\n);\n\n  \n};\n\n\n}\n\n\n\nvar\n \nunsubscribe\n \n=\n \nsubscribe\n({\nnext\n:\n \n(\nx\n)\n \n=\n \nconsole\n.\nlog\n(\nx\n)});\n\n\n\n// Later:\n\n\nunsubscribe\n();\n \n// dispose the resources\n\n\n\n\n\nThe reason why we use Rx types like Observable, Observer, and Subscription is to get safety (such as the Observable Contract) and composability with Operators.", 
            "title": "Observable(\u89c2\u5bdf\u70b9)"
        }, 
        {
            "location": "/observable/#observable", 
            "text": "Observable\u662flazy Push\u591a\u4e2a\u503c\u7684\u96c6\u5408\u3002\n\u4ed6\u4eec\u586b\u8865\u4e86\u4e0b\u8868\u4e2d\u7684\u9057\u6f0f\u70b9\uff1a      \u5355  \u591a      Pull  Function  Iterator    Push  Promise  Observable     \u4f8b.  \u4ee5\u4e0b\u662f\u5728\u8ba2\u9605\u65f6\u7acb\u5373\uff08\u540c\u6b65\uff09\u63a8\u5165\u503c 1 \uff0c 2 \uff0c 3 \u7684Observable, \u5e76\u4e14\u5728\u8ba2\u9605\u547c\u53eb\u4e4b\u540e\u5df2\u8fc7\u53bb\u4e86\u4e00\u79d2\u949f\u7684\u503c\u201c4\u201d\uff0c\u7136\u540e\u5b8c\u6210:  var   observable   =   Rx . Observable . create ( function   ( observer )   { \n   observer . next ( 1 ); \n   observer . next ( 2 ); \n   observer . next ( 3 ); \n   setTimeout (()   =   { \n     observer . next ( 4 ); \n     observer . complete (); \n   },   1000 );  });   \u8c03\u7528Observable\u5e76\u67e5\u770b\u8fd9\u4e9b\u503c, \u6211\u4eec\u9700\u8981 \u8ba2\u9605 :  var   observable   =   Rx . Observable . create ( function   ( observer )   { \n   observer . next ( 1 ); \n   observer . next ( 2 ); \n   observer . next ( 3 ); \n   setTimeout (()   =   { \n     observer . next ( 4 ); \n     observer . complete (); \n   },   1000 );  });  console . log ( \u5c31\u5728\u8ba2\u9605\u4e4b\u524d );  observable . subscribe ({ \n   next :   x   =   console . log ( got value    +   x ), \n   error :   err   =   console . error ( something wrong occurred:    +   err ), \n   complete :   ()   =   console . log ( done ),  });  console . log ( \u53ea\u662f\u8ba2\u9605\u540e );   \u5b83\u5728\u63a7\u5236\u53f0\u4e0a\u6267\u884c:  just before subscribe\ngot value 1\ngot value 2\ngot value 3\njust after subscribe\ngot value 4\ndone", 
            "title": "Observable"
        }, 
        {
            "location": "/observable/#_1", 
            "text": "Pull \u548c Push \u662f\u4e24\u79cd\u4e0d\u540c\u7684\u534f\u8bae\uff0c\u5b83\u4eec\u63cf\u8ff0\u6570\u636e \u751f\u4ea7\u8005 \u5982\u4f55\u4e0e\u6570\u636e \u6d88\u8d39\u8005 \u8fdb\u884c\u901a\u4fe1\u3002  \u4ec0\u4e48\u662f\u62c9?  \u5728Pull\u7cfb\u7edf\u4e2d\uff0c\u6d88\u8d39\u8005\u786e\u5b9a\u4f55\u65f6\u4ece\u6570\u636e\u751f\u4ea7\u8005\u63a5\u6536\u6570\u636e\u3002 \u751f\u4ea7\u8005\u672c\u8eab\u5e76\u4e0d\u77e5\u9053\u6570\u636e\u4f55\u65f6\u4f20\u9012\u7ed9\u6d88\u8d39\u8005\u3002  \u6bcf\u4e2aJavaScript\u51fd\u6570\u90fd\u662f\u4e00\u4e2aPull\u7cfb\u7edf\u3002 \u8be5\u51fd\u6570\u662f\u6570\u636e\u7684\u751f\u4ea7\u8005\uff0c\u8c03\u7528\u51fd\u6570\u7684\u4ee3\u7801\u901a\u8fc7\u4ece\u5176\u8c03\u7528\u4e2d\"\u62c9\u51fa\" \u5355\u4e2a \u8fd4\u56de\u503c\u6765\u6d88\u8017\u5b83\u3002  ES2015\u5f15\u5165\u4e86 \u751f\u6210\u5668\u51fd\u6570\u548c\u8fed\u4ee3\u5668  ( function* ), \u53e6\u4e00\u79cd\u62c9\u5f0f\u7cfb\u7edf\u3002 \u8c03\u7528 iterator.next() \u7684\u4ee3\u7801\u662f\u6d88\u8d39\u8005\uff0c\u4ece\u8fed\u4ee3\u5668\uff08\u751f\u4ea7\u8005\uff09\u4e2d\"\u62c9\u51fa\" \u591a\u4e2a \u503c\u3002      \u751f\u4ea7\u8005  \u6d88\u8d39\u8005      Pull  Passive:  \u5728\u8bf7\u6c42\u65f6\u4ea7\u751f\u6570\u636e.  Active:  \u51b3\u5b9a\u4f55\u65f6\u8bf7\u6c42\u6570\u636e.    Push  Active:  \u4ee5\u81ea\u5df1\u7684\u901f\u5ea6\u751f\u6210\u6570\u636e.  Passive:  \u5bf9\u6536\u5230\u7684\u6570\u636e\u4f5c\u51fa\u53cd\u5e94.     \u4ec0\u4e48\u662f\u63a8\u9001\uff1f  \u5728\u63a8\u9001\u7cfb\u7edf\u4e2d\uff0c\u751f\u4ea7\u8005\u786e\u5b9a\u4f55\u65f6\u5411\u6d88\u8d39\u8005\u53d1\u9001\u6570\u636e\u3002 \u6d88\u8d39\u8005\u4e0d\u77e5\u9053\u5b83\u4f55\u65f6\u4f1a\u6536\u5230\u8be5\u6570\u636e\u3002  \u627f\u8bfa\u662f\u5f53\u4ecaJavaScript\u4e2d\u6700\u5e38\u89c1\u7684\u4e00\u79cdPush\u7cfb\u7edf\u3002\n\u627f\u8bfa\uff08\u751f\u4ea7\u8005\uff09\u4e3a\u5df2\u6ce8\u518c\u7684\u56de\u8c03\uff08\u6d88\u8d39\u8005\uff09\u63d0\u4f9b\u5df2\u89e3\u51b3\u7684\u4ef7\u503c\uff0c\u4f46\u4e0e\u51fd\u6570\u4e0d\u540c\u7684\u662f\uff0cPromise\u8d1f\u8d23\u7cbe\u786e\u786e\u5b9a\u4f55\u65f6\u8be5\u503c\u88ab\u201c\u63a8\u9001\u201d\u56de\u8c03\u3002  RxJS\u63a8\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684JavaScript\u63a8\u9001\u7cfb\u7edfObservables\u3002\n\u4e00\u4e2a\u53ef\u89c2\u5bdf\u8005\u662f\u591a\u4e2a\u4ef7\u503c\u89c2\u7684\u751f\u4ea7\u8005\uff0c\u5c06\u4ed6\u4eec\u63a8\u7ed9\u89c2\u5bdf\u8005\uff08\u6d88\u8d39\u8005\uff09\u3002   \u51fd\u6570 \u662f\u4e00\u4e2a\u61d2\u60f0\u8bc4\u4f30\u7684\u8ba1\u7b97\uff0c\u5728\u8c03\u7528\u65f6\u540c\u6b65\u8fd4\u56de\u4e00\u4e2a\u503c\u3002  \u751f\u6210\u5668 \u662f\u4e00\u79cd\u61d2\u60f0\u8bc4\u4f30\u7684\u8ba1\u7b97\uff0c\u5b83\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u540c\u6b65\u5730\u5c06\u96f6\uff08\u53ef\u80fd\uff09\u65e0\u9650\u5927\u7684\u503c\u8fd4\u56de\u3002  \u8bfa\u8a00 \u662f\u4e00\u79cd\u53ef\u80fd\uff08\u6216\u53ef\u80fd\u4e0d\uff09\u6700\u7ec8\u8fd4\u56de\u5355\u4e2a\u503c\u7684\u8ba1\u7b97\u3002  Observable \u662f\u4e00\u79cd\u61d2\u60f0\u8bc4\u4f30\u7684\u8ba1\u7b97\uff0c\u5b83\u53ef\u4ee5\u540c\u6b65\u5730\u6216\u5f02\u6b65\u5730\u5c06\u96f6\u4ece\u5b83\u88ab\u8c03\u7528\u7684\u65f6\u523b\uff08\u53ef\u80fd\uff09\u65e0\u9650\u503c\u5730\u8fd4\u56de\u3002", 
            "title": "\u62c9\u4e0e\u63a8"
        }, 
        {
            "location": "/observable/#_2", 
            "text": "\u4e0e\u6d41\u884c\u7684\u8bf4\u6cd5\u76f8\u53cd\uff0cObservables\u4e0d\u50cfEventEmitters\uff0c\u4e5f\u4e0d\u50cfPromises for multiple values\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u89c2\u5bdf\u5bf9\u8c61\u53ef\u80fd\u50cf\u4e8b\u4ef6\u53d1\u9001\u8005\u4e00\u6837\u884c\u4e8b\uff0c\u5373\u5f53\u4ed6\u4eec\u4f7f\u7528RxJS\u4e3b\u9898\u8fdb\u884c\u591a\u64ad\u65f6\uff0c\u4f46\u901a\u5e38\u5b83\u4eec\u4e0d\u50cf\u4e8b\u4ef6\u53d1\u9001\u8005\u90a3\u6837\u884c\u4e8b\u3002  Observable\u5c31\u50cf\u51fd\u6570\u96f6\u53c2\u6570\u4e00\u6837\uff0c\u4f46\u5c06\u5b83\u4eec\u6982\u62ec\u4e3a\u5141\u8bb8\u591a\u4e2a\u503c\u3002  \u8003\u8651\u4ee5\u4e0b:  function   foo ()   { \n   console . log ( Hello ); \n   return   42 ;  }  var   x   =   foo . call ();   // same as foo()  console . log ( x );  var   y   =   foo . call ();   // same as foo()  console . log ( y );   \u6211\u4eec\u671f\u671b\u770b\u5230\u6210\u679c:  Hello \n42 Hello \n42  \u4f60\u53ef\u4ee5\u5728\u4e0a\u9762\u5199\u540c\u6837\u7684\u884c\u4e3a\uff0c\u4f46\u662f\u4f7f\u7528Observables:  var   foo   =   Rx . Observable . create ( function   ( observer )   { \n   console . log ( Hello ); \n   observer . next ( 42 );  });  foo . subscribe ( function   ( x )   { \n   console . log ( x );  });  foo . subscribe ( function   ( y )   { \n   console . log ( y );  });   \u8f93\u51fa\u662f\u4e00\u6837\u7684:  Hello \n42 Hello \n42  \u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u662f\u56e0\u4e3a\u51fd\u6570\u548cObservables\u90fd\u662f\u61d2\u8ba1\u7b97\u3002 \u5982\u679c\u4f60\u4e0d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c console.log\uff08'Hello'\uff09 \u4e0d\u4f1a\u53d1\u751f\u3002 \u53e6\u5916\u5bf9\u4e8eObservable\uff0c\u5982\u679c\u4f60\u4e0d\u201c\u53eb\u201d\u5b83\uff08\u5e26 subscribe \uff09\uff0c console.log\uff08'Hello'\uff09 \u4e0d\u4f1a\u53d1\u751f\u3002,\u53e6\u5916\uff0c\u201c\u8c03\u7528\u201d\u6216\u201c\u8ba2\u9605\u201d\u662f\u4e00\u4e2a\u5b64\u7acb\u7684\u64cd\u4f5c\uff1a\u4e24\u4e2a\u51fd\u6570\u8c03\u7528\u89e6\u53d1\u4e24\u4e2a\u5355\u72ec\u7684\u526f\u4f5c\u7528\uff0c\u4e24\u4e2aObservable\u8ba2\u9605\u89e6\u53d1\u4e24\u4e2a\u5355\u72ec\u7684\u526f\u4f5c\u7528\u3002 \u4e0eEventEmitters\u4e0d\u540c\uff0c\u5b83\u4eec\u5171\u4eab\u526f\u4f5c\u7528\uff0c\u5e76\u4e14\u65e0\u8bba\u8ba2\u9605\u8005\u662f\u5426\u5b58\u5728\u90fd\u6709\u70ed\u5207\u7684\u6267\u884c\uff0cObserbles\u6ca1\u6709\u5171\u4eab\u6267\u884c\u5e76\u4e14\u662f\u61d2\u60f0\u7684\u3002  \u8ba2\u9605Observable\u7c7b\u4f3c\u4e8e\u8c03\u7528Function\u3002  \u6709\u4e9b\u4eba\u58f0\u79f0Observable\u662f\u5f02\u6b65\u7684\u3002 \u90a3\u662f\u4e0d\u6b63\u786e\u7684\u3002 \u5982\u679c\u60a8\u4f7f\u7528\u65e5\u5fd7\u73af\u7ed5\u51fd\u6570\u8c03\u7528\uff0c\u5982\u4e0b\u6240\u793a\uff1a   console . log ( before );  console . log ( foo . call ());  console . log ( after );   \u4f60\u4f1a\u770b\u5230\u8f93\u51fa\uff1a  before  Hello \n42 after   \u8fd9\u4e0eObservables\u4e00\u6837   console . log ( before );  foo . subscribe ( function   ( x )   { \n   console . log ( x );  });  console . log ( after );   \u8f93\u51fa\u662f\uff1a  before  Hello \n42 after   \u8bc1\u660e foo \u7684\u8ba2\u9605\u662f\u5b8c\u5168\u540c\u6b65\u7684\uff0c\u5c31\u50cf\u4e00\u4e2a\u51fd\u6570\u3002  Observable\u80fd\u591f\u540c\u6b65\u6216\u5f02\u6b65\u4f20\u9012\u503c\u3002  Observable\u548c\u51fd\u6570\u4e4b\u95f4\u6709\u4ec0\u4e48\u533a\u522b\uff1f  \u89c2\u5bdf\u5bf9\u8c61\u53ef\u4ee5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u201c\u8fd4\u56de\u201d\u591a\u4e2a\u503c , \u67d0\u4e9b\u529f\u80fd\u4e0d\u80fd. \u4f60\u4e0d\u80fd\u8fd9\u6837\u505a:  function   foo ()   { \n   console . log ( Hello ); \n   return   42 ; \n   return   100 ;   // dead code. will never happen  }   \u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u503c\u3002,\u7136\u800c\uff0c\u53ef\u89c2\u6d4b\u7269\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9:  var   foo   =   Rx . Observable . create ( function   ( observer )   { \n   console . log ( Hello ); \n   observer . next ( 42 ); \n   observer . next ( 100 );   //  return  another value \n   observer . next ( 200 );   //  return  yet another  });  console . log ( before );  foo . subscribe ( function   ( x )   { \n   console . log ( x );  });  console . log ( after );   \u4e0e\u540c\u6b65\u8f93\u51fa:  before  Hello \n42\n100\n200 after   \u4f46\u4f60\u4e5f\u53ef\u4ee5\u5f02\u6b65\u201c\u8fd4\u56de\u201d\u503c:  var   foo   =   Rx . Observable . create ( function   ( observer )   { \n   console . log ( Hello ); \n   observer . next ( 42 ); \n   observer . next ( 100 ); \n   observer . next ( 200 ); \n   setTimeout (()   =   { \n     observer . next ( 300 );   // happens asynchronously \n   },   1000 );  });  console . log ( before );  foo . subscribe ( function   ( x )   { \n   console . log ( x );  });  console . log ( after );   With output:  before  Hello \n42\n100\n200 after \n300  \u7ed3\u8bba:   func.call()  means \" give me one value synchronously \"  observable.subscribe()  means \" give me any amount of values, either synchronously or asynchronously \"", 
            "title": "\u89c2\u5bdf\u5458\u4e00\u822c\u5316"
        }, 
        {
            "location": "/observable/#observabl", 
            "text": "Observables are  created  using  Rx.Observable.create  or a creation operator, are  subscribed  to with an Observer,  execute  to deliver  next  /  error  /  complete  notifications to the Observer, and their execution may be  disposed . These four aspects are all encoded in an Observable instance, but some of these aspects are related to other types, like Observer and Subscription.  Core Observable concerns:\n-  Creating  Observables\n-  Subscribing  to Observables\n-  Executing  the Observable\n-  Disposing  Observables", 
            "title": "\u4e00\u4e2aObservabl\u7684\u89e3\u5256"
        }, 
        {
            "location": "/observable/#_3", 
            "text": "Rx.Observable.create  is an alias for the  Observable  constructor, and it takes one argument: the  subscribe  function.  The following example creates an Observable to emit the string  'hi'  every second to an Observer.  var   observable   =   Rx . Observable . create ( function   subscribe ( observer )   { \n   var   id   =   setInterval (()   =   { \n     observer . next ( hi ) \n   },   1000 );  });   Observables can be created with  create , but usually we use the so-called  creation operators , like  of ,  from ,  interval , etc.  In the example above, the  subscribe  function is the most important piece to describe the Observable. Let's look at what subscribing means.", 
            "title": "\u521b\u5efa\u89c2\u5bdf\u70b9"
        }, 
        {
            "location": "/observable/#_4", 
            "text": "The Observable  observable  in the example can be  subscribed  to, like this:   observable . subscribe ( x   =   console . log ( x ));   It is not a coincidence that  observable.subscribe  and  subscribe  in  Observable.create(function subscribe(observer) {...})  have the same name. In the library, they are different, but for practical purposes you can consider them conceptually equal.  This shows how  subscribe  calls are not shared among multiple Observers of the same Observable. When calling  observable.subscribe  with an Observer, the function  subscribe  in  Observable.create(function subscribe(observer) {...})  is run for that given Observer. Each call to  observable.subscribe  triggers its own independent setup for that given Observer.  Subscribing to an Observable is like calling a function, providing callbacks where the data will be delivered to.  This is drastically different to event handler APIs like  addEventListener  /  removeEventListener . With  observable.subscribe , the given Observer is not registered as a listener in the Observable. The Observable does not even maintain a list of attached Observers.  A  subscribe  call is simply a way to start an \"Observable execution\" and deliver values or events to an Observer of that execution.", 
            "title": "\u8ba2\u9605\u89c2\u5bdf\u8005"
        }, 
        {
            "location": "/observable/#_5", 
            "text": "The code inside  Observable.create(function subscribe(observer) {...})  represents an \"Observable execution\", a lazy computation that only happens for each Observer that subscribes. The execution produces multiple values over time, either synchronously or asynchronously.  There are three types of values an Observable Execution can deliver:   \"Next\" notification: sends a value such as a Number, a String, an Object, etc.  \"Error\" notification: sends a JavaScript Error or exception.  \"Complete\" notification: does not send a value.   Next notifications are the most important and most common type: they represent actual data being delivered to an Observer. Error and Complete notifications may happen only once during the Observable Execution, and there can only be either one of them.  These constraints are expressed best in the so-called  Observable Grammar  or  Contract , written as a regular expression:  next*(error|complete)?  In an Observable Execution, zero to infinite Next notifications may be delivered. If either an Error or Complete notification is delivered, then nothing else can be delivered afterwards.  The following is an example of an Observable execution that delivers three Next notifications, then completes:  var   observable   =   Rx . Observable . create ( function   subscribe ( observer )   { \n   observer . next ( 1 ); \n   observer . next ( 2 ); \n   observer . next ( 3 ); \n   observer . complete ();  });   Observables strictly adhere to the Observable Contract, so the following code would not deliver the Next notification  4 :  var   observable   =   Rx . Observable . create ( function   subscribe ( observer )   { \n   observer . next ( 1 ); \n   observer . next ( 2 ); \n   observer . next ( 3 ); \n   observer . complete (); \n   observer . next ( 4 );   // Is not delivered because it would violate the contract  });   It is a good idea to wrap any code in  subscribe  with  try / catch  block that will deliver an Error notification if it catches an exception:  var   observable   =   Rx . Observable . create ( function   subscribe ( observer )   { \n   try   { \n     observer . next ( 1 ); \n     observer . next ( 2 ); \n     observer . next ( 3 ); \n     observer . complete (); \n   }   catch   ( err )   { \n     observer . error ( err );   // delivers an error if it caught one \n   }  });", 
            "title": "\u6267\u884c\u89c2\u5bdf"
        }, 
        {
            "location": "/observable/#_6", 
            "text": "Because Observable Executions may be infinite, and it's common for an Observer to want to abort execution in finite time, we need an API for canceling an execution. Since each execution is exclusive to one Observer only, once the Observer is done receiving values, it has to have a way to stop the execution, in order to avoid wasting computation power or memory resources.  When  observable.subscribe  is called, the Observer gets attached to the newly created Observable execution. This call also returns an object, the  Subscription :   var   subscription   =   observable . subscribe ( x   =   console . log ( x ));   The Subscription represents the ongoing execution, and has a minimal API which allows you to cancel that execution. Read more about the  Subscription  type here . With  subscription.unsubscribe()  you can cancel the ongoing execution:  var   observable   =   Rx . Observable . from ([ 10 ,   20 ,   30 ]);  var   subscription   =   observable . subscribe ( x   =   console . log ( x ));  // Later:  subscription . unsubscribe ();   When you subscribe, you get back a Subscription, which represents the ongoing execution. Just call  unsubscribe()  to cancel the execution.  Each Observable must define how to dispose resources of that execution when we create the Observable using  create() . You can do that by returning a custom  unsubscribe  function from within  function subscribe() .  For instance, this is how we clear an interval execution set with  setInterval :  var   observable   =   Rx . Observable . create ( function   subscribe ( observer )   { \n   // Keep track of the interval resource \n   var   intervalID   =   setInterval (()   =   { \n     observer . next ( hi ); \n   },   1000 ); \n\n   // Provide a way of canceling and disposing the interval resource \n   return   function   unsubscribe ()   { \n     clearInterval ( intervalID ); \n   };  });   Just like  observable.subscribe  resembles  Observable.create(function subscribe() {...}) , the  unsubscribe  we return from  subscribe  is conceptually equal to  subscription.unsubscribe . In fact, if we remove the ReactiveX types surrounding these concepts, we're left with rather straightforward JavaScript.  function   subscribe ( observer )   { \n   var   intervalID   =   setInterval (()   =   { \n     observer . next ( hi ); \n   },   1000 ); \n\n   return   function   unsubscribe ()   { \n     clearInterval ( intervalID ); \n   };  }  var   unsubscribe   =   subscribe ({ next :   ( x )   =   console . log ( x )});  // Later:  unsubscribe ();   // dispose the resources   The reason why we use Rx types like Observable, Observer, and Subscription is to get safety (such as the Observable Contract) and composability with Operators.", 
            "title": "\u5904\u7406\u53ef\u89c2\u5bdf\u7684\u6267\u884c"
        }, 
        {
            "location": "/observer/", 
            "text": "Observer\n\n\n\u4ec0\u4e48\u662f\u89c2\u5bdf\u8005\uff1f\n An Observer is a consumer of values delivered by an Observable. Observers are simply a set of callbacks, one for each type of notification delivered by the Observable: \nnext\n, \nerror\n, and \ncomplete\n. The following is an example of a typical Observer object:\n\n\nvar\n \nobserver\n \n=\n \n{\n\n  \nnext\n:\n \nx\n \n=\n \nconsole\n.\nlog\n(\nObserver got a next value: \n \n+\n \nx\n),\n\n  \nerror\n:\n \nerr\n \n=\n \nconsole\n.\nerror\n(\nObserver got an error: \n \n+\n \nerr\n),\n\n  \ncomplete\n:\n \n()\n \n=\n \nconsole\n.\nlog\n(\nObserver got a complete notification\n),\n\n\n};\n\n\n\n\n\nTo use the Observer, provide it to the \nsubscribe\n of an Observable:\n\n\n\n\n\nobservable\n.\nsubscribe\n(\nobserver\n);\n\n\n\n\n\nObservers are just objects with three callbacks, one for each type of notification that an Observable may deliver.\n\n\nObservers in RxJS may also be \npartial\n. If you don't provide one of the callbacks, the execution of the Observable will still happen normally, except some types of notifications will be ignored, because they don't have a corresponding callback in the Observer.\n\n\nThe example below is an Observer without the \ncomplete\n callback:\n\n\nvar\n \nobserver\n \n=\n \n{\n\n  \nnext\n:\n \nx\n \n=\n \nconsole\n.\nlog\n(\nObserver got a next value: \n \n+\n \nx\n),\n\n  \nerror\n:\n \nerr\n \n=\n \nconsole\n.\nerror\n(\nObserver got an error: \n \n+\n \nerr\n),\n\n\n};\n\n\n\n\n\nWhen subscribing to an Observable, you may also just provide the callbacks as arguments, without being attached to an Observer object, for instance like this:\n\n\n\n\n\nobservable\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nObserver got a next value: \n \n+\n \nx\n));\n\n\n\n\n\nInternally in \nobservable.subscribe\n, it will create an Observer object using the first callback argument as the \nnext\n handler. All three types of callbacks may be provided as arguments:\n\n\n\n\n\nobservable\n.\nsubscribe\n(\n\n  \nx\n \n=\n \nconsole\n.\nlog\n(\nObserver got a next value: \n \n+\n \nx\n),\n\n  \nerr\n \n=\n \nconsole\n.\nerror\n(\nObserver got an error: \n \n+\n \nerr\n),\n\n  \n()\n \n=\n \nconsole\n.\nlog\n(\nObserver got a complete notification\n)\n\n\n);", 
            "title": "Observer(\u89c2\u5bdf\u8005)"
        }, 
        {
            "location": "/observer/#observer", 
            "text": "\u4ec0\u4e48\u662f\u89c2\u5bdf\u8005\uff1f  An Observer is a consumer of values delivered by an Observable. Observers are simply a set of callbacks, one for each type of notification delivered by the Observable:  next ,  error , and  complete . The following is an example of a typical Observer object:  var   observer   =   { \n   next :   x   =   console . log ( Observer got a next value:    +   x ), \n   error :   err   =   console . error ( Observer got an error:    +   err ), \n   complete :   ()   =   console . log ( Observer got a complete notification ),  };   To use the Observer, provide it to the  subscribe  of an Observable:   observable . subscribe ( observer );   Observers are just objects with three callbacks, one for each type of notification that an Observable may deliver.  Observers in RxJS may also be  partial . If you don't provide one of the callbacks, the execution of the Observable will still happen normally, except some types of notifications will be ignored, because they don't have a corresponding callback in the Observer.  The example below is an Observer without the  complete  callback:  var   observer   =   { \n   next :   x   =   console . log ( Observer got a next value:    +   x ), \n   error :   err   =   console . error ( Observer got an error:    +   err ),  };   When subscribing to an Observable, you may also just provide the callbacks as arguments, without being attached to an Observer object, for instance like this:   observable . subscribe ( x   =   console . log ( Observer got a next value:    +   x ));   Internally in  observable.subscribe , it will create an Observer object using the first callback argument as the  next  handler. All three types of callbacks may be provided as arguments:   observable . subscribe ( \n   x   =   console . log ( Observer got a next value:    +   x ), \n   err   =   console . error ( Observer got an error:    +   err ), \n   ()   =   console . log ( Observer got a complete notification )  );", 
            "title": "Observer"
        }, 
        {
            "location": "/subscription/", 
            "text": "\u8ba2\u9605\n\n\n\u4ec0\u4e48\u662f\u8ba2\u9605\uff1f\n A Subscription is an object that represents a disposable resource, usually the execution of an Observable. A Subscription has one important method, \nunsubscribe\n, that takes no argument and just disposes the resource held by the subscription. In previous versions of RxJS, Subscription was called \"Disposable\".\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ninterval\n(\n1000\n);\n\n\nvar\n \nsubscription\n \n=\n \nobservable\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n));\n\n\n// Later:\n\n\n// This cancels the ongoing Observable execution which\n\n\n// was started by calling subscribe with an Observer.\n\n\nsubscription\n.\nunsubscribe\n();\n\n\n\n\n\nA Subscription essentially just has an \nunsubscribe()\n function to release resources or cancel Observable executions.\n\n\nSubscriptions can also be put together, so that a call to an \nunsubscribe()\n of one Subscription may unsubscribe multiple Subscriptions. You can do this by \"adding\" one subscription into another:\n\n\nvar\n \nobservable1\n \n=\n \nRx\n.\nObservable\n.\ninterval\n(\n400\n);\n\n\nvar\n \nobservable2\n \n=\n \nRx\n.\nObservable\n.\ninterval\n(\n300\n);\n\n\n\nvar\n \nsubscription\n \n=\n \nobservable1\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nfirst: \n \n+\n \nx\n));\n\n\nvar\n \nchildSubscription\n \n=\n \nobservable2\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nsecond: \n \n+\n \nx\n));\n\n\n\nsubscription\n.\nadd\n(\nchildSubscription\n);\n\n\n\nsetTimeout\n(()\n \n=\n \n{\n\n  \n// Unsubscribes BOTH subscription and childSubscription\n\n  \nsubscription\n.\nunsubscribe\n();\n\n\n},\n \n1000\n);\n\n\n\n\n\nWhen executed, we see in the console:\n\nsecond\n:\n \n0\n\n\nfirst\n:\n \n0\n\n\nsecond\n:\n \n1\n\n\nfirst\n:\n \n1\n\n\nsecond\n:\n \n2\n\n\n\n\nSubscriptions also have a \nremove(otherSubscription)\n method, in order to undo the addition of a child Subscription.", 
            "title": "Subscription(\u8ba2\u9605)"
        }, 
        {
            "location": "/subscription/#_1", 
            "text": "\u4ec0\u4e48\u662f\u8ba2\u9605\uff1f  A Subscription is an object that represents a disposable resource, usually the execution of an Observable. A Subscription has one important method,  unsubscribe , that takes no argument and just disposes the resource held by the subscription. In previous versions of RxJS, Subscription was called \"Disposable\".  var   observable   =   Rx . Observable . interval ( 1000 );  var   subscription   =   observable . subscribe ( x   =   console . log ( x ));  // Later:  // This cancels the ongoing Observable execution which  // was started by calling subscribe with an Observer.  subscription . unsubscribe ();   A Subscription essentially just has an  unsubscribe()  function to release resources or cancel Observable executions.  Subscriptions can also be put together, so that a call to an  unsubscribe()  of one Subscription may unsubscribe multiple Subscriptions. You can do this by \"adding\" one subscription into another:  var   observable1   =   Rx . Observable . interval ( 400 );  var   observable2   =   Rx . Observable . interval ( 300 );  var   subscription   =   observable1 . subscribe ( x   =   console . log ( first:    +   x ));  var   childSubscription   =   observable2 . subscribe ( x   =   console . log ( second:    +   x ));  subscription . add ( childSubscription );  setTimeout (()   =   { \n   // Unsubscribes BOTH subscription and childSubscription \n   subscription . unsubscribe ();  },   1000 );   When executed, we see in the console: second :   0  first :   0  second :   1  first :   1  second :   2   Subscriptions also have a  remove(otherSubscription)  method, in order to undo the addition of a child Subscription.", 
            "title": "\u8ba2\u9605"
        }, 
        {
            "location": "/operators/", 
            "text": "\u64cd\u4f5c\u7b26\n\n\nRxJS is mostly useful for its \noperators\n, even though the Observable is the foundation. Operators are the essential pieces that allow complex asynchronous code to be easily composed in a declarative manner.\n\n\n\u4ec0\u4e48\u662f\u64cd\u4f5c\u7b26\uff1f\n\n\nOperators are \nmethods\n on the Observable type, such as \n.map(...)\n, \n.filter(...)\n, \n.merge(...)\n, etc. When called, they do not \nchange\n the existing Observable instance. Instead, they return a \nnew\n Observable, whose subscription logic is based on the first Observable.\n\n\nAn Operator is a function which creates a new Observable based on the current Observable. This is a pure operation: the previous Observable stays unmodified.\n\n\nAn Operator is essentially a pure function which takes one Observable as input and generates another Observable as output. Subscribing to the output Observable will also subscribe to the input Observable. In the following example, we create a custom operator function that multiplies each value received from the input Observable by 10:\n\n\nfunction\n \nmultiplyByTen\n(\ninput\n)\n \n{\n\n  \nvar\n \noutput\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \nsubscribe\n(\nobserver\n)\n \n{\n\n    \ninput\n.\nsubscribe\n({\n\n      \nnext\n:\n \n(\nv\n)\n \n=\n \nobserver\n.\nnext\n(\n10\n \n*\n \nv\n),\n\n      \nerror\n:\n \n(\nerr\n)\n \n=\n \nobserver\n.\nerror\n(\nerr\n),\n\n      \ncomplete\n:\n \n()\n \n=\n \nobserver\n.\ncomplete\n()\n\n    \n});\n\n  \n});\n\n  \nreturn\n \noutput\n;\n\n\n}\n\n\n\nvar\n \ninput\n \n=\n \nRx\n.\nObservable\n.\nfrom\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n]);\n\n\nvar\n \noutput\n \n=\n \nmultiplyByTen\n(\ninput\n);\n\n\noutput\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n));\n\n\n\n\n\nWhich outputs:\n\n\n10\n20\n30\n40\n\n\n\n\nNotice that a subscribe to \noutput\n will cause \ninput\n Observable to be subscribed. We call this an \"operator subscription chain\".\n\n\n\u5b9e\u4f8b\u64cd\u4f5c\u7b26\u4e0e\u9759\u6001\u64cd\u4f5c\u7b26\n\n\nWhat is an instance operator?\n Typically when referring to operators, we assume \ninstance\n operators, which are methods on Observable instances. For instance, if the operator \nmultiplyByTen\n would be an official instance operator, it would look roughly like this:\n\n\nRx\n.\nObservable\n.\nprototype\n.\nmultiplyByTen\n \n=\n \nfunction\n \nmultiplyByTen\n()\n \n{\n\n  \nvar\n \ninput\n \n=\n \nthis\n;\n\n  \nreturn\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \nsubscribe\n(\nobserver\n)\n \n{\n\n    \ninput\n.\nsubscribe\n({\n\n      \nnext\n:\n \n(\nv\n)\n \n=\n \nobserver\n.\nnext\n(\n10\n \n*\n \nv\n),\n\n      \nerror\n:\n \n(\nerr\n)\n \n=\n \nobserver\n.\nerror\n(\nerr\n),\n\n      \ncomplete\n:\n \n()\n \n=\n \nobserver\n.\ncomplete\n()\n\n    \n});\n\n  \n});\n\n\n}\n\n\n\n\n\nInstance operators are functions that use the \nthis\n keyword to infer what is the input Observable.\n\n\nNotice how the \ninput\n Observable is not a function argument anymore, it is assumed to be the \nthis\n object. This is how we would use such instance operator:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\nfrom\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n]).\nmultiplyByTen\n();\n\n\n\nobservable\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n));\n\n\n\n\n\nWhat is a static operator?\n Besides instance operators, static operators are functions attached to the Observable class directly. A static operator uses no \nthis\n keyword internally, but instead relies entirely on its arguments.\n\n\nStatic operators are pure functions attached to the Observable class, and usually are used to create Observables from scratch.\n\n\nThe most common type of static operators are the so-called \nCreation Operators\n. Instead of transforming an input Observable to an output Observable, they simply take a non-Observable argument, like a number, and \ncreate\n a new Observable.\n\n\nA typical example of a static creation operator would be the \ninterval\n function. It takes a number (not an Observable) as input argument, and produces an Observable as output:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ninterval\n(\n1000\n \n/* number of milliseconds */\n);\n\n\n\n\n\nAnother example of a creation operator is \ncreate\n, which we have been using extensively in previous examples. See the list of \nall static creation operators here\n.\n\n\nHowever, static operators may be of different nature than simply creation. Some \nCombination Operators\n may be static, such as \nmerge\n, \ncombineLatest\n, \nconcat\n, etc. These make sense as static operators because they take \nmultiple\n Observables as input, not just one, for instance:\n\n\nvar\n \nobservable1\n \n=\n \nRx\n.\nObservable\n.\ninterval\n(\n1000\n);\n\n\nvar\n \nobservable2\n \n=\n \nRx\n.\nObservable\n.\ninterval\n(\n400\n);\n\n\n\nvar\n \nmerged\n \n=\n \nRx\n.\nObservable\n.\nmerge\n(\nobservable1\n,\n \nobservable2\n);\n\n\n\n\n\n\u5927\u7406\u77f3\u56fe\n\n\nTo explain how operators work, textual descriptions are often not enough. Many operators are related to time, they may for instance delay, sample, throttle, or debounce value emissions in different ways. Diagrams are often a better tool for that. \nMarble Diagrams\n are visual representations of how operators work, and include the input Observable(s), the operator and its parameters, and the output Observable.\n\n\nIn a marble diagram, time flows to the right, and the diagram describes how values (\"marbles\") are emitted on the Observable execution.\n\n\nBelow you can see the anatomy of a marble diagram.\n\n\n\n\nThroughout this documentation site, we extensively use marble diagrams to explain how operators work. They may be really useful in other contexts too, like on a whiteboard or even in our unit tests (as ASCII diagrams).\n\n\n\u9009\u62e9\u4e00\u4e2a\u64cd\u4f5c\u7b26\n\n\n\n\n\n\u64cd\u4f5c\u7b26\u7c7b\u522b\n\n\nThere are operators for different purposes, and they may be categorized as: creation, transformation, filtering, combination, multicasting, error handling, utility, etc. In the following list you will find all the operators organized in categories.\n\n\n\u521b\u5efa\u64cd\u4f5c\u7b26\u53f7\n\n\n\n\najax\n\n\nbindCallback\n\n\nbindNodeCallback\n\n\ncreate\n\n\ndefer\n\n\nempty\n\n\nfrom\n\n\nfromEvent\n\n\nfromEventPattern\n\n\nfromPromise\n\n\ngenerate\n\n\ninterval\n\n\nnever\n\n\nof\n\n\nrange\n\n\nrepeat\n\n\nrepeatWhen\n\n\nthrow\n\n\ntimer\n\n\n\n\n\u8f6c\u5316\u64cd\u4f5c\n\n\n\n\nbuffer\n\n\nbufferCount\n\n\nbufferTime\n\n\nbufferToggle\n\n\nbufferWhen\n\n\nconcatMap\n\n\nconcatMapTo\n\n\nexhaustMap\n\n\nexpand\n\n\ngroupBy\n\n\nmap\n\n\nmapTo\n\n\nmergeMap\n\n\nmergeMapTo\n\n\nmergeScan\n\n\npairwise\n\n\npartition\n\n\npluck\n\n\nscan\n\n\nswitchMap\n\n\nswitchMapTo\n\n\nwindow\n\n\nwindowCount\n\n\nwindowTime\n\n\nwindowToggle\n\n\nwindowWhen\n\n\n\n\n\u8fc7\u6ee4\u64cd\u4f5c\u7b26\n\n\n\n\naudit\n\n\nauditTime\n\n\ndebounce\n\n\ndebounceTime\n\n\ndistinct\n\n\ndistinctKey\n\n\ndistinctUntilChanged\n\n\ndistinctUntilKeyChanged\n\n\nelementAt\n\n\nfilter\n\n\nfirst\n\n\nignoreElements\n\n\nlast\n\n\nsample\n\n\nsampleTime\n\n\nsingle\n\n\nskip\n\n\nskipLast\n\n\nskipUntil\n\n\nskipWhile\n\n\ntake\n\n\ntakeLast\n\n\ntakeUntil\n\n\ntakeWhile\n\n\nthrottle\n\n\nthrottleTime\n\n\n\n\n\u7ec4\u5408\u64cd\u4f5c\u7b26\n\n\n\n\ncombineAll\n\n\ncombineLatest\n\n\nconcat\n\n\nconcatAll\n\n\nexhaust\n\n\nforkJoin\n\n\nmerge\n\n\nmergeAll\n\n\nrace\n\n\nstartWith\n\n\nswitch\n\n\nwithLatestFrom\n\n\nzip\n\n\nzipAll\n\n\n\n\n\u591a\u64ad\u64cd\u4f5c\u7b26\n\n\n\n\nmulticast\n\n\npublish\n\n\npublishBehavior\n\n\npublishLast\n\n\npublishReplay\n\n\nshare\n\n\n\n\n\u9519\u8bef\u5904\u7406\u64cd\u4f5c\u7b26\n\n\n\n\ncatch\n\n\nretry\n\n\nretryWhen\n\n\n\n\n\u6548\u7528\u64cd\u4f5c\u7b26\n\n\n\n\ndo\n\n\ndelay\n\n\ndelayWhen\n\n\ndematerialize\n\n\nfinally\n\n\nlet\n\n\nmaterialize\n\n\nobserveOn\n\n\nsubscribeOn\n\n\ntimeInterval\n\n\ntimestamp\n\n\ntimeout\n\n\ntimeoutWith\n\n\ntoArray\n\n\ntoPromise\n\n\n\n\n\u6761\u4ef6\u548c\u5e03\u5c14\u64cd\u4f5c\u7b26\n\n\n\n\ndefaultIfEmpty\n\n\nevery\n\n\nfind\n\n\nfindIndex\n\n\nisEmpty\n\n\n\n\n\u6570\u5b66\u548c\u96c6\u5408\u8fd0\u7b97\u7b26\n\n\n\n\ncount\n\n\nmax\n\n\nmin\n\n\nreduce", 
            "title": "Operators(\u64cd\u4f5c\u7b26)"
        }, 
        {
            "location": "/operators/#_1", 
            "text": "RxJS is mostly useful for its  operators , even though the Observable is the foundation. Operators are the essential pieces that allow complex asynchronous code to be easily composed in a declarative manner.", 
            "title": "\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_2", 
            "text": "Operators are  methods  on the Observable type, such as  .map(...) ,  .filter(...) ,  .merge(...) , etc. When called, they do not  change  the existing Observable instance. Instead, they return a  new  Observable, whose subscription logic is based on the first Observable.  An Operator is a function which creates a new Observable based on the current Observable. This is a pure operation: the previous Observable stays unmodified.  An Operator is essentially a pure function which takes one Observable as input and generates another Observable as output. Subscribing to the output Observable will also subscribe to the input Observable. In the following example, we create a custom operator function that multiplies each value received from the input Observable by 10:  function   multiplyByTen ( input )   { \n   var   output   =   Rx . Observable . create ( function   subscribe ( observer )   { \n     input . subscribe ({ \n       next :   ( v )   =   observer . next ( 10   *   v ), \n       error :   ( err )   =   observer . error ( err ), \n       complete :   ()   =   observer . complete () \n     }); \n   }); \n   return   output ;  }  var   input   =   Rx . Observable . from ([ 1 ,   2 ,   3 ,   4 ]);  var   output   =   multiplyByTen ( input );  output . subscribe ( x   =   console . log ( x ));   Which outputs:  10\n20\n30\n40  Notice that a subscribe to  output  will cause  input  Observable to be subscribed. We call this an \"operator subscription chain\".", 
            "title": "\u4ec0\u4e48\u662f\u64cd\u4f5c\u7b26\uff1f"
        }, 
        {
            "location": "/operators/#_3", 
            "text": "What is an instance operator?  Typically when referring to operators, we assume  instance  operators, which are methods on Observable instances. For instance, if the operator  multiplyByTen  would be an official instance operator, it would look roughly like this:  Rx . Observable . prototype . multiplyByTen   =   function   multiplyByTen ()   { \n   var   input   =   this ; \n   return   Rx . Observable . create ( function   subscribe ( observer )   { \n     input . subscribe ({ \n       next :   ( v )   =   observer . next ( 10   *   v ), \n       error :   ( err )   =   observer . error ( err ), \n       complete :   ()   =   observer . complete () \n     }); \n   });  }   Instance operators are functions that use the  this  keyword to infer what is the input Observable.  Notice how the  input  Observable is not a function argument anymore, it is assumed to be the  this  object. This is how we would use such instance operator:  var   observable   =   Rx . Observable . from ([ 1 ,   2 ,   3 ,   4 ]). multiplyByTen ();  observable . subscribe ( x   =   console . log ( x ));   What is a static operator?  Besides instance operators, static operators are functions attached to the Observable class directly. A static operator uses no  this  keyword internally, but instead relies entirely on its arguments.  Static operators are pure functions attached to the Observable class, and usually are used to create Observables from scratch.  The most common type of static operators are the so-called  Creation Operators . Instead of transforming an input Observable to an output Observable, they simply take a non-Observable argument, like a number, and  create  a new Observable.  A typical example of a static creation operator would be the  interval  function. It takes a number (not an Observable) as input argument, and produces an Observable as output:  var   observable   =   Rx . Observable . interval ( 1000   /* number of milliseconds */ );   Another example of a creation operator is  create , which we have been using extensively in previous examples. See the list of  all static creation operators here .  However, static operators may be of different nature than simply creation. Some  Combination Operators  may be static, such as  merge ,  combineLatest ,  concat , etc. These make sense as static operators because they take  multiple  Observables as input, not just one, for instance:  var   observable1   =   Rx . Observable . interval ( 1000 );  var   observable2   =   Rx . Observable . interval ( 400 );  var   merged   =   Rx . Observable . merge ( observable1 ,   observable2 );", 
            "title": "\u5b9e\u4f8b\u64cd\u4f5c\u7b26\u4e0e\u9759\u6001\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_4", 
            "text": "To explain how operators work, textual descriptions are often not enough. Many operators are related to time, they may for instance delay, sample, throttle, or debounce value emissions in different ways. Diagrams are often a better tool for that.  Marble Diagrams  are visual representations of how operators work, and include the input Observable(s), the operator and its parameters, and the output Observable.  In a marble diagram, time flows to the right, and the diagram describes how values (\"marbles\") are emitted on the Observable execution.  Below you can see the anatomy of a marble diagram.   Throughout this documentation site, we extensively use marble diagrams to explain how operators work. They may be really useful in other contexts too, like on a whiteboard or even in our unit tests (as ASCII diagrams).", 
            "title": "\u5927\u7406\u77f3\u56fe"
        }, 
        {
            "location": "/operators/#_5", 
            "text": "", 
            "title": "\u9009\u62e9\u4e00\u4e2a\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_6", 
            "text": "There are operators for different purposes, and they may be categorized as: creation, transformation, filtering, combination, multicasting, error handling, utility, etc. In the following list you will find all the operators organized in categories.", 
            "title": "\u64cd\u4f5c\u7b26\u7c7b\u522b"
        }, 
        {
            "location": "/operators/#_7", 
            "text": "ajax  bindCallback  bindNodeCallback  create  defer  empty  from  fromEvent  fromEventPattern  fromPromise  generate  interval  never  of  range  repeat  repeatWhen  throw  timer", 
            "title": "\u521b\u5efa\u64cd\u4f5c\u7b26\u53f7"
        }, 
        {
            "location": "/operators/#_8", 
            "text": "buffer  bufferCount  bufferTime  bufferToggle  bufferWhen  concatMap  concatMapTo  exhaustMap  expand  groupBy  map  mapTo  mergeMap  mergeMapTo  mergeScan  pairwise  partition  pluck  scan  switchMap  switchMapTo  window  windowCount  windowTime  windowToggle  windowWhen", 
            "title": "\u8f6c\u5316\u64cd\u4f5c"
        }, 
        {
            "location": "/operators/#_9", 
            "text": "audit  auditTime  debounce  debounceTime  distinct  distinctKey  distinctUntilChanged  distinctUntilKeyChanged  elementAt  filter  first  ignoreElements  last  sample  sampleTime  single  skip  skipLast  skipUntil  skipWhile  take  takeLast  takeUntil  takeWhile  throttle  throttleTime", 
            "title": "\u8fc7\u6ee4\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_10", 
            "text": "combineAll  combineLatest  concat  concatAll  exhaust  forkJoin  merge  mergeAll  race  startWith  switch  withLatestFrom  zip  zipAll", 
            "title": "\u7ec4\u5408\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_11", 
            "text": "multicast  publish  publishBehavior  publishLast  publishReplay  share", 
            "title": "\u591a\u64ad\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_12", 
            "text": "catch  retry  retryWhen", 
            "title": "\u9519\u8bef\u5904\u7406\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_13", 
            "text": "do  delay  delayWhen  dematerialize  finally  let  materialize  observeOn  subscribeOn  timeInterval  timestamp  timeout  timeoutWith  toArray  toPromise", 
            "title": "\u6548\u7528\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_14", 
            "text": "defaultIfEmpty  every  find  findIndex  isEmpty", 
            "title": "\u6761\u4ef6\u548c\u5e03\u5c14\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operators/#_15", 
            "text": "count  max  min  reduce", 
            "title": "\u6570\u5b66\u548c\u96c6\u5408\u8fd0\u7b97\u7b26"
        }, 
        {
            "location": "/subject/", 
            "text": "\u5bf9\u8c61\n\n\n\u4ec0\u4e48\u662f\u5bf9\u8c61\uff1f\n An RxJS Subject is a special type of Observable that allows values to be multicasted to many Observers. While plain Observables are unicast (each subscribed Observer owns an independent execution of the Observable), Subjects are multicast.\n\n\nA Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.\n\n\n\u6bcf\u4e2a\u4e3b\u9898\u90fd\u662f\u53ef\u89c2\u5bdf\u7684\u3002\n Given a Subject, you can \nsubscribe\n to it, providing an Observer, which will start receiving values normally. From the perspective of the Observer, it cannot tell whether the Observable execution is coming from a plain unicast Observable or a Subject.\n\n\nInternally to the Subject, \nsubscribe\n does not invoke a new execution that delivers values. It simply registers the given Observer in a list of Observers, similarly to how \naddListener\n usually works in other libraries and languages.\n\n\n\u6bcf\u4e2a\u4e3b\u9898\u90fd\u662f\u89c2\u5bdf\u8005\u3002\n It is an object with the methods \nnext(v)\n, \nerror(e)\n, and \ncomplete()\n. To feed a new value to the Subject, just call \nnext(theValue)\n, and it will be multicasted to the Observers registered to listen to the Subject.\n\n\nIn the example below, we have two Observers attached to a Subject, and we feed some values to the Subject:\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nSubject\n();\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n\n});\n\n\n\nsubject\n.\nnext\n(\n1\n);\n\n\nsubject\n.\nnext\n(\n2\n);\n\n\n\n\n\nWith the following output on the console:\n\n\nobserverA\n:\n \n1\n\n\nobserverB\n:\n \n1\n\n\nobserverA\n:\n \n2\n\n\nobserverB\n:\n \n2\n\n\n\n\n\nSince a Subject is an Observer, this also means you may provide a Subject as the argument to the \nsubscribe\n of any Observable, like the example below shows:\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nSubject\n();\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n\n});\n\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\nfrom\n([\n1\n,\n \n2\n,\n \n3\n]);\n\n\n\nobservable\n.\nsubscribe\n(\nsubject\n);\n \n// You can subscribe providing a Subject\n\n\n\n\n\nWhich executes as:\n\n\nobserverA\n:\n \n1\n\n\nobserverB\n:\n \n1\n\n\nobserverA\n:\n \n2\n\n\nobserverB\n:\n \n2\n\n\nobserverA\n:\n \n3\n\n\nobserverB\n:\n \n3\n\n\n\n\n\nWith the approach above, we essentially just converted a unicast Observable execution to multicast, through the Subject. This demonstrates how Subjects are the only way of making any Observable execution be shared to multiple Observers.\n\n\nThere are also a few specializations of the \nSubject\n type: \nBehaviorSubject\n, \nReplaySubject\n, and \nAsyncSubject\n.\n\n\n\u591a\u70b9\u89c2\u5bdf\n\n\nA \"multicasted Observable\" passes notifications through a Subject which may have many subscribers, whereas a plain \"unicast Observable\" only sends notifications to a single Observer.\n\n\nA multicasted Observable uses a Subject under the hood to make multiple Observers see the same Observable execution.\n\n\nUnder the hood, this is how the \nmulticast\n operator works: Observers subscribe to an underlying Subject, and the Subject subscribes to the source Observable. The following example is similar to the previous example which used \nobservable.subscribe(subject)\n:\n\n\nvar\n \nsource\n \n=\n \nRx\n.\nObservable\n.\nfrom\n([\n1\n,\n \n2\n,\n \n3\n]);\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nSubject\n();\n\n\nvar\n \nmulticasted\n \n=\n \nsource\n.\npipe\n(\nmulticast\n(\nsubject\n));\n\n\n\n// These are, under the hood, `subject.subscribe({...})`:\n\n\nmulticasted\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\nmulticasted\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n\n});\n\n\n\n// This is, under the hood, `source.subscribe(subject)`:\n\n\nmulticasted\n.\nconnect\n();\n\n\n\n\n\nmulticast\n returns an Observable that looks like a normal Observable, but works like a Subject when it comes to subscribing. \nmulticast\n returns a \nConnectableObservable\n, which is simply an Observable with the \nconnect()\n method.\n\n\nThe \nconnect()\n method is important to determine exactly when the shared Observable execution  will start. Because \nconnect()\n does \nsource.subscribe(subject)\n under the hood, \nconnect()\n returns a Subscription, which you can unsubscribe from in order to cancel the shared Observable execution.\n\n\n\u53c2\u8003\u8ba1\u6570\n\n\nCalling \nconnect()\n manually and handling the Subscription is often cumbersome. Usually, we want to \nautomatically\n connect when the first Observer arrives, and automatically cancel the shared execution when the last Observer unsubscribes.\n\n\nConsider the following example where subscriptions occur as outlined by this list:\n\n\n\n\nFirst Observer subscribes to the multicasted Observable\n\n\nThe multicasted Observable is connected\n\n\nThe \nnext\n value \n0\n is delivered to the first Observer\n\n\nSecond Observer subscribes to the multicasted Observable\n\n\nThe \nnext\n value \n1\n is delivered to the first Observer\n\n\nThe \nnext\n value \n1\n is delivered to the second Observer\n\n\nFirst Observer unsubscribes from the multicasted Observable\n\n\nThe \nnext\n value \n2\n is delivered to the second Observer\n\n\nSecond Observer unsubscribes from the multicasted Observable\n\n\nThe connection to the multicasted Observable is unsubscribed\n\n\n\n\nTo achieve that with explicit calls to \nconnect()\n, we write the following code:\n\n\nvar\n \nsource\n \n=\n \nRx\n.\nObservable\n.\ninterval\n(\n500\n);\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nSubject\n();\n\n\nvar\n \nmulticasted\n \n=\n \nsource\n.\npipe\n(\nmulticast\n(\nsubject\n));\n\n\nvar\n \nsubscription1\n,\n \nsubscription2\n,\n \nsubscriptionConnect\n;\n\n\n\nsubscription1\n \n=\n \nmulticasted\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\n// We should call `connect()` here, because the first\n\n\n// subscriber to `multicasted` is interested in consuming values\n\n\nsubscriptionConnect\n \n=\n \nmulticasted\n.\nconnect\n();\n\n\n\nsetTimeout\n(()\n \n=\n \n{\n\n  \nsubscription2\n \n=\n \nmulticasted\n.\nsubscribe\n({\n\n    \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n  \n});\n\n\n},\n \n600\n);\n\n\n\nsetTimeout\n(()\n \n=\n \n{\n\n  \nsubscription1\n.\nunsubscribe\n();\n\n\n},\n \n1200\n);\n\n\n\n// We should unsubscribe the shared Observable execution here,\n\n\n// because `multicasted` would have no more subscribers after this\n\n\nsetTimeout\n(()\n \n=\n \n{\n\n  \nsubscription2\n.\nunsubscribe\n();\n\n  \nsubscriptionConnect\n.\nunsubscribe\n();\n \n// for the shared Observable execution\n\n\n},\n \n2000\n);\n\n\n\n\n\nIf we wish to avoid explicit calls to \nconnect()\n, we can use ConnectableObservable's \nrefCount()\n method (reference counting), which returns an Observable that keeps track of how many subscribers it has. When the number of subscribers increases from \n0\n to \n1\n, it will call \nconnect()\n for us, which starts the shared execution. Only when the number of subscribers decreases from \n1\n to \n0\n will it be fully unsubscribed, stopping further execution.\n\n\nrefCount\n makes the multicasted Observable automatically start executing when the first subscriber arrives, and stop executing when the last subscriber leaves.\n\n\nBelow is an example:\n\n\nvar\n \nsource\n \n=\n \nRx\n.\nObservable\n.\ninterval\n(\n500\n);\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nSubject\n();\n\n\nvar\n \nrefCounted\n \n=\n \nsource\n.\npipe\n(\nmulticast\n(\nsubject\n),\n \nrefCount\n());\n\n\nvar\n \nsubscription1\n,\n \nsubscription2\n;\n\n\n\n// This calls `connect()`, because\n\n\n// it is the first subscriber to `refCounted`\n\n\nconsole\n.\nlog\n(\nobserverA subscribed\n);\n\n\nsubscription1\n \n=\n \nrefCounted\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\n\nsetTimeout\n(()\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nobserverB subscribed\n);\n\n  \nsubscription2\n \n=\n \nrefCounted\n.\nsubscribe\n({\n\n    \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n  \n});\n\n\n},\n \n600\n);\n\n\n\nsetTimeout\n(()\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nobserverA unsubscribed\n);\n\n  \nsubscription1\n.\nunsubscribe\n();\n\n\n},\n \n1200\n);\n\n\n\n// This is when the shared Observable execution will stop, because\n\n\n// `refCounted` would have no more subscribers after this\n\n\nsetTimeout\n(()\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\nobserverB unsubscribed\n);\n\n  \nsubscription2\n.\nunsubscribe\n();\n\n\n},\n \n2000\n);\n\n\n\n\n\nWhich executes with the output:\n\n\nobserverA subscribed\nobserverA: 0\nobserverB subscribed\nobserverA: 1\nobserverB: 1\nobserverA unsubscribed\nobserverB: 2\nobserverB unsubscribed\n\n\n\n\nThe \nrefCount()\n method only exists on ConnectableObservable, and it returns an \nObservable\n, not another ConnectableObservable.\n\n\nBehaviorSubject\n\n\nOne of the variants of Subjects is the \nBehaviorSubject\n, which has a notion of \"the current value\". It stores the latest value emitted to its consumers, and whenever a new Observer subscribes, it will immediately receive the \"current value\" from the \nBehaviorSubject\n.\n\n\nBehaviorSubjects are useful for representing \"values over time\". For instance, an event stream of birthdays is a Subject, but the stream of a person's age would be a BehaviorSubject.\n\n\nIn the following example, the BehaviorSubject is initialized with the value \n0\n which the first Observer receives when it subscribes. The second Observer receives the value \n2\n even though it subscribed after the value \n2\n was sent.\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nBehaviorSubject\n(\n0\n);\n \n// 0 is the initial value\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\n\nsubject\n.\nnext\n(\n1\n);\n\n\nsubject\n.\nnext\n(\n2\n);\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n\n});\n\n\n\nsubject\n.\nnext\n(\n3\n);\n\n\n\n\n\nWith output:\n\n\nobserverA\n:\n \n0\n\n\nobserverA\n:\n \n1\n\n\nobserverA\n:\n \n2\n\n\nobserverB\n:\n \n2\n\n\nobserverA\n:\n \n3\n\n\nobserverB\n:\n \n3\n\n\n\n\n\nReplaySubject\n\n\nA \nReplaySubject\n is similar to a \nBehaviorSubject\n in that it can send old values to new subscribers, but it can also \nrecord\n a part of the Observable execution.\n\n\nA \nReplaySubject\n records multiple values from the Observable execution and replays them to new subscribers.\n\n\nWhen creating a \nReplaySubject\n, you can specify how many values to replay:\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nReplaySubject\n(\n3\n);\n \n// buffer 3 values for new subscribers\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\n\nsubject\n.\nnext\n(\n1\n);\n\n\nsubject\n.\nnext\n(\n2\n);\n\n\nsubject\n.\nnext\n(\n3\n);\n\n\nsubject\n.\nnext\n(\n4\n);\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n\n});\n\n\n\nsubject\n.\nnext\n(\n5\n);\n\n\n\n\n\nWith output:\n\n\nobserverA\n:\n \n1\n\n\nobserverA\n:\n \n2\n\n\nobserverA\n:\n \n3\n\n\nobserverA\n:\n \n4\n\n\nobserverB\n:\n \n2\n\n\nobserverB\n:\n \n3\n\n\nobserverB\n:\n \n4\n\n\nobserverA\n:\n \n5\n\n\nobserverB\n:\n \n5\n\n\n\n\n\nYou can also specify a \nwindow time\n in milliseconds, besides of the buffer size, to determine how old the recorded values can be. In the following example we use a large buffer size of \n100\n, but a window time parameter of just \n500\n milliseconds.\n\n\n\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nReplaySubject\n(\n100\n,\n \n500\n \n/* windowTime */\n);\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\n\nvar\n \ni\n \n=\n \n1\n;\n\n\nsetInterval\n(()\n \n=\n \nsubject\n.\nnext\n(\ni\n++\n),\n \n200\n);\n\n\n\nsetTimeout\n(()\n \n=\n \n{\n\n  \nsubject\n.\nsubscribe\n({\n\n    \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n  \n});\n\n\n},\n \n1000\n);\n\n\n\n\n\nWith the following output where the second Observer gets events \n3\n, \n4\n and \n5\n that happened in the last \n500\n milliseconds prior to its subscription:\n\n\nobserverA\n:\n \n1\n\n\nobserverA\n:\n \n2\n\n\nobserverA\n:\n \n3\n\n\nobserverA\n:\n \n4\n\n\nobserverA\n:\n \n5\n\n\nobserverB\n:\n \n3\n\n\nobserverB\n:\n \n4\n\n\nobserverB\n:\n \n5\n\n\nobserverA\n:\n \n6\n\n\nobserverB\n:\n \n6\n\n\n...\n\n\n\n\n\nAsyncSubject\n\n\nThe AsyncSubject is a variant where only the last value of the Observable execution is sent to its observers, and only when the execution completes.\n\n\nvar\n \nsubject\n \n=\n \nnew\n \nRx\n.\nAsyncSubject\n();\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverA: \n \n+\n \nv\n)\n\n\n});\n\n\n\nsubject\n.\nnext\n(\n1\n);\n\n\nsubject\n.\nnext\n(\n2\n);\n\n\nsubject\n.\nnext\n(\n3\n);\n\n\nsubject\n.\nnext\n(\n4\n);\n\n\n\nsubject\n.\nsubscribe\n({\n\n  \nnext\n:\n \n(\nv\n)\n \n=\n \nconsole\n.\nlog\n(\nobserverB: \n \n+\n \nv\n)\n\n\n});\n\n\n\nsubject\n.\nnext\n(\n5\n);\n\n\nsubject\n.\ncomplete\n();\n\n\n\n\n\nWith output:\n\n\nobserverA\n:\n \n5\n\n\nobserverB\n:\n \n5\n\n\n\n\n\nThe AsyncSubject is similar to the \nlast()\n operator, in that it waits for the \ncomplete\n notification in order to deliver a single value.", 
            "title": "Subject(\u4e3b\u4f53)"
        }, 
        {
            "location": "/subject/#_1", 
            "text": "\u4ec0\u4e48\u662f\u5bf9\u8c61\uff1f  An RxJS Subject is a special type of Observable that allows values to be multicasted to many Observers. While plain Observables are unicast (each subscribed Observer owns an independent execution of the Observable), Subjects are multicast.  A Subject is like an Observable, but can multicast to many Observers. Subjects are like EventEmitters: they maintain a registry of many listeners.  \u6bcf\u4e2a\u4e3b\u9898\u90fd\u662f\u53ef\u89c2\u5bdf\u7684\u3002  Given a Subject, you can  subscribe  to it, providing an Observer, which will start receiving values normally. From the perspective of the Observer, it cannot tell whether the Observable execution is coming from a plain unicast Observable or a Subject.  Internally to the Subject,  subscribe  does not invoke a new execution that delivers values. It simply registers the given Observer in a list of Observers, similarly to how  addListener  usually works in other libraries and languages.  \u6bcf\u4e2a\u4e3b\u9898\u90fd\u662f\u89c2\u5bdf\u8005\u3002  It is an object with the methods  next(v) ,  error(e) , and  complete() . To feed a new value to the Subject, just call  next(theValue) , and it will be multicasted to the Observers registered to listen to the Subject.  In the example below, we have two Observers attached to a Subject, and we feed some values to the Subject:  var   subject   =   new   Rx . Subject ();  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerB:    +   v )  });  subject . next ( 1 );  subject . next ( 2 );   With the following output on the console:  observerA :   1  observerB :   1  observerA :   2  observerB :   2   Since a Subject is an Observer, this also means you may provide a Subject as the argument to the  subscribe  of any Observable, like the example below shows:  var   subject   =   new   Rx . Subject ();  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerB:    +   v )  });  var   observable   =   Rx . Observable . from ([ 1 ,   2 ,   3 ]);  observable . subscribe ( subject );   // You can subscribe providing a Subject   Which executes as:  observerA :   1  observerB :   1  observerA :   2  observerB :   2  observerA :   3  observerB :   3   With the approach above, we essentially just converted a unicast Observable execution to multicast, through the Subject. This demonstrates how Subjects are the only way of making any Observable execution be shared to multiple Observers.  There are also a few specializations of the  Subject  type:  BehaviorSubject ,  ReplaySubject , and  AsyncSubject .", 
            "title": "\u5bf9\u8c61"
        }, 
        {
            "location": "/subject/#_2", 
            "text": "A \"multicasted Observable\" passes notifications through a Subject which may have many subscribers, whereas a plain \"unicast Observable\" only sends notifications to a single Observer.  A multicasted Observable uses a Subject under the hood to make multiple Observers see the same Observable execution.  Under the hood, this is how the  multicast  operator works: Observers subscribe to an underlying Subject, and the Subject subscribes to the source Observable. The following example is similar to the previous example which used  observable.subscribe(subject) :  var   source   =   Rx . Observable . from ([ 1 ,   2 ,   3 ]);  var   subject   =   new   Rx . Subject ();  var   multicasted   =   source . pipe ( multicast ( subject ));  // These are, under the hood, `subject.subscribe({...})`:  multicasted . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  multicasted . subscribe ({ \n   next :   ( v )   =   console . log ( observerB:    +   v )  });  // This is, under the hood, `source.subscribe(subject)`:  multicasted . connect ();   multicast  returns an Observable that looks like a normal Observable, but works like a Subject when it comes to subscribing.  multicast  returns a  ConnectableObservable , which is simply an Observable with the  connect()  method.  The  connect()  method is important to determine exactly when the shared Observable execution  will start. Because  connect()  does  source.subscribe(subject)  under the hood,  connect()  returns a Subscription, which you can unsubscribe from in order to cancel the shared Observable execution.", 
            "title": "\u591a\u70b9\u89c2\u5bdf"
        }, 
        {
            "location": "/subject/#_3", 
            "text": "Calling  connect()  manually and handling the Subscription is often cumbersome. Usually, we want to  automatically  connect when the first Observer arrives, and automatically cancel the shared execution when the last Observer unsubscribes.  Consider the following example where subscriptions occur as outlined by this list:   First Observer subscribes to the multicasted Observable  The multicasted Observable is connected  The  next  value  0  is delivered to the first Observer  Second Observer subscribes to the multicasted Observable  The  next  value  1  is delivered to the first Observer  The  next  value  1  is delivered to the second Observer  First Observer unsubscribes from the multicasted Observable  The  next  value  2  is delivered to the second Observer  Second Observer unsubscribes from the multicasted Observable  The connection to the multicasted Observable is unsubscribed   To achieve that with explicit calls to  connect() , we write the following code:  var   source   =   Rx . Observable . interval ( 500 );  var   subject   =   new   Rx . Subject ();  var   multicasted   =   source . pipe ( multicast ( subject ));  var   subscription1 ,   subscription2 ,   subscriptionConnect ;  subscription1   =   multicasted . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  // We should call `connect()` here, because the first  // subscriber to `multicasted` is interested in consuming values  subscriptionConnect   =   multicasted . connect ();  setTimeout (()   =   { \n   subscription2   =   multicasted . subscribe ({ \n     next :   ( v )   =   console . log ( observerB:    +   v ) \n   });  },   600 );  setTimeout (()   =   { \n   subscription1 . unsubscribe ();  },   1200 );  // We should unsubscribe the shared Observable execution here,  // because `multicasted` would have no more subscribers after this  setTimeout (()   =   { \n   subscription2 . unsubscribe (); \n   subscriptionConnect . unsubscribe ();   // for the shared Observable execution  },   2000 );   If we wish to avoid explicit calls to  connect() , we can use ConnectableObservable's  refCount()  method (reference counting), which returns an Observable that keeps track of how many subscribers it has. When the number of subscribers increases from  0  to  1 , it will call  connect()  for us, which starts the shared execution. Only when the number of subscribers decreases from  1  to  0  will it be fully unsubscribed, stopping further execution.  refCount  makes the multicasted Observable automatically start executing when the first subscriber arrives, and stop executing when the last subscriber leaves.  Below is an example:  var   source   =   Rx . Observable . interval ( 500 );  var   subject   =   new   Rx . Subject ();  var   refCounted   =   source . pipe ( multicast ( subject ),   refCount ());  var   subscription1 ,   subscription2 ;  // This calls `connect()`, because  // it is the first subscriber to `refCounted`  console . log ( observerA subscribed );  subscription1   =   refCounted . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  setTimeout (()   =   { \n   console . log ( observerB subscribed ); \n   subscription2   =   refCounted . subscribe ({ \n     next :   ( v )   =   console . log ( observerB:    +   v ) \n   });  },   600 );  setTimeout (()   =   { \n   console . log ( observerA unsubscribed ); \n   subscription1 . unsubscribe ();  },   1200 );  // This is when the shared Observable execution will stop, because  // `refCounted` would have no more subscribers after this  setTimeout (()   =   { \n   console . log ( observerB unsubscribed ); \n   subscription2 . unsubscribe ();  },   2000 );   Which executes with the output:  observerA subscribed\nobserverA: 0\nobserverB subscribed\nobserverA: 1\nobserverB: 1\nobserverA unsubscribed\nobserverB: 2\nobserverB unsubscribed  The  refCount()  method only exists on ConnectableObservable, and it returns an  Observable , not another ConnectableObservable.", 
            "title": "\u53c2\u8003\u8ba1\u6570"
        }, 
        {
            "location": "/subject/#behaviorsubject", 
            "text": "One of the variants of Subjects is the  BehaviorSubject , which has a notion of \"the current value\". It stores the latest value emitted to its consumers, and whenever a new Observer subscribes, it will immediately receive the \"current value\" from the  BehaviorSubject .  BehaviorSubjects are useful for representing \"values over time\". For instance, an event stream of birthdays is a Subject, but the stream of a person's age would be a BehaviorSubject.  In the following example, the BehaviorSubject is initialized with the value  0  which the first Observer receives when it subscribes. The second Observer receives the value  2  even though it subscribed after the value  2  was sent.  var   subject   =   new   Rx . BehaviorSubject ( 0 );   // 0 is the initial value  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  subject . next ( 1 );  subject . next ( 2 );  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerB:    +   v )  });  subject . next ( 3 );   With output:  observerA :   0  observerA :   1  observerA :   2  observerB :   2  observerA :   3  observerB :   3", 
            "title": "BehaviorSubject"
        }, 
        {
            "location": "/subject/#replaysubject", 
            "text": "A  ReplaySubject  is similar to a  BehaviorSubject  in that it can send old values to new subscribers, but it can also  record  a part of the Observable execution.  A  ReplaySubject  records multiple values from the Observable execution and replays them to new subscribers.  When creating a  ReplaySubject , you can specify how many values to replay:  var   subject   =   new   Rx . ReplaySubject ( 3 );   // buffer 3 values for new subscribers  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  subject . next ( 1 );  subject . next ( 2 );  subject . next ( 3 );  subject . next ( 4 );  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerB:    +   v )  });  subject . next ( 5 );   With output:  observerA :   1  observerA :   2  observerA :   3  observerA :   4  observerB :   2  observerB :   3  observerB :   4  observerA :   5  observerB :   5   You can also specify a  window time  in milliseconds, besides of the buffer size, to determine how old the recorded values can be. In the following example we use a large buffer size of  100 , but a window time parameter of just  500  milliseconds.   var   subject   =   new   Rx . ReplaySubject ( 100 ,   500   /* windowTime */ );  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  var   i   =   1 ;  setInterval (()   =   subject . next ( i ++ ),   200 );  setTimeout (()   =   { \n   subject . subscribe ({ \n     next :   ( v )   =   console . log ( observerB:    +   v ) \n   });  },   1000 );   With the following output where the second Observer gets events  3 ,  4  and  5  that happened in the last  500  milliseconds prior to its subscription:  observerA :   1  observerA :   2  observerA :   3  observerA :   4  observerA :   5  observerB :   3  observerB :   4  observerB :   5  observerA :   6  observerB :   6  ...", 
            "title": "ReplaySubject"
        }, 
        {
            "location": "/subject/#asyncsubject", 
            "text": "The AsyncSubject is a variant where only the last value of the Observable execution is sent to its observers, and only when the execution completes.  var   subject   =   new   Rx . AsyncSubject ();  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerA:    +   v )  });  subject . next ( 1 );  subject . next ( 2 );  subject . next ( 3 );  subject . next ( 4 );  subject . subscribe ({ \n   next :   ( v )   =   console . log ( observerB:    +   v )  });  subject . next ( 5 );  subject . complete ();   With output:  observerA :   5  observerB :   5   The AsyncSubject is similar to the  last()  operator, in that it waits for the  complete  notification in order to deliver a single value.", 
            "title": "AsyncSubject"
        }, 
        {
            "location": "/scheduler/", 
            "text": "\u8c03\u5ea6\n\n\nWhat is a Scheduler?\n A scheduler controls when a subscription starts and when notifications are delivered. It consists of three components.\n\n\n\n\nA Scheduler is a data structure.\n It knows how to store and queue tasks based on priority or other criteria.\n\n\nA Scheduler is an execution context.\n It denotes where and when the task is executed (e.g. immediately, or in another callback mechanism such as setTimeout or process.nextTick, or the animation frame).\n\n\nA Scheduler has a (virtual) clock.\n It provides a notion of \"time\" by a getter method \nnow()\n on the scheduler. Tasks being scheduled on a particular scheduler will adhere only to the time denoted by that clock.\n\n\n\n\nA Scheduler lets you define in what execution context will an Observable deliver notifications to its Observer.\n\n\nIn the example below, we take the usual simple Observable that emits values \n1\n, \n2\n, \n3\n synchronously, and use the operator \nobserveOn\n to specify the \nasync\n scheduler to use for delivering those values.\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \n(\nobserver\n)\n \n{\n\n  \nobserver\n.\nnext\n(\n1\n);\n\n  \nobserver\n.\nnext\n(\n2\n);\n\n  \nobserver\n.\nnext\n(\n3\n);\n\n  \nobserver\n.\ncomplete\n();\n\n\n})\n\n\n.\nobserveOn\n(\nRx\n.\nScheduler\n.\nasync\n);\n\n\n\nconsole\n.\nlog\n(\njust before subscribe\n);\n\n\nobservable\n.\nsubscribe\n({\n\n  \nnext\n:\n \nx\n \n=\n \nconsole\n.\nlog\n(\ngot value \n \n+\n \nx\n),\n\n  \nerror\n:\n \nerr\n \n=\n \nconsole\n.\nerror\n(\nsomething wrong occurred: \n \n+\n \nerr\n),\n\n  \ncomplete\n:\n \n()\n \n=\n \nconsole\n.\nlog\n(\ndone\n),\n\n\n});\n\n\nconsole\n.\nlog\n(\njust after subscribe\n);\n\n\n\n\n\nWhich executes with the output:\n\n\njust before subscribe\njust after subscribe\ngot value 1\ngot value 2\ngot value 3\ndone\n\n\n\n\nNotice how the notifications \ngot value...\n were delivered after \njust after subscribe\n, which is different to the default behavior we have seen so far. This is because \nobserveOn(Rx.Scheduler.async)\n introduces a proxy Observer between \nObservable.create\n and the final Observer. Let's rename some identifiers to make that distinction obvious in the example code:\n\n\nvar\n \nobservable\n \n=\n \nRx\n.\nObservable\n.\ncreate\n(\nfunction\n \n(\nproxyObserver\n)\n \n{\n\n  \nproxyObserver\n.\nnext\n(\n1\n);\n\n  \nproxyObserver\n.\nnext\n(\n2\n);\n\n  \nproxyObserver\n.\nnext\n(\n3\n);\n\n  \nproxyObserver\n.\ncomplete\n();\n\n\n})\n\n\n.\nobserveOn\n(\nRx\n.\nScheduler\n.\nasync\n);\n\n\n\nvar\n \nfinalObserver\n \n=\n \n{\n\n  \nnext\n:\n \nx\n \n=\n \nconsole\n.\nlog\n(\ngot value \n \n+\n \nx\n),\n\n  \nerror\n:\n \nerr\n \n=\n \nconsole\n.\nerror\n(\nsomething wrong occurred: \n \n+\n \nerr\n),\n\n  \ncomplete\n:\n \n()\n \n=\n \nconsole\n.\nlog\n(\ndone\n),\n\n\n};\n\n\n\nconsole\n.\nlog\n(\njust before subscribe\n);\n\n\nobservable\n.\nsubscribe\n(\nfinalObserver\n);\n\n\nconsole\n.\nlog\n(\njust after subscribe\n);\n\n\n\n\n\nThe \nproxyObserver\n is created in \nobserveOn(Rx.Scheduler.async)\n, and its \nnext(val)\n function is approximately the following:\n\n\nvar\n \nproxyObserver\n \n=\n \n{\n\n  \nnext\n:\n \n(\nval\n)\n \n=\n \n{\n\n    \nRx\n.\nScheduler\n.\nasync\n.\nschedule\n(\n\n      \n(\nx\n)\n \n=\n \nfinalObserver\n.\nnext\n(\nx\n),\n\n      \n0\n \n/* delay */\n,\n\n      \nval\n \n/* will be the x for the function above */\n\n    \n);\n\n  \n},\n\n\n  \n// ...\n\n\n}\n\n\n\n\n\nThe \nasync\n Scheduler operates with a \nsetTimeout\n or \nsetInterval\n, even if the given \ndelay\n was zero. As usual, in JavaScript, \nsetTimeout(fn, 0)\n is known to run the function \nfn\n earliest on the next event loop iteration. This explains why \ngot value 1\n is delivered to the \nfinalObserver\n after \njust after subscribe\n happened.\n\n\nThe \nschedule()\n method of a Scheduler takes a \ndelay\n argument, which refers to a quantity of time relative to the Scheduler's own internal clock. A Scheduler's clock need not have any relation to the actual wall-clock time. This is how temporal operators like \ndelay\n operate not on actual time, but on time dictated by the Scheduler's clock. This is specially useful in testing, where a \nvirtual time Scheduler\n may be used to fake wall-clock time while in reality executing scheduled tasks synchronously.\n\n\nScheduler Types\n\n\nThe \nasync\n Scheduler is one of the built-in schedulers provided by RxJS. Each of these can be created and returned by using static properties of the \nScheduler\n object.\n\n\n\n\n\n\n\n\nScheduler\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\nnull\n\n\nBy not passing any scheduler, notifications are delivered synchronously and recursively. Use this for constant-time operations or tail recursive operations.\n\n\n\n\n\n\nRx.Scheduler.queue\n\n\nSchedules on a queue in the current event frame (trampoline scheduler). Use this for iteration operations.\n\n\n\n\n\n\nRx.Scheduler.asap\n\n\nSchedules on the micro task queue, which uses the fastest transport mechanism available, either Node.js' \nprocess.nextTick()\n or Web Worker MessageChannel or setTimeout or others. Use this for asynchronous conversions.\n\n\n\n\n\n\nRx.Scheduler.async\n\n\nSchedules work with \nsetInterval\n. Use this for time-based operations.\n\n\n\n\n\n\n\n\nUsing Schedulers\n\n\nYou may have already used schedulers in your RxJS code without explicitly stating the type of schedulers to be used. This is because all Observable operators that deal with concurrency have optional schedulers. If you do not provide the scheduler, RxJS will pick a default scheduler by using the principle of least concurrency. This means that the scheduler which introduces the least amount of concurrency that satisfies the needs of the operator is chosen. For example, for operators returning an observable with a finite and small number of messages, RxJS uses no Scheduler, i.e. \nnull\n or \nundefined\n.  For operators returning a potentially large or infinite number of messages, \nqueue\n Scheduler is used. For operators which use timers, \nasync\n is used.\n\n\nBecause RxJS uses the least concurrency scheduler, you can pick a different scheduler if you want to introduce concurrency for performance purpose.  To specify a particular scheduler, you can use those operator methods that take a scheduler, e.g., \nfrom([10, 20, 30], Rx.Scheduler.async)\n.\n\n\nStatic creation operators usually take a Scheduler as argument.\n For instance, \nfrom(array, scheduler)\n lets you specify the Scheduler to use when delivering each notification converted from the \narray\n. It is usually the last argument to the operator. The following static creation operators take a Scheduler argument:\n\n\n\n\nbindCallback\n\n\nbindNodeCallback\n\n\ncombineLatest\n\n\nconcat\n\n\nempty\n\n\nfrom\n\n\nfromPromise\n\n\ninterval\n\n\nmerge\n\n\nof\n\n\nrange\n\n\nthrow\n\n\ntimer\n\n\n\n\nUse \nsubscribeOn\n to schedule in what context will the \nsubscribe()\n call happen.\n By default, a \nsubscribe()\n call on an Observable will happen synchronously and immediately. However, you may delay or schedule the actual subscription to happen on a given Scheduler, using the instance operator \nsubscribeOn(scheduler)\n, where \nscheduler\n is an argument you provide.\n\n\nUse \nobserveOn\n to schedule in what context will notifications be delivered.\n As we saw in the examples above, instance operator \nobserveOn(scheduler)\n introduces a mediator Observer between the source Observable and the destination Observer, where the mediator schedules calls to the destination Observer using your given \nscheduler\n.\n\n\nInstance operators may take a Scheduler as argument.\n\n\nTime-related operators like \nbufferTime\n, \ndebounceTime\n, \ndelay\n, \nauditTime\n, \nsampleTime\n, \nthrottleTime\n, \ntimeInterval\n, \ntimeout\n, \ntimeoutWith\n, \nwindowTime\n all take a Scheduler as the last argument, and otherwise operate by default on the \nRx.Scheduler.async\n Scheduler.\n\n\nOther instance operators that take a Scheduler as argument: \ncache\n, \ncombineLatest\n, \nconcat\n, \nexpand\n, \nmerge\n, \npublishReplay\n, \nstartWith\n.\n\n\nNotice that both \ncache\n and \npublishReplay\n accept a Scheduler because they utilize a ReplaySubject. The constructor of a ReplaySubjects takes an optional Scheduler as the last argument because ReplaySubject may deal with time, which only makes sense in the context of a Scheduler. By default, a ReplaySubject uses the \nqueue\n Scheduler to provide a clock.", 
            "title": "Scheduler(\u8c03\u5ea6\u7a0b\u5e8f)"
        }, 
        {
            "location": "/scheduler/#_1", 
            "text": "What is a Scheduler?  A scheduler controls when a subscription starts and when notifications are delivered. It consists of three components.   A Scheduler is a data structure.  It knows how to store and queue tasks based on priority or other criteria.  A Scheduler is an execution context.  It denotes where and when the task is executed (e.g. immediately, or in another callback mechanism such as setTimeout or process.nextTick, or the animation frame).  A Scheduler has a (virtual) clock.  It provides a notion of \"time\" by a getter method  now()  on the scheduler. Tasks being scheduled on a particular scheduler will adhere only to the time denoted by that clock.   A Scheduler lets you define in what execution context will an Observable deliver notifications to its Observer.  In the example below, we take the usual simple Observable that emits values  1 ,  2 ,  3  synchronously, and use the operator  observeOn  to specify the  async  scheduler to use for delivering those values.  var   observable   =   Rx . Observable . create ( function   ( observer )   { \n   observer . next ( 1 ); \n   observer . next ( 2 ); \n   observer . next ( 3 ); \n   observer . complete ();  })  . observeOn ( Rx . Scheduler . async );  console . log ( just before subscribe );  observable . subscribe ({ \n   next :   x   =   console . log ( got value    +   x ), \n   error :   err   =   console . error ( something wrong occurred:    +   err ), \n   complete :   ()   =   console . log ( done ),  });  console . log ( just after subscribe );   Which executes with the output:  just before subscribe\njust after subscribe\ngot value 1\ngot value 2\ngot value 3\ndone  Notice how the notifications  got value...  were delivered after  just after subscribe , which is different to the default behavior we have seen so far. This is because  observeOn(Rx.Scheduler.async)  introduces a proxy Observer between  Observable.create  and the final Observer. Let's rename some identifiers to make that distinction obvious in the example code:  var   observable   =   Rx . Observable . create ( function   ( proxyObserver )   { \n   proxyObserver . next ( 1 ); \n   proxyObserver . next ( 2 ); \n   proxyObserver . next ( 3 ); \n   proxyObserver . complete ();  })  . observeOn ( Rx . Scheduler . async );  var   finalObserver   =   { \n   next :   x   =   console . log ( got value    +   x ), \n   error :   err   =   console . error ( something wrong occurred:    +   err ), \n   complete :   ()   =   console . log ( done ),  };  console . log ( just before subscribe );  observable . subscribe ( finalObserver );  console . log ( just after subscribe );   The  proxyObserver  is created in  observeOn(Rx.Scheduler.async) , and its  next(val)  function is approximately the following:  var   proxyObserver   =   { \n   next :   ( val )   =   { \n     Rx . Scheduler . async . schedule ( \n       ( x )   =   finalObserver . next ( x ), \n       0   /* delay */ , \n       val   /* will be the x for the function above */ \n     ); \n   }, \n\n   // ...  }   The  async  Scheduler operates with a  setTimeout  or  setInterval , even if the given  delay  was zero. As usual, in JavaScript,  setTimeout(fn, 0)  is known to run the function  fn  earliest on the next event loop iteration. This explains why  got value 1  is delivered to the  finalObserver  after  just after subscribe  happened.  The  schedule()  method of a Scheduler takes a  delay  argument, which refers to a quantity of time relative to the Scheduler's own internal clock. A Scheduler's clock need not have any relation to the actual wall-clock time. This is how temporal operators like  delay  operate not on actual time, but on time dictated by the Scheduler's clock. This is specially useful in testing, where a  virtual time Scheduler  may be used to fake wall-clock time while in reality executing scheduled tasks synchronously.", 
            "title": "\u8c03\u5ea6"
        }, 
        {
            "location": "/scheduler/#scheduler-types", 
            "text": "The  async  Scheduler is one of the built-in schedulers provided by RxJS. Each of these can be created and returned by using static properties of the  Scheduler  object.     Scheduler  Purpose      null  By not passing any scheduler, notifications are delivered synchronously and recursively. Use this for constant-time operations or tail recursive operations.    Rx.Scheduler.queue  Schedules on a queue in the current event frame (trampoline scheduler). Use this for iteration operations.    Rx.Scheduler.asap  Schedules on the micro task queue, which uses the fastest transport mechanism available, either Node.js'  process.nextTick()  or Web Worker MessageChannel or setTimeout or others. Use this for asynchronous conversions.    Rx.Scheduler.async  Schedules work with  setInterval . Use this for time-based operations.", 
            "title": "Scheduler Types"
        }, 
        {
            "location": "/scheduler/#using-schedulers", 
            "text": "You may have already used schedulers in your RxJS code without explicitly stating the type of schedulers to be used. This is because all Observable operators that deal with concurrency have optional schedulers. If you do not provide the scheduler, RxJS will pick a default scheduler by using the principle of least concurrency. This means that the scheduler which introduces the least amount of concurrency that satisfies the needs of the operator is chosen. For example, for operators returning an observable with a finite and small number of messages, RxJS uses no Scheduler, i.e.  null  or  undefined .  For operators returning a potentially large or infinite number of messages,  queue  Scheduler is used. For operators which use timers,  async  is used.  Because RxJS uses the least concurrency scheduler, you can pick a different scheduler if you want to introduce concurrency for performance purpose.  To specify a particular scheduler, you can use those operator methods that take a scheduler, e.g.,  from([10, 20, 30], Rx.Scheduler.async) .  Static creation operators usually take a Scheduler as argument.  For instance,  from(array, scheduler)  lets you specify the Scheduler to use when delivering each notification converted from the  array . It is usually the last argument to the operator. The following static creation operators take a Scheduler argument:   bindCallback  bindNodeCallback  combineLatest  concat  empty  from  fromPromise  interval  merge  of  range  throw  timer   Use  subscribeOn  to schedule in what context will the  subscribe()  call happen.  By default, a  subscribe()  call on an Observable will happen synchronously and immediately. However, you may delay or schedule the actual subscription to happen on a given Scheduler, using the instance operator  subscribeOn(scheduler) , where  scheduler  is an argument you provide.  Use  observeOn  to schedule in what context will notifications be delivered.  As we saw in the examples above, instance operator  observeOn(scheduler)  introduces a mediator Observer between the source Observable and the destination Observer, where the mediator schedules calls to the destination Observer using your given  scheduler .  Instance operators may take a Scheduler as argument.  Time-related operators like  bufferTime ,  debounceTime ,  delay ,  auditTime ,  sampleTime ,  throttleTime ,  timeInterval ,  timeout ,  timeoutWith ,  windowTime  all take a Scheduler as the last argument, and otherwise operate by default on the  Rx.Scheduler.async  Scheduler.  Other instance operators that take a Scheduler as argument:  cache ,  combineLatest ,  concat ,  expand ,  merge ,  publishReplay ,  startWith .  Notice that both  cache  and  publishReplay  accept a Scheduler because they utilize a ReplaySubject. The constructor of a ReplaySubjects takes an optional Scheduler as the last argument because ReplaySubject may deal with time, which only makes sense in the context of a Scheduler. By default, a ReplaySubject uses the  queue  Scheduler to provide a clock.", 
            "title": "Using Schedulers"
        }, 
        {
            "location": "/pipeable-operators/", 
            "text": "pipable \u64cd\u4f5c\u7b26\n\n\n\u4ece5.5\u7248\u5f00\u59cb\uff0c\u6211\u4eec\u53d1\u5e03\u4e86\"pipeable operators\"\uff0c\u53ef\u4ee5\u5728\nrxjs/operators\n\u4e2d\u8bbf\u95ee\uff08\u6ce8\u610f\u590d\u6570\u7684\"operators\"\uff09\u3002\n\u4e0e\nrxjs/add/operator/*\n\u4e2d\u7684\"patch\"\u64cd\u4f5c\u7b26\u76f8\u6bd4\uff0c\u8fd9\u4ec5\u4ec5\u662f\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5\u6765\u5f15\u5165\u60a8\u6240\u9700\u7684\u64cd\u4f5c\u7b26\u3002\n\n\n\n\n\u5728\u4e0d\u6539\u53d8\u6784\u5efa\u8fc7\u7a0b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528`rxjs/operators`\u53ef\u4ee5\u4ea7\u751f\u66f4\u5927\u7684\u5305\u3002\n\n\u8bf7\u53c2\u9605\u4e0b\u9762\u7684[\u5df2\u77e5\u95ee\u9898](#known-issues)\u90e8\u5206\u3002\n\n\n\n\n\n\n\n\u91cd\u547d\u540d\u64cd\u4f5c\u7b26\n\n\n\u7531\u4e8e\u64cd\u4f5c\u7b26\u72ec\u7acb\u4e8eObservable\u53ef\u7528\uff0c\u64cd\u4f5c\u7b26\u540d\u79f0\u4e0d\u80fd\u4e0eJavaScript\u5173\u952e\u5b57\u9650\u5236\u51b2\u7a81\n\u56e0\u6b64\uff0c\u67d0\u4e9b\u64cd\u4f5c\u7b26\u7684\u53ef\u79fb\u690d\u7248\u672c\u7684\u540d\u79f0\u5df2\u66f4\u6539\u3002\n\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u662f\uff1a\n\n\n\n\ndo\n -\n \ntap\n\n\ncatch\n -\n \ncatchError\n\n\nswitch\n -\n \nswitchAll\n\n\nfinally\n -\n \nfinalize\n\n\n\n\nlet\n\u8fd0\u7b97\u7b26\u73b0\u5728\u6210\u4e3a\nObservable\n\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u4e0d\u80fd\u7528\u4f5c\u7ba1\u9053\n\n\nsource$.let(myOperator) -\n source$.pipe(myOperator)\n\n\n\u8bf7\u53c2\u9605\u4e0b\u9762\u7684\"[\u5efa\u7acb\u60a8\u81ea\u5df1\u7684\u64cd\u4f5c\u7b26(#build-your-own-operators-easily)]\"\u3002\n\n\n\u524d\u4e00\u4e2a\ntoPromise()\n\"operator\"\u5df2\u88ab\u5220\u9664\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7b26\u8fd4\u56de\u4e00\u4e2a\nObservable\n\uff0c\u800c\u4e0d\u662f\nPromise\n\u3002\n\u73b0\u5728\u6709\u4e00\u4e2a\nObservable.toPromise\uff08\uff09\n\u5b9e\u4f8b\u65b9\u6cd5\n\n\n\u56e0\u4e3a\nthrow\n\u662f\u4e00\u4e2a\u5173\u952e\u8bcd\uff0c\u60a8\u53ef\u4ee5\u5728\nrxjs/observable/throw'\n\u7684\nimport { _throw } from 'rxjs/observable/throw'\n\u4e4b\u540e\u4f7f\u7528\n_throw\n\u3002\n\n\n\u5982\u679c\u9886\u5148\u7684\n_\n\u56f0\u6270\u4f60(\u56e0\u4e3a\u524d\u5bfc\n_\n\u901a\u5e38\u610f\u5473\u7740\u201c\nInternal  -  Do not use\n\u201d), \u4f60\u53ef\u4ee5\u505a\u5982\u4e0b:\n\n\nimport\n \n{\n \nErrorObservable\n \n}\n \nfrom\n \nrxjs/observable/ErrorObservable\n;\n\n\n...\n\n\nconst\n \ne\n \n=\n \nErrorObservable\n.\ncreate\n(\nnew\n \nError\n(\nMy bad\n));\n\n\nconst\n \ne2\n \n=\n \nnew\n \nErrorObservable\n(\nnew\n \nError\n(\nMy bad too\n));\n\n\n\n\n\n\u4e3a\u4ec0\u4e48\uff1f\n\n\nProblems with the patched operators for dot-chaining are:\n\n\n\n\n\n\nAny library that imports a patch operator will augment the \nObservable.prototype\n for all consumers of that library, creating blind dependencies. If the library removes their usage, they unknowingly break everyone else. With pipeables, you have to import the operators you need into each file you use them in.\n\n\n\n\n\n\nOperators patched directly onto the prototype are not \"tree-shakeable\" by tools like rollup or webpack. Pipeable operators will be as they are just functions pulled in from modules directly.\n\n\n\n\n\n\nUnused operators that are being imported in apps cannot be detected reliably by any sort of build tooling or lint rule. That means that you might import \nscan\n, but stop using it, and it's still being added to your output bundle. With pipeable operators, if you're not using it, a lint rule can pick it up for you.\n\n\n\n\n\n\nFunctional composition is awesome. Building your own custom operators becomes much, much easier, and now they work and look just like all other operators from rxjs. You don't need to extend Observable or override \nlift\n anymore.\n\n\n\n\n\n\n\u4ec0\u4e48\uff1f\n\n\nWhat is a pipeable operator? Simply put, a function that can be used with the current \nlet\n operator. It used to be the origin of the name (\"lettable\"), but that was confusing and we call them \"pipeable\" now because they're intended to be used with the \npipe\n utility.\nA pipeable operator is basically any function that returns a function with the signature: \nT, R\n(source: Observable\nT\n) =\n Observable\nR\n.\n\n\nThere is a \npipe\n method built into \nObservable\n now at \nObservable.prototype.pipe\n that \u0441an be used to compose the operators in similar manner to what you're used to with dot-chaining (shown below).\n\n\nThere is also a \npipe\n utility function at \nrxjs/util/pipe\n that can be used to build reusable pipeable operators from other pipeable operators.\n\n\n\u7528\u6cd5\n\n\nYou pull in any operator you need from one spot, under \n'rxjs/operators'\n (\nplural!\n).\nIt's also recommended to pull in the Observable creation methods you need directly as shown below with \nrange\n:\n\n\nimport\n \n{\n \nrange\n \n}\n \nfrom\n \nrxjs/observable/range\n;\n\n\nimport\n \n{\n \nmap\n,\n \nfilter\n,\n \nscan\n \n}\n \nfrom\n \nrxjs/operators\n;\n\n\n\nconst\n \nsource$\n \n=\n \nrange\n(\n0\n,\n \n10\n);\n\n\n\nsource$\n.\npipe\n(\n\n  \nfilter\n(\nx\n \n=\n \nx\n \n%\n \n2\n \n===\n \n0\n),\n\n  \nmap\n(\nx\n \n=\n \nx\n \n+\n \nx\n),\n\n  \nscan\n((\nacc\n,\n \nx\n)\n \n=\n \nacc\n \n+\n \nx\n,\n \n0\n)\n\n\n)\n\n\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n))\n\n\n\n\n\n\u8f7b\u677e\u6784\u5efa\u60a8\u81ea\u5df1\u7684\u64cd\u4f5c\u7b26\n\n\nYou, in fact, could \nalways\n do this with \nlet\n... but building your own operator is as simple as writing a function now.\nNotice, that you can compose your custom operator in with other rxjs operators seamlessly.\n\n\nimport\n \n{\n \ninterval\n \n}\n \nfrom\n \nrxjs/observable/interval\n;\n\n\nimport\n \n{\n \nfilter\n,\n \nmap\n,\n \ntake\n,\n \ntoArray\n \n}\n \nfrom\n \nrxjs/operators\n;\n\n\n\n/**\n\n\n * an operator that takes every Nth value\n\n\n */\n\n\nconst\n \ntakeEveryNth\n \n=\n \n(\nn\n: \nnumber\n)\n \n=\n \nT\n(\nsource\n: \nObservable\nT\n)\n \n=\n\n  \nnew\n \nObservable\nT\n(\nobserver\n \n=\n \n{\n\n    \nlet\n \ncount\n \n=\n \n0\n;\n\n    \nreturn\n \nsource\n.\nsubscribe\n({\n\n      \nnext\n(\nx\n)\n \n{\n\n        \nif\n \n(\ncount\n++\n \n%\n \nn\n \n===\n \n0\n)\n \nobserver\n.\nnext\n(\nx\n);\n\n      \n},\n\n      \nerror\n(\nerr\n)\n \n{\n \nobserver\n.\nerror\n(\nerr\n);\n \n},\n\n      \ncomplete() {\n \nobserver\n.\ncomplete\n();\n \n}\n\n    \n})\n\n  \n});\n\n\n\n/**\n\n\n * You can also use an existing operator like so\n\n\n */\n\n\nconst\n \ntakeEveryNthSimple\n \n=\n \n(\nn\n: \nnumber\n)\n \n=\n \nT\n(\nsource\n: \nObservable\nT\n)\n \n=\n\n  \nsource\n.\npipe\n(\nfilter\n((\nvalue\n,\n \nindex\n)\n \n=\n \nindex\n \n%\n \nn\n \n===\n \n0\n \n))\n\n\n\n/**\n\n\n * And since pipeable operators return functions, you can further simplify like so\n\n\n */\n\n\nconst\n \ntakeEveryNthSimplest\n \n=\n \n(\nn\n: \nnumber\n)\n \n=\n \nfilter\n((\nvalue\n,\n \nindex\n)\n \n=\n \nindex\n \n%\n \nn\n \n===\n \n0\n);\n\n\n\ninterval\n(\n1000\n).\npipe\n(\n\n  \ntakeEveryNth\n(\n2\n),\n\n  \nmap\n(\nx\n \n=\n \nx\n \n+\n \nx\n),\n\n  \ntakeEveryNthSimple\n(\n3\n),\n\n  \nmap\n(\nx\n \n=\n \nx\n \n*\n \nx\n),\n\n  \ntakeEveryNthSimplest\n(\n4\n),\n\n  \ntake\n(\n3\n),\n\n  \ntoArray\n()\n\n\n)\n\n\n.\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n));\n\n\n// [0, 2304, 9216]\n\n\n\n\n\n\u5df2\u77e5\u7684\u95ee\u9898\n\n\nTypeScript \n 2.4\n\n\n\u5728TypeScript 2.3\u53ca\u66f4\u4f4e\u7248\u672c\u4e2d\uff0c\u9700\u8981\u5c06\u7c7b\u578b\u6dfb\u52a0\u5230\u4f20\u9012\u7ed9\u8fd0\u7b97\u7b26\u7684\u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u5728TypeScript 2.4\u4e4b\u524d\u65e0\u6cd5\u63a8\u65ad\u7c7b\u578b\u3002\n\u5728TypeScript 2.4\u4e2d\uff0c\u7c7b\u578b\u5c06\u901a\u8fc7\u5408\u6210\u6765\u6b63\u786e\u63a8\u65ad\u3002\n\n\nTS 2.3\u53ca\u4ee5\u4e0b\n\n\nrange\n(\n0\n,\n \n10\n).\npipe\n(\n\n  \nmap\n((\nn\n: \nnumber\n)\n \n=\n \nn\n \n+\n \n!\n),\n\n  \nmap\n((\ns\n: \nstring\n)\n \n=\n \nHello, \n \n+\n \ns\n),\n\n\n).\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n))\n\n\n\n\n\nTS 2.4\u53ca\u4ee5\u4e0a\n\n\nrange\n(\n0\n,\n \n10\n).\npipe\n(\n\n  \nmap\n(\nn\n \n=\n \nn\n \n+\n \n!\n),\n\n  \nmap\n(\ns\n \n=\n \nHello, \n \n+\n \ns\n),\n\n\n).\nsubscribe\n(\nx\n \n=\n \nconsole\n.\nlog\n(\nx\n))\n\n\n\n\n\n\u6784\u5efa\u548c\u6811\u6728\u5207\u6362\n\n\nWhen importing from a manifest (or re-export) file, an application bundle can sometimes grow.\nPipeable operators can now be imported from \nrxjs/operators\n, but doing so without changing your build process will often result in a larger application bundle.\nThis is because by default \nrxjs/operators\n will resolve to the CommonJS output of rxjs.\n\n\nIn order to use the new pipeable operators and not gain bundle size, you will need to change your Webpack configuration.\nThis will only work with Webpack 3+ as it relies on the new \nModuleConcatenationPlugin\n from Webpack 3.\n\n\npath-mapping\n\n\nPublished along with rxjs 5.5 is builds of rxjs in ECMAScript Module format (imports and exports) with both ES5 and ES2015 language level.\nYou can find these distributions in \nnode_modules/rxjs/_esm5\n and \nnode_modules/rxjs/_esm2015\n (\"esm\" stands for ECMAScript Modules and the number \"5\" or \"2015\" is for the ES language level).\nIn your application source code, you should import from \nrxjs/operators\n, but in your Webpack configuration file you will need to re-map imports to the ESM5 (or ESM2015) version.\n\n\nIf you \nrequire('rxjs/_esm5/path-mapping')\n, you will receive a function that returns an object of key-value pairs mapping each input to it's file location on disk.\nUtilize this mapping as follows:\n\n\nwebpack.config.js\n\n\nSimple configuration:\n\n\nconst\n \nrxPaths\n \n=\n \nrequire\n(\nrxjs/_esm5/path-mapping\n);\n\n\nconst\n \nwebpack\n \n=\n \nrequire\n(\nwebpack\n);\n\n\nconst\n \npath\n \n=\n \nrequire\n(\npath\n);\n\n\n\nmodule\n.\nexports\n \n=\n \n{\n\n  \nentry\n:\n \nindex.js\n,\n\n  \noutput\n:\n \nbundle.js\n,\n\n  \nresolve\n:\n \n{\n\n    \n// Use the \nalias\n key to resolve to an ESM distribution\n\n    \nalias\n:\n \nrxPaths\n()\n\n  \n},\n\n  \nplugins\n:\n \n[\n\n    \nnew\n \nwebpack\n.\noptimize\n.\nModuleConcatenationPlugin\n()\n\n  \n]\n\n\n};\n\n\n\n\n\nMore complete configuration (closer to a real-world scenario):\n\n\nconst\n \nwebpack\n \n=\n \nrequire\n(\nwebpack\n);\n\n\nconst\n \npath\n \n=\n \nrequire\n(\npath\n);\n\n\nconst\n \nHtmlWebpackPlugin\n \n=\n \nrequire\n(\nhtml-webpack-plugin\n);\n\n\nconst\n \nDashboardPlugin\n \n=\n \nrequire\n(\nwebpack-dashboard/plugin\n);\n\n\nconst\n \nnodeEnv\n \n=\n \nprocess\n.\nenv\n.\nNODE_ENV\n \n||\n \ndevelopment\n;\n\n\nconst\n \nisProd\n \n=\n \nnodeEnv\n \n===\n \nproduction\n;\n\n\nconst\n \nrxPaths\n \n=\n \nrequire\n(\nrxjs/_esm5/path-mapping\n);\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \ndevtool\n:\n \nisProd\n \n?\n \nhidden-source-map\n \n:\n \ncheap-eval-source-map\n,\n\n    \ncontext\n:\n \npath\n.\nresolve\n(\n./src\n),\n\n    \nentry\n:\n \n{\n\n        \napp\n:\n \n./index.ts\n,\n\n        \nvendor\n:\n \n./vendor.ts\n\n    \n},\n\n    \noutput\n:\n \n{\n\n        \npath\n:\n \npath\n.\nresolve\n(\n./dist\n),\n\n        \nfilename\n:\n \n[name].bundle.js\n,\n\n        \nsourceMapFilename\n:\n \n[name].map\n,\n\n        \ndevtoolModuleFilenameTemplate\n:\n \nfunction\n \n(\ninfo\n)\n \n{\n\n            \nreturn\n \nfile:///\n \n+\n \ninfo\n.\nabsoluteResourcePath\n;\n\n        \n}\n\n    \n},\n\n    \nmodule\n:\n \n{\n\n        \nrules\n:\n \n[\n\n            \n{\n \nenforce\n:\n \npre\n,\n \ntest\n:\n \n/\\.ts$|\\.tsx$/\n,\n \nexclude\n:\n \n[\nnode_modules\n],\n \nloader\n:\n \nts-loader\n \n},\n\n            \n{\n \ntest\n:\n \n/\\.html$/\n,\n \nloader\n:\n \nhtml\n \n},\n\n            \n{\n \ntest\n:\n \n/\\.css$/\n,\n \nloaders\n:\n \n[\nstyle\n,\n \ncss\n]\n \n}\n\n        \n]\n\n    \n},\n\n    \nresolve\n:\n \n{\n\n        \nextensions\n:\n \n[\n.ts\n,\n \n.js\n],\n\n        \nmodules\n:\n \n[\npath\n.\nresolve\n(\n./src\n),\n \nnode_modules\n],\n\n        \nalias\n:\n \nrxPaths\n()\n\n    \n},\n\n    \nplugins\n:\n \n[\n\n        \nnew\n \nwebpack\n.\nDefinePlugin\n({\n\n            \nprocess.env\n:\n \n{\n \n// eslint-disable-line quote-props\n\n                \nNODE_ENV\n:\n \nJSON\n.\nstringify\n(\nnodeEnv\n)\n\n            \n}\n\n        \n}),\n\n        \nnew\n \nwebpack\n.\nHashedModuleIdsPlugin\n(),\n\n        \nnew\n \nwebpack\n.\noptimize\n.\nModuleConcatenationPlugin\n(),\n\n        \nnew\n \nHtmlWebpackPlugin\n({\n\n            \ntitle\n:\n \nTypescript Webpack Starter\n,\n\n            \ntemplate\n:\n \n!!ejs-loader!src/index.html\n\n        \n}),\n\n        \nnew\n \nwebpack\n.\noptimize\n.\nCommonsChunkPlugin\n({\n\n            \nname\n:\n \nvendor\n,\n\n            \nminChunks\n:\n \nInfinity\n,\n\n            \nfilename\n:\n \nvendor.bundle.js\n\n        \n}),\n\n        \nnew\n \nwebpack\n.\noptimize\n.\nUglifyJsPlugin\n({\n\n            \nmangle\n:\n \nfalse\n,\n\n            \ncompress\n:\n \n{\n \nwarnings\n:\n \nfalse\n,\n \npure_getters\n:\n \ntrue\n,\n \npasses\n:\n \n3\n,\n \nscrew_ie8\n:\n \ntrue\n,\n \nsequences\n:\n \nfalse\n \n},\n\n            \noutput\n:\n \n{\n \ncomments\n:\n \nfalse\n,\n \nbeautify\n:\n \ntrue\n \n},\n\n            \nsourceMap\n:\n \nfalse\n\n        \n}),\n\n        \nnew\n \nDashboardPlugin\n(),\n\n        \nnew\n \nwebpack\n.\nLoaderOptionsPlugin\n({\n\n            \noptions\n:\n \n{\n\n                \ntslint\n:\n \n{\n\n                    \nemitErrors\n:\n \ntrue\n,\n\n                    \nfailOnHint\n:\n \ntrue\n\n                \n}\n\n            \n}\n\n        \n})\n\n    \n]\n\n\n};\n\n\n\nmodule\n.\nexports\n \n=\n \nconfig\n;\n\n\n\n\n\n\u65e0\u6cd5\u63a7\u5236\u6784\u5efa\u8fc7\u7a0b\n\n\nIf you have no control over your build process (or are unable to upgrade to Webpack 3+), the above solution will not work.\nTherefore importing from \nrxjs/operators\n will likely make your application bundle larger.\nHowever, there's still a way you can use pipeable operators.\nYou will have to use deep imports, similar to how you import prior to version 5.5 and pipeable operators:\n\n\nimport\n \n{\n \nmap\n,\n \nfilter\n,\n \nreduce\n \n}\n \nfrom\n \nrxjs/operators\n;\n\n\n\n\n\nbecomes:\n\n\nimport\n \n{\n \nmap\n \n}\n \nfrom\n \nrxjs/operators/map\n;\n\n\nimport\n \n{\n \nfilter\n \n}\n \nfrom\n \nrxjs/operators/filter\n;\n\n\nimport\n \n{\n \nreduce\n \n}\n \nfrom\n \nrxjs/operators/reduce\n;", 
            "title": "Pipeable \u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/pipeable-operators/#pipable", 
            "text": "\u4ece5.5\u7248\u5f00\u59cb\uff0c\u6211\u4eec\u53d1\u5e03\u4e86\"pipeable operators\"\uff0c\u53ef\u4ee5\u5728 rxjs/operators \u4e2d\u8bbf\u95ee\uff08\u6ce8\u610f\u590d\u6570\u7684\"operators\"\uff09\u3002\n\u4e0e rxjs/add/operator/* \u4e2d\u7684\"patch\"\u64cd\u4f5c\u7b26\u76f8\u6bd4\uff0c\u8fd9\u4ec5\u4ec5\u662f\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5\u6765\u5f15\u5165\u60a8\u6240\u9700\u7684\u64cd\u4f5c\u7b26\u3002   \u5728\u4e0d\u6539\u53d8\u6784\u5efa\u8fc7\u7a0b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528`rxjs/operators`\u53ef\u4ee5\u4ea7\u751f\u66f4\u5927\u7684\u5305\u3002\n\n\u8bf7\u53c2\u9605\u4e0b\u9762\u7684[\u5df2\u77e5\u95ee\u9898](#known-issues)\u90e8\u5206\u3002   \u91cd\u547d\u540d\u64cd\u4f5c\u7b26  \u7531\u4e8e\u64cd\u4f5c\u7b26\u72ec\u7acb\u4e8eObservable\u53ef\u7528\uff0c\u64cd\u4f5c\u7b26\u540d\u79f0\u4e0d\u80fd\u4e0eJavaScript\u5173\u952e\u5b57\u9650\u5236\u51b2\u7a81\n\u56e0\u6b64\uff0c\u67d0\u4e9b\u64cd\u4f5c\u7b26\u7684\u53ef\u79fb\u690d\u7248\u672c\u7684\u540d\u79f0\u5df2\u66f4\u6539\u3002\n\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u662f\uff1a   do  -   tap  catch  -   catchError  switch  -   switchAll  finally  -   finalize   let \u8fd0\u7b97\u7b26\u73b0\u5728\u6210\u4e3a Observable \u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u4e0d\u80fd\u7528\u4f5c\u7ba1\u9053  source$.let(myOperator) -  source$.pipe(myOperator)  \u8bf7\u53c2\u9605\u4e0b\u9762\u7684\"[\u5efa\u7acb\u60a8\u81ea\u5df1\u7684\u64cd\u4f5c\u7b26(#build-your-own-operators-easily)]\"\u3002  \u524d\u4e00\u4e2a toPromise() \"operator\"\u5df2\u88ab\u5220\u9664\uff0c\u56e0\u4e3a\u64cd\u4f5c\u7b26\u8fd4\u56de\u4e00\u4e2a Observable \uff0c\u800c\u4e0d\u662f Promise \u3002\n\u73b0\u5728\u6709\u4e00\u4e2a Observable.toPromise\uff08\uff09 \u5b9e\u4f8b\u65b9\u6cd5  \u56e0\u4e3a throw \u662f\u4e00\u4e2a\u5173\u952e\u8bcd\uff0c\u60a8\u53ef\u4ee5\u5728 rxjs/observable/throw' \u7684 import { _throw } from 'rxjs/observable/throw' \u4e4b\u540e\u4f7f\u7528 _throw \u3002  \u5982\u679c\u9886\u5148\u7684 _ \u56f0\u6270\u4f60(\u56e0\u4e3a\u524d\u5bfc _ \u901a\u5e38\u610f\u5473\u7740\u201c Internal  -  Do not use \u201d), \u4f60\u53ef\u4ee5\u505a\u5982\u4e0b:  import   {   ErrorObservable   }   from   rxjs/observable/ErrorObservable ;  ...  const   e   =   ErrorObservable . create ( new   Error ( My bad ));  const   e2   =   new   ErrorObservable ( new   Error ( My bad too ));", 
            "title": "pipable \u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/pipeable-operators/#_1", 
            "text": "Problems with the patched operators for dot-chaining are:    Any library that imports a patch operator will augment the  Observable.prototype  for all consumers of that library, creating blind dependencies. If the library removes their usage, they unknowingly break everyone else. With pipeables, you have to import the operators you need into each file you use them in.    Operators patched directly onto the prototype are not \"tree-shakeable\" by tools like rollup or webpack. Pipeable operators will be as they are just functions pulled in from modules directly.    Unused operators that are being imported in apps cannot be detected reliably by any sort of build tooling or lint rule. That means that you might import  scan , but stop using it, and it's still being added to your output bundle. With pipeable operators, if you're not using it, a lint rule can pick it up for you.    Functional composition is awesome. Building your own custom operators becomes much, much easier, and now they work and look just like all other operators from rxjs. You don't need to extend Observable or override  lift  anymore.", 
            "title": "\u4e3a\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/pipeable-operators/#_2", 
            "text": "What is a pipeable operator? Simply put, a function that can be used with the current  let  operator. It used to be the origin of the name (\"lettable\"), but that was confusing and we call them \"pipeable\" now because they're intended to be used with the  pipe  utility.\nA pipeable operator is basically any function that returns a function with the signature:  T, R (source: Observable T ) =  Observable R .  There is a  pipe  method built into  Observable  now at  Observable.prototype.pipe  that \u0441an be used to compose the operators in similar manner to what you're used to with dot-chaining (shown below).  There is also a  pipe  utility function at  rxjs/util/pipe  that can be used to build reusable pipeable operators from other pipeable operators.", 
            "title": "\u4ec0\u4e48\uff1f"
        }, 
        {
            "location": "/pipeable-operators/#_3", 
            "text": "You pull in any operator you need from one spot, under  'rxjs/operators'  ( plural! ).\nIt's also recommended to pull in the Observable creation methods you need directly as shown below with  range :  import   {   range   }   from   rxjs/observable/range ;  import   {   map ,   filter ,   scan   }   from   rxjs/operators ;  const   source$   =   range ( 0 ,   10 );  source$ . pipe ( \n   filter ( x   =   x   %   2   ===   0 ), \n   map ( x   =   x   +   x ), \n   scan (( acc ,   x )   =   acc   +   x ,   0 )  )  . subscribe ( x   =   console . log ( x ))", 
            "title": "\u7528\u6cd5"
        }, 
        {
            "location": "/pipeable-operators/#_4", 
            "text": "You, in fact, could  always  do this with  let ... but building your own operator is as simple as writing a function now.\nNotice, that you can compose your custom operator in with other rxjs operators seamlessly.  import   {   interval   }   from   rxjs/observable/interval ;  import   {   filter ,   map ,   take ,   toArray   }   from   rxjs/operators ;  /**   * an operator that takes every Nth value   */  const   takeEveryNth   =   ( n :  number )   =   T ( source :  Observable T )   = \n   new   Observable T ( observer   =   { \n     let   count   =   0 ; \n     return   source . subscribe ({ \n       next ( x )   { \n         if   ( count ++   %   n   ===   0 )   observer . next ( x ); \n       }, \n       error ( err )   {   observer . error ( err );   }, \n       complete() {   observer . complete ();   } \n     }) \n   });  /**   * You can also use an existing operator like so   */  const   takeEveryNthSimple   =   ( n :  number )   =   T ( source :  Observable T )   = \n   source . pipe ( filter (( value ,   index )   =   index   %   n   ===   0   ))  /**   * And since pipeable operators return functions, you can further simplify like so   */  const   takeEveryNthSimplest   =   ( n :  number )   =   filter (( value ,   index )   =   index   %   n   ===   0 );  interval ( 1000 ). pipe ( \n   takeEveryNth ( 2 ), \n   map ( x   =   x   +   x ), \n   takeEveryNthSimple ( 3 ), \n   map ( x   =   x   *   x ), \n   takeEveryNthSimplest ( 4 ), \n   take ( 3 ), \n   toArray ()  )  . subscribe ( x   =   console . log ( x ));  // [0, 2304, 9216]", 
            "title": "\u8f7b\u677e\u6784\u5efa\u60a8\u81ea\u5df1\u7684\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/pipeable-operators/#_5", 
            "text": "", 
            "title": "\u5df2\u77e5\u7684\u95ee\u9898"
        }, 
        {
            "location": "/pipeable-operators/#typescript-24", 
            "text": "\u5728TypeScript 2.3\u53ca\u66f4\u4f4e\u7248\u672c\u4e2d\uff0c\u9700\u8981\u5c06\u7c7b\u578b\u6dfb\u52a0\u5230\u4f20\u9012\u7ed9\u8fd0\u7b97\u7b26\u7684\u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u5728TypeScript 2.4\u4e4b\u524d\u65e0\u6cd5\u63a8\u65ad\u7c7b\u578b\u3002\n\u5728TypeScript 2.4\u4e2d\uff0c\u7c7b\u578b\u5c06\u901a\u8fc7\u5408\u6210\u6765\u6b63\u786e\u63a8\u65ad\u3002  TS 2.3\u53ca\u4ee5\u4e0b  range ( 0 ,   10 ). pipe ( \n   map (( n :  number )   =   n   +   ! ), \n   map (( s :  string )   =   Hello,    +   s ),  ). subscribe ( x   =   console . log ( x ))   TS 2.4\u53ca\u4ee5\u4e0a  range ( 0 ,   10 ). pipe ( \n   map ( n   =   n   +   ! ), \n   map ( s   =   Hello,    +   s ),  ). subscribe ( x   =   console . log ( x ))", 
            "title": "TypeScript &lt; 2.4"
        }, 
        {
            "location": "/pipeable-operators/#_6", 
            "text": "When importing from a manifest (or re-export) file, an application bundle can sometimes grow.\nPipeable operators can now be imported from  rxjs/operators , but doing so without changing your build process will often result in a larger application bundle.\nThis is because by default  rxjs/operators  will resolve to the CommonJS output of rxjs.  In order to use the new pipeable operators and not gain bundle size, you will need to change your Webpack configuration.\nThis will only work with Webpack 3+ as it relies on the new  ModuleConcatenationPlugin  from Webpack 3.  path-mapping  Published along with rxjs 5.5 is builds of rxjs in ECMAScript Module format (imports and exports) with both ES5 and ES2015 language level.\nYou can find these distributions in  node_modules/rxjs/_esm5  and  node_modules/rxjs/_esm2015  (\"esm\" stands for ECMAScript Modules and the number \"5\" or \"2015\" is for the ES language level).\nIn your application source code, you should import from  rxjs/operators , but in your Webpack configuration file you will need to re-map imports to the ESM5 (or ESM2015) version.  If you  require('rxjs/_esm5/path-mapping') , you will receive a function that returns an object of key-value pairs mapping each input to it's file location on disk.\nUtilize this mapping as follows:  webpack.config.js  Simple configuration:  const   rxPaths   =   require ( rxjs/_esm5/path-mapping );  const   webpack   =   require ( webpack );  const   path   =   require ( path );  module . exports   =   { \n   entry :   index.js , \n   output :   bundle.js , \n   resolve :   { \n     // Use the  alias  key to resolve to an ESM distribution \n     alias :   rxPaths () \n   }, \n   plugins :   [ \n     new   webpack . optimize . ModuleConcatenationPlugin () \n   ]  };   More complete configuration (closer to a real-world scenario):  const   webpack   =   require ( webpack );  const   path   =   require ( path );  const   HtmlWebpackPlugin   =   require ( html-webpack-plugin );  const   DashboardPlugin   =   require ( webpack-dashboard/plugin );  const   nodeEnv   =   process . env . NODE_ENV   ||   development ;  const   isProd   =   nodeEnv   ===   production ;  const   rxPaths   =   require ( rxjs/_esm5/path-mapping );  var   config   =   { \n     devtool :   isProd   ?   hidden-source-map   :   cheap-eval-source-map , \n     context :   path . resolve ( ./src ), \n     entry :   { \n         app :   ./index.ts , \n         vendor :   ./vendor.ts \n     }, \n     output :   { \n         path :   path . resolve ( ./dist ), \n         filename :   [name].bundle.js , \n         sourceMapFilename :   [name].map , \n         devtoolModuleFilenameTemplate :   function   ( info )   { \n             return   file:///   +   info . absoluteResourcePath ; \n         } \n     }, \n     module :   { \n         rules :   [ \n             {   enforce :   pre ,   test :   /\\.ts$|\\.tsx$/ ,   exclude :   [ node_modules ],   loader :   ts-loader   }, \n             {   test :   /\\.html$/ ,   loader :   html   }, \n             {   test :   /\\.css$/ ,   loaders :   [ style ,   css ]   } \n         ] \n     }, \n     resolve :   { \n         extensions :   [ .ts ,   .js ], \n         modules :   [ path . resolve ( ./src ),   node_modules ], \n         alias :   rxPaths () \n     }, \n     plugins :   [ \n         new   webpack . DefinePlugin ({ \n             process.env :   {   // eslint-disable-line quote-props \n                 NODE_ENV :   JSON . stringify ( nodeEnv ) \n             } \n         }), \n         new   webpack . HashedModuleIdsPlugin (), \n         new   webpack . optimize . ModuleConcatenationPlugin (), \n         new   HtmlWebpackPlugin ({ \n             title :   Typescript Webpack Starter , \n             template :   !!ejs-loader!src/index.html \n         }), \n         new   webpack . optimize . CommonsChunkPlugin ({ \n             name :   vendor , \n             minChunks :   Infinity , \n             filename :   vendor.bundle.js \n         }), \n         new   webpack . optimize . UglifyJsPlugin ({ \n             mangle :   false , \n             compress :   {   warnings :   false ,   pure_getters :   true ,   passes :   3 ,   screw_ie8 :   true ,   sequences :   false   }, \n             output :   {   comments :   false ,   beautify :   true   }, \n             sourceMap :   false \n         }), \n         new   DashboardPlugin (), \n         new   webpack . LoaderOptionsPlugin ({ \n             options :   { \n                 tslint :   { \n                     emitErrors :   true , \n                     failOnHint :   true \n                 } \n             } \n         }) \n     ]  };  module . exports   =   config ;   \u65e0\u6cd5\u63a7\u5236\u6784\u5efa\u8fc7\u7a0b  If you have no control over your build process (or are unable to upgrade to Webpack 3+), the above solution will not work.\nTherefore importing from  rxjs/operators  will likely make your application bundle larger.\nHowever, there's still a way you can use pipeable operators.\nYou will have to use deep imports, similar to how you import prior to version 5.5 and pipeable operators:  import   {   map ,   filter ,   reduce   }   from   rxjs/operators ;   becomes:  import   {   map   }   from   rxjs/operators/map ;  import   {   filter   }   from   rxjs/operators/filter ;  import   {   reduce   }   from   rxjs/operators/reduce ;", 
            "title": "\u6784\u5efa\u548c\u6811\u6728\u5207\u6362"
        }, 
        {
            "location": "/marble-testing/", 
            "text": "Testing RxJS Code with Marble Diagrams\n\n\n\n\nIMPORTANT\n\n\nThis guide refers to usage of marble diagrams when using the new \ntestScheduler.run(callback)\n. Some details here do not apply to using the TestScheduler manually, without using the \nrun()\n helper.\n\n\n\n\nWe can test our \nasynchronous\n RxJS code \nsynchronously\n and deterministically by virtualizing time using the TestScheduler. ASCII \nmarble diagrams\n provide a visual way for us to represent the behavior of an Observable. We can use them to assert that a particular Observable behaves as expected, as well as to create \nhot and cold Observables\n we can use as mocks.\n\n\n\n\nAt this time the TestScheduler can only be used to test code that uses timers, like delay/debounceTime/etc (i.e. it uses AsyncScheduler with delays \n 1). If the code consumes a Promise or does scheduling with AsapScheduler/AnimationFrameScheduler/etc it cannot be reliably tested with TestScheduler, but instead should be tested more traditionally. See the \nKnown Issues\n section for more details.\n\n\n\n\nconst\n \ntestScheduler\n \n=\n \nnew\n \nTestScheduler\n((\nactual\n,\n \nexpected\n)\n \n=\n \n{\n\n  \n// some how assert the two objects are equal\n\n  \n// e.g. with chai `expect(actual).deep.equal(expected)`\n\n\n});\n\n\n\n// This test will actually run *synchronously*\n\n\ntestScheduler\n.\nrun\n(({\n \ncold\n \n})\n \n=\n \n{\n\n  \nconst\n \ninput\n \n=\n \ncold\n(\n-a-b-c--------|\n);\n\n  \nconst\n \noutput\n \n=\n \ninput\n.\npipe\n(\n\n    \ndebounceTime\n(\n5\n)\n\n  \n);\n\n  \nconst\n \nexpected\n \n=\n \n   ----------c---|\n;\n\n  \nexpectObservable\n(\noutput\n).\ntoBe\n(\nexpected\n);\n\n\n});\n\n\n\n\n\nAPI\n\n\nThe callback function you provide to \ntestScheduler.run(callback)\n is called with an object that contains the helper functions you'll use to write your tests.\n\n\n\n\nWhen the code inside this callback is being executed, any operator that uses timers/AsyncScheduler (like delay, debounceTime, etc) will \nautomatically\n use the TestScheduler instead, so that we have \"virtual time\". You do not need to pass the TestScheduler to them, like in the past.\n\n\n\n\ntestScheduler\n.\nrun\n(\nhelpers\n \n=\n \n{\n\n  \nconst\n \n{\n \ncold\n,\n \nhot\n,\n \nexpectObservable\n,\n \nexpectSubscriptions\n,\n \nflush\n \n}\n \n=\n \nhelpers\n;\n\n  \n// use them\n\n\n});\n\n\n\n\n\n\n\nhot(marbleDiagram: string, values?: object, error?: any)\n - creates a \n\"hot\" observable\n (like a subject) that will behave as though it's already \"running\" when the test begins. An interesting difference is that \nhot\n marbles allow a \n^\n character to signal where the \"zero frame\" is. That is the point at which the subscription to observables being tested begins.\n\n\ncold(marbleDiagram: string, values?: object, error?: any)\n - creates a \n\"cold\" observable\n whose subscription starts when the test begins.\n\n\nexpectObservable(actual: Observable\nT\n).toBe(marbleDiagram: string, values?: object, error?: any)\n - schedules an assertion for when the TestScheduler flushes.\n\n\nexpectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]).toBe(subscriptionMarbles: string)\n - like \nexpectObservable\n schedules an assertion for when the testScheduler flushes. Both \ncold()\n and \nhot()\n return an observable with a property \nsubscriptions\n of type \nSubscriptionLog[]\n. Give \nsubscriptions\n as parameter to \nexpectSubscriptions\n to assert whether it matches the \nsubscriptionsMarbles\n marble diagram given in \ntoBe()\n. Subscription marble diagrams are slightly different than Observable marble diagrams. Read more below.\n\n\nflush()\n - immediately starts virtual time. Not often used since \nrun()\n will automatically flush for you when your callback returns, but in some cases you may wish to flush more than once or otherwise have more control.\n\n\n\n\n\u5927\u7406\u77f3\u8bed\u6cd5\n\n\nIn the context of TestScheduler, a marble diagram is a string containing special syntax representing events happening over virtual time. Time progresses by \nframes\n. The first character of any marble string always represents the \nzero frame\n, or the start of time. Inside of \ntestScheduler.run(callback)\n the frameTimeFactor is set to 1, which means one frame is equal to one virtual millisecond.\n\n\nHow many virtual milliseconds one frame represents depends on the value of \nTestScheduler.frameTimeFactor\n. For legacy reasons the value of \nframeTimeFactor\n is 1 \nonly\n when your code inside the \ntestScheduler.run(callback)\n callback is running. Outside of it, it's set to 10. This will likely change in a future version of RxJS so that it is always 1.\n\n\n\n\nIMPORTANT: This syntax guide refers to usage of marble diagrams when using the new \ntestScheduler.run(callback)\n. The semantics of marble diagrams when using the TestScheduler manually are different, and some features like the new time progression syntax are not supported.\n\n\n\n\n\n\n' '\n whitespace: horizontal whitespace is ignored, and can be used to help vertically align multiple marble diagrams.\n\n\n'-'\n frame: 1 \"frame\" of virtual time passing (see above description of frames).\n\n\n[0-9]+[ms|s|m]\n time progression: the time progression syntax lets you progress virtual time by a specific amount. It's a number, followed by a time unit of \nms\n (milliseconds), \ns\n (seconds), or \nm\n (minutes) without any space between them, e.g. \na 10ms b\n. See \nTime progression syntax\n for more details.\n\n\n'|'\n complete: The successful completion of an observable. This is the observable producer signaling \ncomplete()\n.\n\n\n'#'\n error: An error terminating the observable. This is the observable producer signaling \nerror()\n.\n\n\n[a-z0-9]\n e.g. \n'a'\n any alphanumeric character: Represents a value being emitted by the producer signaling \nnext()\n.\n\n\n'()'\n sync groupings: When multiple events need to be in the same frame synchronously, parentheses are used to group those events. You can group next'd values, a completion, or an error in this manner. The position of the initial \n(\n determines the time at which its values are emitted. While it can be unintuitive at first, after all the values have synchronously emitted time will progress a number of frames equal to the number of ASCII characters in the group, including the parentheses. e.g. \n'(abc)'\n will emit the values of a, b, and c synchronously in the same frame and then advance virtual time by 5 frames, \n'(abc)'.length === 5\n. This is done because it often helps you vertically align your marble diagrams, but it's a known pain point in real-world testing. \nLearn more about known issues\n.\n\n\n'^'\n subscription point: (hot observables only) shows the point at which the tested observables will be subscribed to the hot observable. This is the \"zero frame\" for that observable, every frame before the \n^\n will be negative. Negative time might seem pointless, but there are in fact advanced cases where this is necessary, usually involving ReplaySubjects.\n\n\n\n\n\u65f6\u95f4\u8fdb\u5ea6\u5408\u6210\n\n\nThe new time progression syntax takes inspiration from the CSS duration syntax. It's a number (int or float) immediately followed by a unit; ms (milliseconds), s (seconds), m (minutes). e.g. \n100ms\n, \n1.4s\n, \n5.25m\n.\n\n\nWhen it's not the first character of the diagram it must be padded a space before/after to disambiguate it from a series of marbles. e.g. \na 1ms b\n needs the spaces because \na1msb\n will be interpreted as \n['a', '1', 'm', 's', 'b']\n where each of these characters is a value that will be next()'d as-is.\n\n\n\n\nYou may have to subtract 1 millisecond from the time you want to progress because the alphanumeric marbles (representing an actual emitted value) \nadvance time 1 virtual frame\n themselves already, after they emit. This can be very unintuitive and frustrating, but for now it is indeed correct.\n\n\n\n\nconst\n \ninput\n \n=\n \n -a-b-c|\n;\n\n\nconst\n \nexpected\n \n=\n \n-- 9ms a 9ms b 9ms (c|)\n;\n\n\n/*\n\n\n\n// Depending on your personal preferences you could also\n\n\n// use frame dashes to keep vertical aligment with the input\n\n\nconst input = \n -a-b-c|\n;\n\n\nconst expected = \n------- 4ms a 9ms b 9ms (c|)\n;\n\n\n// or\n\n\nconst expected = \n-----------a 9ms b 9ms (c|)\n;\n\n\n\n*/\n\n\n\nconst\n \nresult\n \n=\n \ncold\n(\ninput\n).\npipe\n(\n\n  \nconcatMap\n(\nd\n \n=\n \nof\n(\nd\n).\npipe\n(\n\n    \ndelay\n(\n10\n)\n\n  \n))\n\n\n);\n\n\n\nexpectObservable\n(\nresult\n).\ntoBe\n(\nexpected\n);\n\n\n\n\n\n\u4f8b\u5b50\n\n\n'-'\n or \n'------'\n: Equivalent to \nnever()\n, or an observable that never emits or completes\n\n\n|\n: Equivalent to \nempty()\n\n\n#\n: Equivalent to \nthrowError()\n\n\n'--a--'\n: An observable that waits 2 \"frames\", emits value \na\n and then never completes.\n\n\n'--a--b--|'\n: On frame 2 emit \na\n, on frame 5 emit \nb\n, and on frame 8, \ncomplete\n\n\n'--a--b--#'\n: On frame 2 emit \na\n, on frame 5 emit \nb\n, and on frame 8, \nerror\n\n\n'-a-^-b--|'\n: In a hot observable, on frame -2 emit \na\n, then on frame 2 emit \nb\n, and on frame 5, \ncomplete\n.\n\n\n'--(abc)-|'\n: on frame 2 emit \na\n, \nb\n, and \nc\n, then on frame 8 \ncomplete\n\n\n'-----(a|)'\n: on frame 5 emit \na\n and \ncomplete\n.\n\n\n'a 9ms b 9s c'\n: on frame 0 emit \na\n, on frame 10 emit \nb\n, on frame 10,012 emit \nc\n, then on on frame 10,013 \ncomplete\n.\n\n\n'--a 2.5m b'\n: on frame 2 emit \na\n, on frame 150,003 emit \nb\n and never complete.\n\n\n\u8ba2\u9605\u5927\u7406\u77f3\n\n\nThe \nexpectSubscriptions\n helper allows you to assert that a \ncold()\n or \nhot()\n Observable you created was subscribed/unsubscribed to at the correct point in time. The subscription marble syntax is slightly different to conventional marble syntax.\n\n\n\n\n'-'\n time: 1 frame time passing.\n\n\n[0-9]+[ms|s|m]\n time progression: the time progression syntax lets you progress virtual time by a specific amount. It's a number, followed by a time unit of \nms\n (milliseconds), \ns\n (seconds), or \nm\n (minutes) without any space between them, e.g. \na 10ms b\n. See \nTime progression syntax\n for more details.\n\n\n'^'\n subscription point: shows the point in time at which a subscription happen.\n\n\n'!'\n unsubscription point: shows the point in time at which a subscription is unsubscribed.\n\n\n\n\nThere should be \nat most one\n \n^\n point in a subscription marble diagram, and \nat most one\n \n!\n point. Other than that, the \n-\n character is the only one allowed in a subscription marble diagram.\n\n\n\u4f8b\u5b50\n\n\n'-'\n or \n'------'\n: no subscription ever happened.\n\n\n'--^--'\n: a subscription happened after 2 \"frames\" of time passed, and the subscription was not unsubscribed.\n\n\n'--^--!-'\n: on frame 2 a subscription happened, and on frame 5 was unsubscribed.\n\n\n'500ms ^ 1s !'\n: on frame 500 a subscription happened, and on frame 1,501 was unsubscribed.\n\n\n\n\n\u5df2\u77e5\u7684\u95ee\u9898\n\n\n\u60a8\u4e0d\u80fd\u76f4\u63a5\u6d4b\u8bd5\u4f7f\u7528Promises\u6216\u4f7f\u7528\u5176\u4ed6\u4efb\u4f55\u8c03\u5ea6\u7a0b\u5e8f\u7684RxJS\u4ee3\u7801\uff08\u4f8b\u5982AsapScheduler\uff09\n\n\nIf you have RxJS code that uses any other form of async scheduling other than AsyncScheduler, e.g. Promises, AsapScheduler, etc. you can't reliably use marble diagrams \nfor that particular code\n. This is because those other scheduling methods won't be virtualized or known to TestScheduler.\n\n\nThe solution is to test that code in isolation, with the traditional async testing methods of your testing framework. The specifics depend on your testing framework of choice, but here's a pseudo-code example:\n\n\n// Some RxJS code that also consumes a Promise, so TestScheduler won\nt be able\n\n\n// to correctly virtualize and the test will always be really async\n\n\nconst\n \nmyAsyncCode\n \n=\n \n()\n \n=\n \nfrom\n(\nPromise\n.\nresolve\n(\nsomething\n));\n\n\n\nit\n(\nhas async code\n,\n \ndone\n \n=\n \n{\n\n  \nmyAsyncCode\n().\nsubscribe\n(\nd\n \n=\n \n{\n\n    \nassertEqual\n(\nd\n,\n \nsomething\n);\n\n    \ndone\n();\n\n  \n});\n\n\n});\n\n\n\n\n\nOn a related note, you also can't currently assert delays of zero, even with AsyncScheduler, e.g. \ndelay(0)\n is like saying \nsetTimeout(work, 0)\n. This schedules a new \n\"task\" aka \"macrotask\"\n, so it's async, but without an explicit passage of time.\n\n\n\u884c\u4e3a\u4e0e \ntestScheduler.run(callback)\n\u4e0d\u540c\n\n\nThe TestScheduler has been around since v5, but was actually intended for testing RxJS itself by the maintainers, rather than for use in regular user apps. Because of this, some of the default behaviors and features of the TestScheduler didn't work well (or at all) for users. In v6 we introduced the \ntestScheduler.run(callback)\n method which allowed us to provide new defaults and features in a non-breaking way, but it's still possible to \nuse the TestScheduler outside\n of \ntestScheduler.run(callback)\n. It's important to note that if you do so, there are some major differences in how it will behave.\n\n\n\n\nTestScheduler helper methods have more verbose names, like \ntestScheduler.createColdObservable()\n instead of \ncold()\n\n\nThe testScheduler instance is NOT automatically be used by operators that uses AsyncScheduler, e.g. delay, debounceTime, etc so you have to explicitly pass it to them.\n\n\nThere is NO support for time progression syntax e.g. \n-a 100ms b-|\n\n\n1 frame is 10 virtual milliseconds by default. i.e. \nTestScheduler.frameTimeFactor = 10\n\n\nEach space \n equals 1 frame, same as a hyphen \n-\n.\n\n\nThere is a hard maximum number of frames set at 750 i.e. \nmaxFrames = 750\n. After 750 they are silently ignored.\n\n\nYou must explicitly flush the scheduler\n\n\n\n\nWhile at this time usage of the TestScheduler outside of \ntestScheduler.run(callback)\n has not been officially deprecated, it is discouraged because it is likely to cause confusion.", 
            "title": "\u7f16\u5199\u5f39\u73e0\u6d4b\u8bd5"
        }, 
        {
            "location": "/marble-testing/#testing-rxjs-code-with-marble-diagrams", 
            "text": "IMPORTANT  This guide refers to usage of marble diagrams when using the new  testScheduler.run(callback) . Some details here do not apply to using the TestScheduler manually, without using the  run()  helper.   We can test our  asynchronous  RxJS code  synchronously  and deterministically by virtualizing time using the TestScheduler. ASCII  marble diagrams  provide a visual way for us to represent the behavior of an Observable. We can use them to assert that a particular Observable behaves as expected, as well as to create  hot and cold Observables  we can use as mocks.   At this time the TestScheduler can only be used to test code that uses timers, like delay/debounceTime/etc (i.e. it uses AsyncScheduler with delays   1). If the code consumes a Promise or does scheduling with AsapScheduler/AnimationFrameScheduler/etc it cannot be reliably tested with TestScheduler, but instead should be tested more traditionally. See the  Known Issues  section for more details.   const   testScheduler   =   new   TestScheduler (( actual ,   expected )   =   { \n   // some how assert the two objects are equal \n   // e.g. with chai `expect(actual).deep.equal(expected)`  });  // This test will actually run *synchronously*  testScheduler . run (({   cold   })   =   { \n   const   input   =   cold ( -a-b-c--------| ); \n   const   output   =   input . pipe ( \n     debounceTime ( 5 ) \n   ); \n   const   expected   =      ----------c---| ; \n   expectObservable ( output ). toBe ( expected );  });", 
            "title": "Testing RxJS Code with Marble Diagrams"
        }, 
        {
            "location": "/marble-testing/#api", 
            "text": "The callback function you provide to  testScheduler.run(callback)  is called with an object that contains the helper functions you'll use to write your tests.   When the code inside this callback is being executed, any operator that uses timers/AsyncScheduler (like delay, debounceTime, etc) will  automatically  use the TestScheduler instead, so that we have \"virtual time\". You do not need to pass the TestScheduler to them, like in the past.   testScheduler . run ( helpers   =   { \n   const   {   cold ,   hot ,   expectObservable ,   expectSubscriptions ,   flush   }   =   helpers ; \n   // use them  });    hot(marbleDiagram: string, values?: object, error?: any)  - creates a  \"hot\" observable  (like a subject) that will behave as though it's already \"running\" when the test begins. An interesting difference is that  hot  marbles allow a  ^  character to signal where the \"zero frame\" is. That is the point at which the subscription to observables being tested begins.  cold(marbleDiagram: string, values?: object, error?: any)  - creates a  \"cold\" observable  whose subscription starts when the test begins.  expectObservable(actual: Observable T ).toBe(marbleDiagram: string, values?: object, error?: any)  - schedules an assertion for when the TestScheduler flushes.  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]).toBe(subscriptionMarbles: string)  - like  expectObservable  schedules an assertion for when the testScheduler flushes. Both  cold()  and  hot()  return an observable with a property  subscriptions  of type  SubscriptionLog[] . Give  subscriptions  as parameter to  expectSubscriptions  to assert whether it matches the  subscriptionsMarbles  marble diagram given in  toBe() . Subscription marble diagrams are slightly different than Observable marble diagrams. Read more below.  flush()  - immediately starts virtual time. Not often used since  run()  will automatically flush for you when your callback returns, but in some cases you may wish to flush more than once or otherwise have more control.", 
            "title": "API"
        }, 
        {
            "location": "/marble-testing/#_1", 
            "text": "In the context of TestScheduler, a marble diagram is a string containing special syntax representing events happening over virtual time. Time progresses by  frames . The first character of any marble string always represents the  zero frame , or the start of time. Inside of  testScheduler.run(callback)  the frameTimeFactor is set to 1, which means one frame is equal to one virtual millisecond.  How many virtual milliseconds one frame represents depends on the value of  TestScheduler.frameTimeFactor . For legacy reasons the value of  frameTimeFactor  is 1  only  when your code inside the  testScheduler.run(callback)  callback is running. Outside of it, it's set to 10. This will likely change in a future version of RxJS so that it is always 1.   IMPORTANT: This syntax guide refers to usage of marble diagrams when using the new  testScheduler.run(callback) . The semantics of marble diagrams when using the TestScheduler manually are different, and some features like the new time progression syntax are not supported.    ' '  whitespace: horizontal whitespace is ignored, and can be used to help vertically align multiple marble diagrams.  '-'  frame: 1 \"frame\" of virtual time passing (see above description of frames).  [0-9]+[ms|s|m]  time progression: the time progression syntax lets you progress virtual time by a specific amount. It's a number, followed by a time unit of  ms  (milliseconds),  s  (seconds), or  m  (minutes) without any space between them, e.g.  a 10ms b . See  Time progression syntax  for more details.  '|'  complete: The successful completion of an observable. This is the observable producer signaling  complete() .  '#'  error: An error terminating the observable. This is the observable producer signaling  error() .  [a-z0-9]  e.g.  'a'  any alphanumeric character: Represents a value being emitted by the producer signaling  next() .  '()'  sync groupings: When multiple events need to be in the same frame synchronously, parentheses are used to group those events. You can group next'd values, a completion, or an error in this manner. The position of the initial  (  determines the time at which its values are emitted. While it can be unintuitive at first, after all the values have synchronously emitted time will progress a number of frames equal to the number of ASCII characters in the group, including the parentheses. e.g.  '(abc)'  will emit the values of a, b, and c synchronously in the same frame and then advance virtual time by 5 frames,  '(abc)'.length === 5 . This is done because it often helps you vertically align your marble diagrams, but it's a known pain point in real-world testing.  Learn more about known issues .  '^'  subscription point: (hot observables only) shows the point at which the tested observables will be subscribed to the hot observable. This is the \"zero frame\" for that observable, every frame before the  ^  will be negative. Negative time might seem pointless, but there are in fact advanced cases where this is necessary, usually involving ReplaySubjects.", 
            "title": "\u5927\u7406\u77f3\u8bed\u6cd5"
        }, 
        {
            "location": "/marble-testing/#_2", 
            "text": "The new time progression syntax takes inspiration from the CSS duration syntax. It's a number (int or float) immediately followed by a unit; ms (milliseconds), s (seconds), m (minutes). e.g.  100ms ,  1.4s ,  5.25m .  When it's not the first character of the diagram it must be padded a space before/after to disambiguate it from a series of marbles. e.g.  a 1ms b  needs the spaces because  a1msb  will be interpreted as  ['a', '1', 'm', 's', 'b']  where each of these characters is a value that will be next()'d as-is.   You may have to subtract 1 millisecond from the time you want to progress because the alphanumeric marbles (representing an actual emitted value)  advance time 1 virtual frame  themselves already, after they emit. This can be very unintuitive and frustrating, but for now it is indeed correct.   const   input   =    -a-b-c| ;  const   expected   =   -- 9ms a 9ms b 9ms (c|) ;  /*  // Depending on your personal preferences you could also  // use frame dashes to keep vertical aligment with the input  const input =   -a-b-c| ;  const expected =  ------- 4ms a 9ms b 9ms (c|) ;  // or  const expected =  -----------a 9ms b 9ms (c|) ;  */  const   result   =   cold ( input ). pipe ( \n   concatMap ( d   =   of ( d ). pipe ( \n     delay ( 10 ) \n   ))  );  expectObservable ( result ). toBe ( expected );", 
            "title": "\u65f6\u95f4\u8fdb\u5ea6\u5408\u6210"
        }, 
        {
            "location": "/marble-testing/#_3", 
            "text": "'-'  or  '------' : Equivalent to  never() , or an observable that never emits or completes  | : Equivalent to  empty()  # : Equivalent to  throwError()  '--a--' : An observable that waits 2 \"frames\", emits value  a  and then never completes.  '--a--b--|' : On frame 2 emit  a , on frame 5 emit  b , and on frame 8,  complete  '--a--b--#' : On frame 2 emit  a , on frame 5 emit  b , and on frame 8,  error  '-a-^-b--|' : In a hot observable, on frame -2 emit  a , then on frame 2 emit  b , and on frame 5,  complete .  '--(abc)-|' : on frame 2 emit  a ,  b , and  c , then on frame 8  complete  '-----(a|)' : on frame 5 emit  a  and  complete .  'a 9ms b 9s c' : on frame 0 emit  a , on frame 10 emit  b , on frame 10,012 emit  c , then on on frame 10,013  complete .  '--a 2.5m b' : on frame 2 emit  a , on frame 150,003 emit  b  and never complete.", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/marble-testing/#_4", 
            "text": "The  expectSubscriptions  helper allows you to assert that a  cold()  or  hot()  Observable you created was subscribed/unsubscribed to at the correct point in time. The subscription marble syntax is slightly different to conventional marble syntax.   '-'  time: 1 frame time passing.  [0-9]+[ms|s|m]  time progression: the time progression syntax lets you progress virtual time by a specific amount. It's a number, followed by a time unit of  ms  (milliseconds),  s  (seconds), or  m  (minutes) without any space between them, e.g.  a 10ms b . See  Time progression syntax  for more details.  '^'  subscription point: shows the point in time at which a subscription happen.  '!'  unsubscription point: shows the point in time at which a subscription is unsubscribed.   There should be  at most one   ^  point in a subscription marble diagram, and  at most one   !  point. Other than that, the  -  character is the only one allowed in a subscription marble diagram.", 
            "title": "\u8ba2\u9605\u5927\u7406\u77f3"
        }, 
        {
            "location": "/marble-testing/#_5", 
            "text": "'-'  or  '------' : no subscription ever happened.  '--^--' : a subscription happened after 2 \"frames\" of time passed, and the subscription was not unsubscribed.  '--^--!-' : on frame 2 a subscription happened, and on frame 5 was unsubscribed.  '500ms ^ 1s !' : on frame 500 a subscription happened, and on frame 1,501 was unsubscribed.", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/marble-testing/#_6", 
            "text": "", 
            "title": "\u5df2\u77e5\u7684\u95ee\u9898"
        }, 
        {
            "location": "/marble-testing/#promisesrxjsasapscheduler", 
            "text": "If you have RxJS code that uses any other form of async scheduling other than AsyncScheduler, e.g. Promises, AsapScheduler, etc. you can't reliably use marble diagrams  for that particular code . This is because those other scheduling methods won't be virtualized or known to TestScheduler.  The solution is to test that code in isolation, with the traditional async testing methods of your testing framework. The specifics depend on your testing framework of choice, but here's a pseudo-code example:  // Some RxJS code that also consumes a Promise, so TestScheduler won t be able  // to correctly virtualize and the test will always be really async  const   myAsyncCode   =   ()   =   from ( Promise . resolve ( something ));  it ( has async code ,   done   =   { \n   myAsyncCode (). subscribe ( d   =   { \n     assertEqual ( d ,   something ); \n     done (); \n   });  });   On a related note, you also can't currently assert delays of zero, even with AsyncScheduler, e.g.  delay(0)  is like saying  setTimeout(work, 0) . This schedules a new  \"task\" aka \"macrotask\" , so it's async, but without an explicit passage of time.", 
            "title": "\u60a8\u4e0d\u80fd\u76f4\u63a5\u6d4b\u8bd5\u4f7f\u7528Promises\u6216\u4f7f\u7528\u5176\u4ed6\u4efb\u4f55\u8c03\u5ea6\u7a0b\u5e8f\u7684RxJS\u4ee3\u7801\uff08\u4f8b\u5982AsapScheduler\uff09"
        }, 
        {
            "location": "/marble-testing/#testschedulerruncallback", 
            "text": "The TestScheduler has been around since v5, but was actually intended for testing RxJS itself by the maintainers, rather than for use in regular user apps. Because of this, some of the default behaviors and features of the TestScheduler didn't work well (or at all) for users. In v6 we introduced the  testScheduler.run(callback)  method which allowed us to provide new defaults and features in a non-breaking way, but it's still possible to  use the TestScheduler outside  of  testScheduler.run(callback) . It's important to note that if you do so, there are some major differences in how it will behave.   TestScheduler helper methods have more verbose names, like  testScheduler.createColdObservable()  instead of  cold()  The testScheduler instance is NOT automatically be used by operators that uses AsyncScheduler, e.g. delay, debounceTime, etc so you have to explicitly pass it to them.  There is NO support for time progression syntax e.g.  -a 100ms b-|  1 frame is 10 virtual milliseconds by default. i.e.  TestScheduler.frameTimeFactor = 10  Each space   equals 1 frame, same as a hyphen  - .  There is a hard maximum number of frames set at 750 i.e.  maxFrames = 750 . After 750 they are silently ignored.  You must explicitly flush the scheduler   While at this time usage of the TestScheduler outside of  testScheduler.run(callback)  has not been officially deprecated, it is discouraged because it is likely to cause confusion.", 
            "title": "\u884c\u4e3a\u4e0e testScheduler.run(callback)\u4e0d\u540c"
        }, 
        {
            "location": "/internal-marble-tests/", 
            "text": "\u5199\u5927\u7406\u77f3\u6d4b\u8bd5\n\n\n\n\nThis document refers to the writing marble tests for the \nRxJS repo internals\n and is intended for anyone wishing to help maintain the RxJS repo. \nUsers of RxJS\n should instead view the \nguide for writing marbles tests for applications\n. The major difference is that the behavior of the TestScheduler differs between manual usage and using the \ntestScheduler.run(callback)\n helper.\n\n\n\n\n\"Marble Tests\" are tests that use a specialized VirtualScheduler called the \nTestScheduler\n. They enable us to test\nasynchronous operations in a synchronous and dependable manner. The \"marble notation\" is something that's been adapted\nfrom many teachings and documents by people such as @jhusain, @headinthebox, @mattpodwysocki and @staltz. In fact,\n@staltz first recommended this as a DSL for creating unit tests, and it has since been altered and adopted.\n\n\n\u94fe\u63a5\n\n\n\n\nContribution\n\n\nCode of Conduct\n\n\n\n\n\u57fa\u672c\u65b9\u6cd5\n\n\nThe unit tests have helper methods that have been added to make creating tests easier.\n\n\n\n\nhot(marbles: string, values?: object, error?: any)\n - creates a \"hot\" observable (a subject) that will behave\n  as though it's already \"running\" when the test begins. An interesting difference is that \nhot\n marbles allow a\n  \n^\n character to signal where the \"zero frame\" is. That is the point at which the subscription to observables\n  being tested begins.\n\n\ncold(marbles: string, values?: object, error?: any)\n - creates a \"cold\" observable whose subscription starts when\n  the test begins.\n\n\nexpectObservable(actual: Observable\nT\n).toBe(marbles: string, values?: object, error?: any)\n - schedules an assertion\n  for when the TestScheduler flushes. The TestScheduler will automatically flush at the end of your jasmine \nit\n block.\n\n\nexpectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]).toBe(subscriptionMarbles: string)\n - like \nexpectObservable\n schedules an assertion for when the testScheduler flushes. Both \ncold()\n and \nhot()\n return an observable with a property \nsubscriptions\n of type \nSubscriptionLog[]\n. Give \nsubscriptions\n as parameter to \nexpectSubscriptions\n to assert whether it matches the \nsubscriptionsMarbles\n marble diagram given in \ntoBe()\n. Subscription marble diagrams are slightly different than Observable marble diagrams. Read more below.\n\n\n\n\nhot\n\u548c\ncold\n\u7684\u4eba\u4f53\u5de5\u7a0b\u5b66\u9ed8\u8ba4\u8bbe\u7f6e\n\n\nIn both \nhot\n and \ncold\n methods, value characters specified in marble diagrams are emitted as strings unless a \nvalues\n\nargument is passed to the method. Therefor:\n\n\nhot('--a--b')\n will emit \n\"a\"\n and \n\"b\"\n whereas\n\n\nhot('--a--b', { a: 1, b: 2 })\n will emit \n1\n and \n2\n.\n\n\nLikewise, unspecified errors will just default to the string \n\"error\"\n, so:\n\n\nhot('---#')\n will emit error \n\"error\"\n whereas\n\n\nhot('---#', null, new SpecialError('test'))\n will emit \nnew SpecialError('test')\n\n\n\u5927\u7406\u77f3\u8bed\u6cd5\n\n\nMarble syntax is a string which represents events happening over \"time\". The first character of any marble string\n\n\nalways represents the \"zero frame\". A \"frame\" is somewhat analogous to a virtual millisecond.\n\n\n\n\n\"-\"\n time: 10 \"frames\" of time passage.\n\n\n\"|\"\n complete: The successful completion of an observable. This is the observable producer signaling \ncomplete()\n\n\n\"#\"\n error: An error terminating the observable. This is the observable producer signaling \nerror()\n\n\n\"a\"\n any character: All other characters represent a value being emitted by the producer signaling \nnext()\n\n\n\"()\"\n sync groupings: When multiple events need to be in the same frame synchronously, parentheses are used\n  to group those events. You can group nexted values, a completion or an error in this manner. The position of the\n  initial \n(\n determines the time at which its values are emitted.\n\n\n\"^\"\n subscription point: (hot observables only) shows the point at which the tested observables will be subscribed\n  to the hot observable. This is the \"zero frame\" for that observable, every frame before the \n^\n will be negative.\n\n\n\n\n\u4f8b\u5b50\n\n\n'-'\n or \n'------'\n: Equivalent to \nObservable.never()\n, or an observable that never emits or completes\n\n\n|\n: Equivalent to \nObservable.empty()\n\n\n#\n: Equivalent to \nObservable.throw()\n\n\n'--a--'\n: An observable that waits 20 \"frames\", emits value \na\n and then never completes.\n\n\n'--a--b--|'\n: On frame 20 emit \na\n, on frame 50 emit \nb\n, and on frame 80, \ncomplete\n\n\n'--a--b--#'\n: On frame 20 emit \na\n, on frame 50 emit \nb\n, and on frame 80, \nerror\n\n\n'-a-^-b--|'\n: In a hot observable, on frame -20 emit \na\n, then on frame 20 emit \nb\n, and on frame 50, \ncomplete\n.\n\n\n'--(abc)-|'\n: on frame 20, emit \na\n, \nb\n, and \nc\n, then on frame 80 \ncomplete\n\n\n'-----(a|)'\n: on frame 50, emit \na\n and \ncomplete\n.\n\n\n\u8ba2\u9605\u5927\u7406\u77f3\u8bed\u6cd5\n\n\nThe subscription marble syntax is slightly different to conventional marble syntax. It represents the \nsubscription\n and an \nunsubscription\n points happening over time. There should be no other type of event represented in such diagram.\n\n\n\n\n\"-\"\n time: 10 \"frames\" of the passage.\n\n\n\"^\"\n subscription point: shows the point in time at which a subscription happen.\n\n\n\"!\"\n unsubscription point: shows the point in time at which a subscription is unsubscribed.\n\n\n\n\nThere should be \nat most one\n \n^\n point in a subscription marble diagram, and \nat most one\n \n!\n point. Other than that, the \n-\n character is the only one allowed in a subscription marble diagram.\n\n\n\u4f8b\u5b50\n\n\n'-'\n or \n'------'\n: no subscription ever happened.\n\n\n'--^--'\n: a subscription happened after 20 \"frames\" of time passed, and the subscription was not unsubscribed.\n\n\n'--^--!-'\n: on frame 20 a subscription happened, and on frame 50 was unsubscribed.\n\n\n\u89e3\u5256\u6d4b\u8bd5\n\n\nA basic test might look as follows:\n\n\nvar\n \ne1\n \n=\n \nhot\n(\n----a--^--b-------c--|\n);\n\n\nvar\n \ne2\n \n=\n \nhot\n(\n  \n---d-^--e---------f-----|\n);\n\n\nvar\n \nexpected\n \n=\n      \n---(be)----c-f-----|\n;\n\n\n\nexpectObservable\n(\ne1\n.\nmerge\n(\ne2\n)).\ntoBe\n(\nexpected\n);\n\n\n\n\n\n\n\nThe \n^\n characters of \nhot\n observables should \nalways\n be aligned.\n\n\nThe \nfirst character\n of \ncold\n observables or expected observables should \nalways\n be aligned\n  with each other, and with the \n^\n of hot observables.\n\n\nUse default emission values when you can. Specify \nvalues\n when you have to.\n\n\n\n\nA test example with specified values:\n\n\nvar\n \nvalues\n \n=\n \n{\n\n  \na\n:\n \n1\n,\n\n  \nb\n:\n \n2\n,\n\n  \nc\n:\n \n3\n,\n\n  \nd\n:\n \n4\n,\n\n  \nx\n:\n \n1\n \n+\n \n3\n,\n \n// a + c\n\n  \ny\n:\n \n2\n \n+\n \n4\n,\n \n// b + d\n\n\n}\n\n\nvar\n \ne1\n \n=\n    \nhot\n(\n---a---b---|\n,\n \nvalues\n);\n\n\nvar\n \ne2\n \n=\n    \nhot\n(\n-----c---d---|\n,\n \nvalues\n);\n\n\nvar\n \nexpected\n \n=\n  \n-----x---y---|\n;\n\n\n\nexpectObservable\n(\ne1\n.\nzip\n(\ne2\n,\n \nfunction\n(\nx\n,\n \ny\n)\n \n{\n \nreturn\n \nx\n \n+\n \ny\n;\n \n}))\n\n  \n.\ntoBe\n(\nexpected\n,\n \nvalues\n);\n\n\n\n\n\n\n\nUse the same hash to look up all values, this ensures that multiple uses of the same character have the\n  same value.\n\n\nMake the result values as obvious as possible as to what they represent, these are \ntests\n afterall, we want\n  clarity more than efficiency, so \nx: 1 + 3, // a + c\n is better than just \nx: 4\n. The former conveys \nwhy\n it's 4,\n  the latter does not.\n\n\n\n\nA test example with subscription assertions:\n\n\nvar\n \nx\n \n=\n \ncold\n(\n        \n--a---b---c--|\n);\n\n\nvar\n \nxsubs\n \n=\n    \n------^-------!\n;\n\n\nvar\n \ny\n \n=\n \ncold\n(\n                \n---d--e---f---|\n);\n\n\nvar\n \nysubs\n \n=\n    \n--------------^-------------!\n;\n\n\nvar\n \ne1\n \n=\n \nhot\n(\n  \n------x-------y------|\n,\n \n{\n \nx\n:\n \nx\n,\n \ny\n:\n \ny\n \n});\n\n\nvar\n \nexpected\n \n=\n \n--------a---b----d--e---f---|\n;\n\n\n\nexpectObservable\n(\ne1\n.\nswitch\n()).\ntoBe\n(\nexpected\n);\n\n\nexpectSubscriptions\n(\nx\n.\nsubscriptions\n).\ntoBe\n(\nxsubs\n);\n\n\nexpectSubscriptions\n(\ny\n.\nsubscriptions\n).\ntoBe\n(\nysubs\n);\n\n\n\n\n\n\n\nAlign the start of \nxsubs\n and \nysubs\n diagrams with \nexpected\n diagram.\n\n\nNotice how the \nx\n cold observable is unsubscribed at the same time \ne1\n emits \ny\n.\n\n\n\n\nIn most tests it will be unnecessary to test subscription and unsubscription points, being either obvious or implied from the \nexpected\n diagram. In those cases do not write subscription assertions. In test cases that have inner subscriptions or cold observables with multiple subscribers, these subscription assertions can be useful.\n\n\n\u4ece\u6d4b\u8bd5\u751f\u6210PNG\u5927\u7406\u77f3\u56fe\n\n\nTypically, each test case in Jasmine is written as \nit('should do something', function () { /* ... */ })\n. To mark a test case for PNG diagram generation, you must use the \nasDiagram(label)\n function, like this:\n\n\nit\n.\nasDiagram\n(\noperatorLabel\n)(\nshould do something\n,\n \nfunction\n \n()\n \n{\n\n  \n// ...\n\n\n});\n\n\n\n\n\nFor instance, with \nzip\n, we would write\n\n\nit\n.\nasDiagram\n(\nzip\n)(\nshould zip by concatenating\n,\n \nfunction\n \n()\n \n{\n\n  \nvar\n \ne1\n \n=\n    \nhot\n(\n---a---b---|\n);\n\n  \nvar\n \ne2\n \n=\n    \nhot\n(\n-----c---d---|\n);\n\n  \nvar\n \nexpected\n \n=\n  \n-----x---y---|\n;\n\n  \nvar\n \nvalues\n \n=\n \n{\n \nx\n:\n \nac\n,\n \ny\n:\n \nbd\n \n};\n\n\n  \nvar\n \nresult\n \n=\n \ne1\n.\nzip\n(\ne2\n,\n \nfunction\n(\nx\n,\n \ny\n)\n \n{\n \nreturn\n \nString\n(\nx\n)\n \n+\n \nString\n(\ny\n);\n \n});\n\n\n  \nexpectObservable\n(\nresult\n).\ntoBe\n(\nexpected\n,\n \nvalues\n);\n\n\n});\n\n\n\n\n\nThen, when running \nnpm run tests2png\n, this test case will be parsed and a PNG file \nzip.png\n (filename determined by \n${operatorLabel}.png\n) will be created in the \nimg/\n folder.", 
            "title": "\u5927\u7406\u77f3\u6d4b\u8bd5"
        }, 
        {
            "location": "/internal-marble-tests/#_1", 
            "text": "This document refers to the writing marble tests for the  RxJS repo internals  and is intended for anyone wishing to help maintain the RxJS repo.  Users of RxJS  should instead view the  guide for writing marbles tests for applications . The major difference is that the behavior of the TestScheduler differs between manual usage and using the  testScheduler.run(callback)  helper.   \"Marble Tests\" are tests that use a specialized VirtualScheduler called the  TestScheduler . They enable us to test\nasynchronous operations in a synchronous and dependable manner. The \"marble notation\" is something that's been adapted\nfrom many teachings and documents by people such as @jhusain, @headinthebox, @mattpodwysocki and @staltz. In fact,\n@staltz first recommended this as a DSL for creating unit tests, and it has since been altered and adopted.", 
            "title": "\u5199\u5927\u7406\u77f3\u6d4b\u8bd5"
        }, 
        {
            "location": "/internal-marble-tests/#_2", 
            "text": "Contribution  Code of Conduct", 
            "title": "\u94fe\u63a5"
        }, 
        {
            "location": "/internal-marble-tests/#_3", 
            "text": "The unit tests have helper methods that have been added to make creating tests easier.   hot(marbles: string, values?: object, error?: any)  - creates a \"hot\" observable (a subject) that will behave\n  as though it's already \"running\" when the test begins. An interesting difference is that  hot  marbles allow a\n   ^  character to signal where the \"zero frame\" is. That is the point at which the subscription to observables\n  being tested begins.  cold(marbles: string, values?: object, error?: any)  - creates a \"cold\" observable whose subscription starts when\n  the test begins.  expectObservable(actual: Observable T ).toBe(marbles: string, values?: object, error?: any)  - schedules an assertion\n  for when the TestScheduler flushes. The TestScheduler will automatically flush at the end of your jasmine  it  block.  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]).toBe(subscriptionMarbles: string)  - like  expectObservable  schedules an assertion for when the testScheduler flushes. Both  cold()  and  hot()  return an observable with a property  subscriptions  of type  SubscriptionLog[] . Give  subscriptions  as parameter to  expectSubscriptions  to assert whether it matches the  subscriptionsMarbles  marble diagram given in  toBe() . Subscription marble diagrams are slightly different than Observable marble diagrams. Read more below.", 
            "title": "\u57fa\u672c\u65b9\u6cd5"
        }, 
        {
            "location": "/internal-marble-tests/#hotcold", 
            "text": "In both  hot  and  cold  methods, value characters specified in marble diagrams are emitted as strings unless a  values \nargument is passed to the method. Therefor:  hot('--a--b')  will emit  \"a\"  and  \"b\"  whereas  hot('--a--b', { a: 1, b: 2 })  will emit  1  and  2 .  Likewise, unspecified errors will just default to the string  \"error\" , so:  hot('---#')  will emit error  \"error\"  whereas  hot('---#', null, new SpecialError('test'))  will emit  new SpecialError('test')", 
            "title": "hot\u548ccold\u7684\u4eba\u4f53\u5de5\u7a0b\u5b66\u9ed8\u8ba4\u8bbe\u7f6e"
        }, 
        {
            "location": "/internal-marble-tests/#_4", 
            "text": "Marble syntax is a string which represents events happening over \"time\". The first character of any marble string  always represents the \"zero frame\". A \"frame\" is somewhat analogous to a virtual millisecond.   \"-\"  time: 10 \"frames\" of time passage.  \"|\"  complete: The successful completion of an observable. This is the observable producer signaling  complete()  \"#\"  error: An error terminating the observable. This is the observable producer signaling  error()  \"a\"  any character: All other characters represent a value being emitted by the producer signaling  next()  \"()\"  sync groupings: When multiple events need to be in the same frame synchronously, parentheses are used\n  to group those events. You can group nexted values, a completion or an error in this manner. The position of the\n  initial  (  determines the time at which its values are emitted.  \"^\"  subscription point: (hot observables only) shows the point at which the tested observables will be subscribed\n  to the hot observable. This is the \"zero frame\" for that observable, every frame before the  ^  will be negative.", 
            "title": "\u5927\u7406\u77f3\u8bed\u6cd5"
        }, 
        {
            "location": "/internal-marble-tests/#_5", 
            "text": "'-'  or  '------' : Equivalent to  Observable.never() , or an observable that never emits or completes  | : Equivalent to  Observable.empty()  # : Equivalent to  Observable.throw()  '--a--' : An observable that waits 20 \"frames\", emits value  a  and then never completes.  '--a--b--|' : On frame 20 emit  a , on frame 50 emit  b , and on frame 80,  complete  '--a--b--#' : On frame 20 emit  a , on frame 50 emit  b , and on frame 80,  error  '-a-^-b--|' : In a hot observable, on frame -20 emit  a , then on frame 20 emit  b , and on frame 50,  complete .  '--(abc)-|' : on frame 20, emit  a ,  b , and  c , then on frame 80  complete  '-----(a|)' : on frame 50, emit  a  and  complete .", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/internal-marble-tests/#_6", 
            "text": "The subscription marble syntax is slightly different to conventional marble syntax. It represents the  subscription  and an  unsubscription  points happening over time. There should be no other type of event represented in such diagram.   \"-\"  time: 10 \"frames\" of the passage.  \"^\"  subscription point: shows the point in time at which a subscription happen.  \"!\"  unsubscription point: shows the point in time at which a subscription is unsubscribed.   There should be  at most one   ^  point in a subscription marble diagram, and  at most one   !  point. Other than that, the  -  character is the only one allowed in a subscription marble diagram.", 
            "title": "\u8ba2\u9605\u5927\u7406\u77f3\u8bed\u6cd5"
        }, 
        {
            "location": "/internal-marble-tests/#_7", 
            "text": "'-'  or  '------' : no subscription ever happened.  '--^--' : a subscription happened after 20 \"frames\" of time passed, and the subscription was not unsubscribed.  '--^--!-' : on frame 20 a subscription happened, and on frame 50 was unsubscribed.", 
            "title": "\u4f8b\u5b50"
        }, 
        {
            "location": "/internal-marble-tests/#_8", 
            "text": "A basic test might look as follows:  var   e1   =   hot ( ----a--^--b-------c--| );  var   e2   =   hot (    ---d-^--e---------f-----| );  var   expected   =        ---(be)----c-f-----| ;  expectObservable ( e1 . merge ( e2 )). toBe ( expected );    The  ^  characters of  hot  observables should  always  be aligned.  The  first character  of  cold  observables or expected observables should  always  be aligned\n  with each other, and with the  ^  of hot observables.  Use default emission values when you can. Specify  values  when you have to.   A test example with specified values:  var   values   =   { \n   a :   1 , \n   b :   2 , \n   c :   3 , \n   d :   4 , \n   x :   1   +   3 ,   // a + c \n   y :   2   +   4 ,   // b + d  }  var   e1   =      hot ( ---a---b---| ,   values );  var   e2   =      hot ( -----c---d---| ,   values );  var   expected   =    -----x---y---| ;  expectObservable ( e1 . zip ( e2 ,   function ( x ,   y )   {   return   x   +   y ;   })) \n   . toBe ( expected ,   values );    Use the same hash to look up all values, this ensures that multiple uses of the same character have the\n  same value.  Make the result values as obvious as possible as to what they represent, these are  tests  afterall, we want\n  clarity more than efficiency, so  x: 1 + 3, // a + c  is better than just  x: 4 . The former conveys  why  it's 4,\n  the latter does not.   A test example with subscription assertions:  var   x   =   cold (          --a---b---c--| );  var   xsubs   =      ------^-------! ;  var   y   =   cold (                  ---d--e---f---| );  var   ysubs   =      --------------^-------------! ;  var   e1   =   hot (    ------x-------y------| ,   {   x :   x ,   y :   y   });  var   expected   =   --------a---b----d--e---f---| ;  expectObservable ( e1 . switch ()). toBe ( expected );  expectSubscriptions ( x . subscriptions ). toBe ( xsubs );  expectSubscriptions ( y . subscriptions ). toBe ( ysubs );    Align the start of  xsubs  and  ysubs  diagrams with  expected  diagram.  Notice how the  x  cold observable is unsubscribed at the same time  e1  emits  y .   In most tests it will be unnecessary to test subscription and unsubscription points, being either obvious or implied from the  expected  diagram. In those cases do not write subscription assertions. In test cases that have inner subscriptions or cold observables with multiple subscribers, these subscription assertions can be useful.", 
            "title": "\u89e3\u5256\u6d4b\u8bd5"
        }, 
        {
            "location": "/internal-marble-tests/#png", 
            "text": "Typically, each test case in Jasmine is written as  it('should do something', function () { /* ... */ }) . To mark a test case for PNG diagram generation, you must use the  asDiagram(label)  function, like this:  it . asDiagram ( operatorLabel )( should do something ,   function   ()   { \n   // ...  });   For instance, with  zip , we would write  it . asDiagram ( zip )( should zip by concatenating ,   function   ()   { \n   var   e1   =      hot ( ---a---b---| ); \n   var   e2   =      hot ( -----c---d---| ); \n   var   expected   =    -----x---y---| ; \n   var   values   =   {   x :   ac ,   y :   bd   }; \n\n   var   result   =   e1 . zip ( e2 ,   function ( x ,   y )   {   return   String ( x )   +   String ( y );   }); \n\n   expectObservable ( result ). toBe ( expected ,   values );  });   Then, when running  npm run tests2png , this test case will be parsed and a PNG file  zip.png  (filename determined by  ${operatorLabel}.png ) will be created in the  img/  folder.", 
            "title": "\u4ece\u6d4b\u8bd5\u751f\u6210PNG\u5927\u7406\u77f3\u56fe"
        }, 
        {
            "location": "/operator-creation/", 
            "text": "\u64cd\u4f5c\u7b26\u521b\u5efa\n\n\nThere are many ways to create an operator for RxJS. In this version of RxJS, performance was the primary consideration, as such, operator creation\nin a way that adheres to the existing structures in this library may not be straight forward. This is an attempt to document how to\ncreate an operator either for yourself, or for this library.\n\n\nFor how to develop a custom operator for \nthis\n library, \nsee below\n.\n\n\n\u4e3a\u6700\u7ec8\u7528\u6237DIY\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7b26\n\n\n\u65b9\u9488\n\n\nIn the most common case, users might like to create an operator to be used only by their app. These can be developed in\nany way the developer sees fit, but here are some guidelines:\n\n\n\n\nOperators should always return an Observable\n. You're performing operations on unknown sets of things to create new sets.\n  It only makes sense to return a new set. If you create a method that returns something other than an Observable, it's not an operator,\n  and that's fine.\n\n\nBe sure to manage subscriptions\n created inside of the Observable your operator returns. Your operator is going to have to\n  subscribe to the source (or \nthis\n) inside of the returned Observable, be sure that it's returned as part of unsubscribe handler or\n  subscription.\n\n\nBe sure to handle exceptions from passed functions\n. If you're implementing an operator that takes a function as an argument,\n  when you call it, you'll want to wrap it in a \ntry/catch\n and send the error down the \nerror()\n path on the observable.\n\n\nBe sure to teardown scarce resources\n in your unsubscribe handler of your returned Observable. If you're setting up event handlers\n  or a web socket, or something like that, the unsubscribe handler is a great place to remove that event handler or close that socket.\n\n\n\n\n\u4f8b\n\n\nfunction\n \nmySimpleOperator\n(\nsomeCallback\n)\n \n{\n\n   \n// We *could* do a `var self = this;` here to close over, but see next comment\n\n   \nreturn\n \nObservable\n.\ncreate\n(\nsubscriber\n \n=\n \n{\n\n     \n// because we\nre in an arrow function `this` is from the outer scope.\n\n     \nvar\n \nsource\n \n=\n \nthis\n;\n\n\n     \n// save our inner subscription\n\n     \nvar\n \nsubscription\n \n=\n \nsource\n.\nsubscribe\n(\nvalue\n \n=\n \n{\n\n       \n// important: catch errors from user-provided callbacks\n\n       \ntry\n \n{\n\n         \nsubscriber\n.\nnext\n(\nsomeCallback\n(\nvalue\n));\n\n       \n}\n \ncatch\n(\nerr\n)\n \n{\n\n         \nsubscriber\n.\nerror\n(\nerr\n);\n\n       \n}\n\n     \n},\n\n     \n// be sure to handle errors and completions as appropriate and\n\n     \n// send them along\n\n     \nerr\n \n=\n \nsubscriber\n.\nerror\n(\nerr\n),\n\n     \n()\n \n=\n \nsubscriber\n.\ncomplete\n());\n\n\n     \n// to return now\n\n     \nreturn\n \nsubscription\n;\n\n   \n});\n\n\n}\n\n\n\n\n\n\u5c06\u8fd0\u7b97\u7b26\u6dfb\u52a0\u5230Observable\n\n\nThere are a few ways to do this. It's really down to needs and preference:\n\n\n1) Use the ES7 function bind operator (\n::\n) available in transpilers like \nBabelJS\n:\n\n\nsomeObservable\n::\nmySimpleOperator\n(\nx\n \n=\n \nx\n \n+\n \n!\n);\n\n\n\n\n\n2) Create your own Observable subclass and override \nlift\n to return it:\n\n\nclass\n \nMyObservable\n \nextends\n \nObservable\n \n{\n\n  \nlift\n(\noperator\n)\n \n{\n\n    \nconst\n \nobservable\n \n=\n \nnew\n \nMyObservable\n();\n \n//\n-- important part here\n\n    \nobservable\n.\nsource\n \n=\n \nthis\n;\n\n    \nobservable\n.\noperator\n \n=\n \noperator\n;\n\n    \nreturn\n \nobservable\n;\n\n  \n}\n\n\n  \n// put it here .. or ..\n\n  \ncustomOperator\n()\n \n{\n\n    \n/* do things and return an Observable */\n\n  \n}\n\n\n}\n\n\n\n// ... put it here...\n\n\nMyObservable\n.\nprototype\n.\nmySimpleOperator\n \n=\n \nmySimpleOperator\n;\n\n\n\n\n\n3) Patch \nObservable.prototype\n directly:\n\n\nObservable\n.\nprototype\n.\nmySimpleOperator\n \n=\n \nmySimpleOperator\n;\n\n\n\n// ... and later .../\n\n\n\nsomeObservable\n.\nmySimpleOperator\n(\nx\n \n=\n \nx\n \n+\n \n!\n);\n\n\n\n\n\n\u8fd0\u7b97\u7b26\u4f5c\u4e3a\u7eaf\u51fd\u6570\n\n\nIf you don't want to patch the Observable prototype, you can also write the operator as a pure function that takes the input Observable as argument, instead of relying on the \nthis\n keyword.\n\n\nExample implementation:\n\n\nfunction\n \nmySimpleOperator\n(\nsomeCallback\n)\n \n{\n\n  \n// notice that we return a function here\n\n  \nreturn\n \nfunction\n \nmySimpleOperatorImplementation\n(\nsource\n)\n \n{\n\n    \nreturn\n \nObservable\n.\ncreate\n(\nsubscriber\n \n=\n \n{\n\n      \nvar\n \nsubscription\n \n=\n \nsource\n.\nsubscribe\n(\nvalue\n \n=\n \n{\n\n        \ntry\n \n{\n\n          \nsubscriber\n.\nnext\n(\nsomeCallback\n(\nvalue\n));\n\n        \n}\n \ncatch\n(\nerr\n)\n \n{\n\n          \nsubscriber\n.\nerror\n(\nerr\n);\n\n        \n}\n\n      \n},\n\n      \nerr\n \n=\n \nsubscriber\n.\nerror\n(\nerr\n),\n\n      \n()\n \n=\n \nsubscriber\n.\ncomplete\n());\n\n\n      \nreturn\n \nsubscription\n;\n\n   \n});\n\n  \n}\n\n\n}\n\n\n\n\n\nThis can now be used with the \npipe()\n method on the Observable:\n\n\nconst\n \nobs\n \n=\n \nsomeObservable\n.\npipe\n(\nmySimpleOperator\n(\nx\n \n=\n \nx\n \n+\n \n!\n));\n\n\n\n\n\n\u5c06\u60a8\u7684\u64cd\u4f5c\u5458\u53d1\u5e03\u4e3a\u5355\u72ec\u7684\u5e93\n\n\nWe strongly recommend you to publish your custom operator as an npm package as a pure function to be used with \nlet\n. See the sections above. RxJS core already has over 100 operators, and we should not add more operators unless they are absolutely essential and add functionality not possible with existing operators.\n\n\nPublishing it as a separate library will guarantee your operator to be immediately usable by the community, and we can start growing an RxJS ecosystem as opposed to making the RxJS library thicker and heavier. There are cases, however, where the new operator should be added to the core library.\n\n\n\u521b\u5efa\u5305\u542b\u5728\nThis\nLibrary\u4e2d\u7684\u8fd0\u7b97\u7b26\n\n\nPlease publish your operator as a separate library before proposing it into RxJS.\n See the section above.\n\n\nTo create an operator for inclusion in this library, it's probably best to work from prior art\n. Something\nlike the \nfilter\n operator would be a good start. It's not expected that you'll be able to read\nthis section and suddenly be an expert operator contributor.\n\n\nIf you find yourself confused, DO NOT worry. Follow prior examples in the repo, submit a PR, and we'll work with you.\n\n\nHopefully the information provided here will give context to decisions made while developing operators in this library.\nThere are a few things to know and (try to) understand while developing operators:\n\n\n\n\nAll operator methods are actually created in separate modules from \nObservable\n. This is so developers can\n \"build their own observable\" by pulling in operator methods and adding them to observable in their own module.\n It also means operators can be brought in ad-hock and used directly, either with the ES7 function bind operator\n in Babel (\n::\n) or by using it with \n.call()\n.\n\n\nEvery operator has an \nOperator\n class. The \nOperator\n class is really a \nSubscriber\n \"factory\". It's\n what gets passed into the \nlift\n method to make the \"magic\" happen. It's sole job is to create the operation's\n \nSubscriber\n instance on subscription.\n\n\nEvery operator has a \nSubscriber\n class. This class does \nall\n of the logic for the operation. It's job is to\n handle values being nexted in (generally by overriding \n_next()\n) and forward it along to the \ndestination\n,\n which is the next observer in the chain.\n\n\nIt's important to note that the \ndestination\n Observer set on any \nSubscriber\n serves as more than just\n   the destinations for the events passing through, If the \ndestination\n is a \nSubscriber\n it also is used to set up\n   a shared underlying \nSubscription\n, which, in fact, is also a \nSubscriber\n, and is the first \nSubscriber\n in the\n   chain.\n\n\nSubscribers all have \nadd\n and \nremove\n methods that are used for adding and removing inner subscriptions to\n   the shared underlying subscription.\n\n\nWhen you \nsubscribe\n to an Observable, the functions or Observer you passed are used to create the final \ndestination\n\n   \nSubscriber\n for the chain. It's this \nSubscriber\n that is really also the shared \nSubscription\n for the operator chain.\n\n\n\n\n\u4e3a\u8fd0\u8425\u5546\u63d0\u4ea4PR\n\n\nPlease complete these steps for each new operator added to RxJS as a pull request:\n\n\n\n\nAdd the operator to Rx\n\n\nIt must have a \n-spec.ts\n tests file covering the canonical corner cases, with marble diagram tests\n\n\nIf possible, write a \nasDiagram\n test case too, for PNG diagram generation purposes\n\n\nThe spec file should have a type definition test at the end of the spec to verify type definition for various use cases\n\n\nThe operator must be documented in JSDoc style in the implementation file, including also the PNG marble diagram image\n\n\nThe operator should be listed in \ndoc/operators.md\n in a category of operators\n\n\nIt should also be inserted in the operator decision tree file \ndoc/decision-tree-widget/tree.yml\n\n\nYou may need to update \nMIGRATION.md\n if the operator differs from the corresponding one in RxJS v4\n\n\n\n\n\u5185\u90e8\u5b50\u76ee\u5f55\n\n\nAn \"inner subscriber\" or \"inner subscription\" is any subscription created inside of an operator's primary Subscriber. For example,\nif you were to create your own \"merge\" operator of some sort, the Observables that are arriving on the source observable that you\nwant to \"merge\" will need to be subscribed to. Those subscriptions will be inner subscriptions. One interesting thing about\ninner subscriptions in this library is that if you pass and set a \ndestination\n on them, they will try to use that destination\nfor their \nunsubscribe\n calls. Meaning if you call \nunsubscribe\n on them, it might not do anything. As such, it's usually desireable\nnot to set the \ndestination\n of inner subscriptions. An example of this might be the switch operators, that have a single underlying\ninner subscription that needs to unsubscribe independent of the main subscription.\n\n\nIf you find yourself creating inner subscriptions, it might also be worth checking to see if the observable being passed \n_isScalar\n,\nbecause if it is, you can pull the \nvalue\n out of it directly and improve the performance of your operator when it's operating over\nscalar observables. For reference a scalar observable is any observable that has a single static value underneath it. \nObservable.of('foo')\n will\nreturn a \nScalarObservable\n, likewise, resolved \nPromiseObservable\ns will act as scalars.", 
            "title": "\u521b\u5efa\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operator-creation/#_1", 
            "text": "There are many ways to create an operator for RxJS. In this version of RxJS, performance was the primary consideration, as such, operator creation\nin a way that adheres to the existing structures in this library may not be straight forward. This is an attempt to document how to\ncreate an operator either for yourself, or for this library.  For how to develop a custom operator for  this  library,  see below .", 
            "title": "\u64cd\u4f5c\u7b26\u521b\u5efa"
        }, 
        {
            "location": "/operator-creation/#diy", 
            "text": "", 
            "title": "\u4e3a\u6700\u7ec8\u7528\u6237DIY\u81ea\u5b9a\u4e49\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/operator-creation/#_2", 
            "text": "In the most common case, users might like to create an operator to be used only by their app. These can be developed in\nany way the developer sees fit, but here are some guidelines:   Operators should always return an Observable . You're performing operations on unknown sets of things to create new sets.\n  It only makes sense to return a new set. If you create a method that returns something other than an Observable, it's not an operator,\n  and that's fine.  Be sure to manage subscriptions  created inside of the Observable your operator returns. Your operator is going to have to\n  subscribe to the source (or  this ) inside of the returned Observable, be sure that it's returned as part of unsubscribe handler or\n  subscription.  Be sure to handle exceptions from passed functions . If you're implementing an operator that takes a function as an argument,\n  when you call it, you'll want to wrap it in a  try/catch  and send the error down the  error()  path on the observable.  Be sure to teardown scarce resources  in your unsubscribe handler of your returned Observable. If you're setting up event handlers\n  or a web socket, or something like that, the unsubscribe handler is a great place to remove that event handler or close that socket.", 
            "title": "\u65b9\u9488"
        }, 
        {
            "location": "/operator-creation/#_3", 
            "text": "function   mySimpleOperator ( someCallback )   { \n    // We *could* do a `var self = this;` here to close over, but see next comment \n    return   Observable . create ( subscriber   =   { \n      // because we re in an arrow function `this` is from the outer scope. \n      var   source   =   this ; \n\n      // save our inner subscription \n      var   subscription   =   source . subscribe ( value   =   { \n        // important: catch errors from user-provided callbacks \n        try   { \n          subscriber . next ( someCallback ( value )); \n        }   catch ( err )   { \n          subscriber . error ( err ); \n        } \n      }, \n      // be sure to handle errors and completions as appropriate and \n      // send them along \n      err   =   subscriber . error ( err ), \n      ()   =   subscriber . complete ()); \n\n      // to return now \n      return   subscription ; \n    });  }", 
            "title": "\u4f8b"
        }, 
        {
            "location": "/operator-creation/#observable", 
            "text": "There are a few ways to do this. It's really down to needs and preference:  1) Use the ES7 function bind operator ( :: ) available in transpilers like  BabelJS :  someObservable :: mySimpleOperator ( x   =   x   +   ! );   2) Create your own Observable subclass and override  lift  to return it:  class   MyObservable   extends   Observable   { \n   lift ( operator )   { \n     const   observable   =   new   MyObservable ();   // -- important part here \n     observable . source   =   this ; \n     observable . operator   =   operator ; \n     return   observable ; \n   } \n\n   // put it here .. or .. \n   customOperator ()   { \n     /* do things and return an Observable */ \n   }  }  // ... put it here...  MyObservable . prototype . mySimpleOperator   =   mySimpleOperator ;   3) Patch  Observable.prototype  directly:  Observable . prototype . mySimpleOperator   =   mySimpleOperator ;  // ... and later .../  someObservable . mySimpleOperator ( x   =   x   +   ! );", 
            "title": "\u5c06\u8fd0\u7b97\u7b26\u6dfb\u52a0\u5230Observable"
        }, 
        {
            "location": "/operator-creation/#_4", 
            "text": "If you don't want to patch the Observable prototype, you can also write the operator as a pure function that takes the input Observable as argument, instead of relying on the  this  keyword.  Example implementation:  function   mySimpleOperator ( someCallback )   { \n   // notice that we return a function here \n   return   function   mySimpleOperatorImplementation ( source )   { \n     return   Observable . create ( subscriber   =   { \n       var   subscription   =   source . subscribe ( value   =   { \n         try   { \n           subscriber . next ( someCallback ( value )); \n         }   catch ( err )   { \n           subscriber . error ( err ); \n         } \n       }, \n       err   =   subscriber . error ( err ), \n       ()   =   subscriber . complete ()); \n\n       return   subscription ; \n    }); \n   }  }   This can now be used with the  pipe()  method on the Observable:  const   obs   =   someObservable . pipe ( mySimpleOperator ( x   =   x   +   ! ));", 
            "title": "\u8fd0\u7b97\u7b26\u4f5c\u4e3a\u7eaf\u51fd\u6570"
        }, 
        {
            "location": "/operator-creation/#_5", 
            "text": "We strongly recommend you to publish your custom operator as an npm package as a pure function to be used with  let . See the sections above. RxJS core already has over 100 operators, and we should not add more operators unless they are absolutely essential and add functionality not possible with existing operators.  Publishing it as a separate library will guarantee your operator to be immediately usable by the community, and we can start growing an RxJS ecosystem as opposed to making the RxJS library thicker and heavier. There are cases, however, where the new operator should be added to the core library.", 
            "title": "\u5c06\u60a8\u7684\u64cd\u4f5c\u5458\u53d1\u5e03\u4e3a\u5355\u72ec\u7684\u5e93"
        }, 
        {
            "location": "/operator-creation/#thislibrary", 
            "text": "Please publish your operator as a separate library before proposing it into RxJS.  See the section above.  To create an operator for inclusion in this library, it's probably best to work from prior art . Something\nlike the  filter  operator would be a good start. It's not expected that you'll be able to read\nthis section and suddenly be an expert operator contributor.  If you find yourself confused, DO NOT worry. Follow prior examples in the repo, submit a PR, and we'll work with you.  Hopefully the information provided here will give context to decisions made while developing operators in this library.\nThere are a few things to know and (try to) understand while developing operators:   All operator methods are actually created in separate modules from  Observable . This is so developers can\n \"build their own observable\" by pulling in operator methods and adding them to observable in their own module.\n It also means operators can be brought in ad-hock and used directly, either with the ES7 function bind operator\n in Babel ( :: ) or by using it with  .call() .  Every operator has an  Operator  class. The  Operator  class is really a  Subscriber  \"factory\". It's\n what gets passed into the  lift  method to make the \"magic\" happen. It's sole job is to create the operation's\n  Subscriber  instance on subscription.  Every operator has a  Subscriber  class. This class does  all  of the logic for the operation. It's job is to\n handle values being nexted in (generally by overriding  _next() ) and forward it along to the  destination ,\n which is the next observer in the chain.  It's important to note that the  destination  Observer set on any  Subscriber  serves as more than just\n   the destinations for the events passing through, If the  destination  is a  Subscriber  it also is used to set up\n   a shared underlying  Subscription , which, in fact, is also a  Subscriber , and is the first  Subscriber  in the\n   chain.  Subscribers all have  add  and  remove  methods that are used for adding and removing inner subscriptions to\n   the shared underlying subscription.  When you  subscribe  to an Observable, the functions or Observer you passed are used to create the final  destination \n    Subscriber  for the chain. It's this  Subscriber  that is really also the shared  Subscription  for the operator chain.", 
            "title": "\u521b\u5efa\u5305\u542b\u5728ThisLibrary\u4e2d\u7684\u8fd0\u7b97\u7b26"
        }, 
        {
            "location": "/operator-creation/#pr", 
            "text": "Please complete these steps for each new operator added to RxJS as a pull request:   Add the operator to Rx  It must have a  -spec.ts  tests file covering the canonical corner cases, with marble diagram tests  If possible, write a  asDiagram  test case too, for PNG diagram generation purposes  The spec file should have a type definition test at the end of the spec to verify type definition for various use cases  The operator must be documented in JSDoc style in the implementation file, including also the PNG marble diagram image  The operator should be listed in  doc/operators.md  in a category of operators  It should also be inserted in the operator decision tree file  doc/decision-tree-widget/tree.yml  You may need to update  MIGRATION.md  if the operator differs from the corresponding one in RxJS v4", 
            "title": "\u4e3a\u8fd0\u8425\u5546\u63d0\u4ea4PR"
        }, 
        {
            "location": "/operator-creation/#_6", 
            "text": "An \"inner subscriber\" or \"inner subscription\" is any subscription created inside of an operator's primary Subscriber. For example,\nif you were to create your own \"merge\" operator of some sort, the Observables that are arriving on the source observable that you\nwant to \"merge\" will need to be subscribed to. Those subscriptions will be inner subscriptions. One interesting thing about\ninner subscriptions in this library is that if you pass and set a  destination  on them, they will try to use that destination\nfor their  unsubscribe  calls. Meaning if you call  unsubscribe  on them, it might not do anything. As such, it's usually desireable\nnot to set the  destination  of inner subscriptions. An example of this might be the switch operators, that have a single underlying\ninner subscription that needs to unsubscribe independent of the main subscription.  If you find yourself creating inner subscriptions, it might also be worth checking to see if the observable being passed  _isScalar ,\nbecause if it is, you can pull the  value  out of it directly and improve the performance of your operator when it's operating over\nscalar observables. For reference a scalar observable is any observable that has a single static value underneath it.  Observable.of('foo')  will\nreturn a  ScalarObservable , likewise, resolved  PromiseObservable s will act as scalars.", 
            "title": "\u5185\u90e8\u5b50\u76ee\u5f55"
        }, 
        {
            "location": "/rxmarbles/", 
            "text": "\u5f39\u73e0\u56fe (Marble Diagrams)\n\n\n\u5f39\u73e0\u56fe\u662f\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u7b26\u5e94\u7528\u4e8ex\u4e2a\u6570\u636e\u6d41\u7684\u56fe\u5f62\u8868\u793a\u3002\u5b83\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a\n\n\n  ---v-----v----\n\n  -------v------\n\n  operator\n  ---r---r------\n\n\n\n\n\n\u4e3b\u65e8\u662f\u4f7f\u5f97\u64cd\u4f5c\u7b26\u66f4\u5bb9\u6613\u7406\u89e3\u3002\nRx Marbles\n \u6db5\u76d6\u4e86 RxJS \u4e2d\u7684\u7edd\u5927\u591a\u6570\u64cd\u4f5c\u7b26\u3002", 
            "title": "\u5f39\u73e0\u56fe"
        }, 
        {
            "location": "/rxmarbles/#marble-diagrams", 
            "text": "\u5f39\u73e0\u56fe\u662f\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u7b26\u5e94\u7528\u4e8ex\u4e2a\u6570\u636e\u6d41\u7684\u56fe\u5f62\u8868\u793a\u3002\u5b83\u770b\u8d77\u6765\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a    ---v-----v---- \n  -------v------ \n  operator\n  ---r---r------   \u4e3b\u65e8\u662f\u4f7f\u5f97\u64cd\u4f5c\u7b26\u66f4\u5bb9\u6613\u7406\u89e3\u3002 Rx Marbles  \u6db5\u76d6\u4e86 RxJS \u4e2d\u7684\u7edd\u5927\u591a\u6570\u64cd\u4f5c\u7b26\u3002", 
            "title": "\u5f39\u73e0\u56fe (Marble Diagrams)"
        }, 
        {
            "location": "/other/", 
            "text": "\u5176\u4ed6\u5b66\u4e60\u5185\u5bb9\n\n\nxstream\n\n\ncycle\n\n\nmost.js", 
            "title": "\u6269\u5c55\u5b66\u4e60"
        }, 
        {
            "location": "/other/#_1", 
            "text": "xstream  cycle  most.js", 
            "title": "\u5176\u4ed6\u5b66\u4e60\u5185\u5bb9"
        }, 
        {
            "location": "/maintainer-guidelines/", 
            "text": "\u7ef4\u62a4\u8005\u6307\u5357\n\n\nThese are guidelines for maintainers of this repository as (mostly) \ngifted to us by\n\nHis Beardliness, @jeffbcross. They are words to live by for those that are tasked with reviewing and merging pull requests and otherwise\nshepherding the community. As the roster of trusted maintainers grows, we'll expect these guidelines to stay pretty\nmuch the same (but suggestions are always welcome).\n\n\nThe ~~10~~ 6 Commandments\n\n\n\n\nCode of Conduct\n. We should be setting a good example and be welcoming to all. We should be listening\n to all feedback from everyone in our community and respect their viewpoints and opinions.\n\n\nBe sure PRs meet \nContribution Guidelines\n. It's important we keep our code base\n and repository consistent. The best way to do this is to know and enforce the contribution guidelines.\n\n\nClean, flat commit history\n. We never click the green merge button on PRs, but instead we pull down\n the PR branch and rebase it against master then replace master with the PR branch. See\n \nexample gist\n. This reduces noise in the commit\n history, removing all of the merge commits, and keeps history flat. The flat history is beneficial\n to tools/scripts that analyze commit ancestry.\n\n\nAlways green master\n. Failing master builds tend to cascade into other broken builds, and\n frustration among other contributors who have rebased against a broken master. Much of our deployment\n and other infrastructure is based on the assumption that master is always green, nothing should be\n merged before Travis has confirmed that a PR is green, even for seemingly insignificant changes.\n Nothing should be merged into a red master, and whomever broke it should drop everything and fix it\n right away. Fixes should be submitted as a PR and verified as green instead of immediately merging\n to master.\n\n\nNo force pushes to master\n. Only in rare circumstances should a force push to master be made,\n and other maintainers should be notified beforehand. The most common situation for a justified force\n push is when a commit has been pushed with an invalid message. The force push should be made as soon\n as possible to reduce side effects.\n\n\nSmall, logical commits\n. A PR should be focused on a single problem, though that problem may be\n reasonable to be broken into a few logical commits. For example, a global renaming may be best to be\n broken into a single commit that renames all files, and then a commit that renames symbols within files.\n This makes the review process simpler easier, so the diff of the meaty commit (where symbols are\n renamed) can be easily understood than if both were done in the same commit, in which case github would\n just show a deleted file and an added file.", 
            "title": "\u7ef4\u62a4\u8005\u6307\u5357"
        }, 
        {
            "location": "/maintainer-guidelines/#_1", 
            "text": "These are guidelines for maintainers of this repository as (mostly)  gifted to us by \nHis Beardliness, @jeffbcross. They are words to live by for those that are tasked with reviewing and merging pull requests and otherwise\nshepherding the community. As the roster of trusted maintainers grows, we'll expect these guidelines to stay pretty\nmuch the same (but suggestions are always welcome).", 
            "title": "\u7ef4\u62a4\u8005\u6307\u5357"
        }, 
        {
            "location": "/maintainer-guidelines/#the-10-6-commandments", 
            "text": "Code of Conduct . We should be setting a good example and be welcoming to all. We should be listening\n to all feedback from everyone in our community and respect their viewpoints and opinions.  Be sure PRs meet  Contribution Guidelines . It's important we keep our code base\n and repository consistent. The best way to do this is to know and enforce the contribution guidelines.  Clean, flat commit history . We never click the green merge button on PRs, but instead we pull down\n the PR branch and rebase it against master then replace master with the PR branch. See\n  example gist . This reduces noise in the commit\n history, removing all of the merge commits, and keeps history flat. The flat history is beneficial\n to tools/scripts that analyze commit ancestry.  Always green master . Failing master builds tend to cascade into other broken builds, and\n frustration among other contributors who have rebased against a broken master. Much of our deployment\n and other infrastructure is based on the assumption that master is always green, nothing should be\n merged before Travis has confirmed that a PR is green, even for seemingly insignificant changes.\n Nothing should be merged into a red master, and whomever broke it should drop everything and fix it\n right away. Fixes should be submitted as a PR and verified as green instead of immediately merging\n to master.  No force pushes to master . Only in rare circumstances should a force push to master be made,\n and other maintainers should be notified beforehand. The most common situation for a justified force\n push is when a commit has been pushed with an invalid message. The force push should be made as soon\n as possible to reduce side effects.  Small, logical commits . A PR should be focused on a single problem, though that problem may be\n reasonable to be broken into a few logical commits. For example, a global renaming may be best to be\n broken into a single commit that renames all files, and then a commit that renames symbols within files.\n This makes the review process simpler easier, so the diff of the meaty commit (where symbols are\n renamed) can be easily understood than if both were done in the same commit, in which case github would\n just show a deleted file and an added file.", 
            "title": "The ~~10~~ 6 Commandments"
        }
    ]
}